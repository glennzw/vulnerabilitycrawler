   fixed security bugs with unescaped input to the shell
        else:
            format = 'png'

        cmd = "dot -T%s" % (format)
        if output:
            cmd += " -o %s" % output
        dotpipe = Popen(cmd, shell=True, stdin=PIPE,
                        stdout=PIPE, close_fds=True)
        try:
            dotpipe.stdin.write("digraph groups {\n")
        except:
import os
from mercurial import ui, hg
from subprocess import Popen, PIPE
import Bcfg2.Server.Plugin

# for debugging output only
                self.ipcache[client] = (ipaddr, client)
                return (ipaddr, client)
            except socket.gaierror:
                cmd = "getent hosts %s" % client
                ipaddr = Popen(cmd, shell=True, \
                               stdout=PIPE).stdout.read().strip().split()
                if ipaddr:
                    self.ipcache[client] = (ipaddr, client)
import lxml.etree
import posixpath
import tempfile
import os
from subprocess import Popen, PIPE, STDOUT
# Compatibility import
        type = self.key_specs[entry.get('name')]['type']
        bits = self.key_specs[entry.get('name')]['bits']
        if type == 'rsa':
            cmd = "openssl genrsa %s " % bits
        elif type == 'dsa':
            cmd = "openssl dsaparam -noout -genkey %s" % bits
        key = Popen(cmd, shell=True, stdout=PIPE).stdout.read()
        return key

    def get_cert(self, entry, metadata):
        """
        chaincert = self.CAs[self.cert_specs[entry.get('name')]['ca']].get('chaincert')
        cert = self.data + filename
        cmd = "openssl verify -CAfile %s %s" % (chaincert, cert)
        res = Popen(cmd, shell=True, stdout=PIPE, stderr=STDOUT).stdout.read()
        if res == cert + ": OK\n":
            return True
        return False
        """
        cert = self.data + filename
        key = self.data + key_filename
        cmd = "openssl x509 -noout -modulus -in %s | openssl md5" % cert
        cert_md5 = Popen(cmd, shell=True, stdout=PIPE, stderr=STDOUT).stdout.read()
        cmd = "openssl rsa -noout -modulus -in %s | openssl md5" % key
        key_md5 = Popen(cmd, shell=True, stdout=PIPE, stderr=STDOUT).stdout.read()
        if cert_md5 == key_md5:
            return True
        ca_config = self.CAs[ca]['config']
        days = self.cert_specs[entry.get('name')]['days']
        passphrase = self.CAs[ca].get('passphrase')
        if passphrase:
            cmd = "openssl ca -config %s -in %s -days %s -batch -passin pass:%s" % (ca_config,
                                                                                    req,
                                                                                    days,
                                                                                    passphrase)
        else:
            cmd = "openssl ca -config %s -in %s -days %s -batch" % (ca_config,
                                                                    req,
                                                                    days)
        cert = Popen(cmd, shell=True, stdout=PIPE).stdout.read()
        try:
            os.unlink(req_config)
            os.unlink(req)
        req = tempfile.mkstemp()[1]
        days = self.cert_specs[entry.get('name')]['days']
        key = self.data + key_filename
        cmd = "openssl req -new -config %s -days %s -key %s -text -out %s" % (req_config,
                                                                              days,
                                                                              key,
                                                                              req)
        res = Popen(cmd, shell=True, stdout=PIPE).stdout.read()
        return req
        """Read svn revision information for the Bcfg2 repository."""
        try:
            data = Popen(("env LC_ALL=C svn info %s" %
                         (self.datastore)), shell=True,
                         stdout=PIPE).communicate()[0].split('\n')
            return [line.split(': ')[1] for line in data \
                    if line[:9] == 'Revision:'][-1]
