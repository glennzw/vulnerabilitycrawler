commit bf2055088a3a2d3bb3d3c37d464954ec1a25771f
Author: Albert Astals Cid <aacid@kde.org>
Date:   Tue Sep 21 19:03:19 2010 +0100

    Properly initialize stack
    
    Fixes crash in broken pdf provided by Joel Voss of Leviathan Security Group

diff --git a/poppler/Function.cc b/poppler/Function.cc
index b7c23fe..b28ee3d 100644
--- a/poppler/Function.cc
+++ b/poppler/Function.cc
@@ -1103,54 +1103,55 @@ class PostScriptFunctionItem : public PopplerCacheItem
 PostScriptFunction::PostScriptFunction(Object *funcObj, Dict *dict) {
   Stream *str;
   int codePtr;
   GooString *tok;
 
   code = NULL;
   codeString = NULL;
   codeSize = 0;
+  stack = NULL;
   ok = gFalse;
   cache = new PopplerCache(5);
 
   //----- initialize the generic stuff
   if (!init(dict)) {
     goto err1;
   }
   if (!hasRange) {
     error(-1, "Type 4 function is missing range");
     goto err1;
   }
 
   //----- get the stream
   if (!funcObj->isStream()) {
     error(-1, "Type 4 function isn't a stream");
     goto err1;
   }
   str = funcObj->getStream();
 
   //----- parse the function
   codeString = new GooString();
   str->reset();
   if (!(tok = getToken(str)) || tok->cmp("{")) {
     error(-1, "Expected '{' at start of PostScript function");
     if (tok) {
       delete tok;
     }
     goto err1;
   }
   delete tok;
   codePtr = 0;
   if (!parseCode(str, &codePtr)) {
     goto err2;
   }
   str->close();
 
   ok = gTrue;
   
   stack = new PSStack();
 
  err2:
   str->close();
  err1:
   return;
 }
 
