   x86: clear DF before calling signal handler
   
   The Linux kernel currently does not clear the direction flag before
   calling a signal handler, whereas the x86/x86-64 ABI requires that.
   
   Linux had this behavior/bug forever, but this becomes a real problem
   with gcc version 4.3, which assumes that the direction flag is
   correctly cleared at the entry of a function.
   
   This patches changes the setup_frame() functions to clear the
   direction before entering the signal handler.
   
   Signed-off-by: Aurelien Jarno <aurelien@aurel32.net>
   Signed-off-by: Ingo Molnar <mingo@elte.hu>
   Acked-by: H. Peter Anvin <hpa@zytor.com>
	regs->ss = __USER32_DS;

	set_fs(USER_DS);
	regs->flags &= ~X86_EFLAGS_TF;
	if (test_thread_flag(TIF_SINGLESTEP))
		ptrace_notify(SIGTRAP);

	regs->ss = __USER32_DS;

	set_fs(USER_DS);
	regs->flags &= ~X86_EFLAGS_TF;
	if (test_thread_flag(TIF_SINGLESTEP))
		ptrace_notify(SIGTRAP);

	 * The tracer may want to single-step inside the
	 * handler too.
	 */
	regs->flags &= ~TF_MASK;
	if (test_thread_flag(TIF_SINGLESTEP))
		ptrace_notify(SIGTRAP);

	 * The tracer may want to single-step inside the
	 * handler too.
	 */
	regs->flags &= ~TF_MASK;
	if (test_thread_flag(TIF_SINGLESTEP))
		ptrace_notify(SIGTRAP);

	   see include/asm-x86_64/uaccess.h for details. */
	set_fs(USER_DS);

	regs->flags &= ~X86_EFLAGS_TF;
	if (test_thread_flag(TIF_SINGLESTEP))
		ptrace_notify(SIGTRAP);
#ifdef DEBUG_SIG
