commit 76a67ec6fb79ff3570dcb5342142c16098299911
Author: J. Bruce Fields <bfields@citi.umich.edu>
Date:   Mon Mar 16 18:34:20 2009 -0400

    nfsd: nfsd should drop CAP_MKNOD for non-root
    
    Since creating a device node is normally an operation requiring special
    privilege, Igor Zhbanov points out that it is surprising (to say the
    least) that a client can, for example, create a device node on a
    filesystem exported with root_squash.
    
    So, make sure CAP_MKNOD is among the capabilities dropped when an nfsd
    thread handles a request from a non-root user.
    
    Reported-by: Igor Zhbanov <izh1979@gmail.com>
    Cc: stable@kernel.org
    Signed-off-by: J. Bruce Fields <bfields@citi.umich.edu>

diff --git a/include/linux/capability.h b/include/linux/capability.h
index 1b98725..4864a43 100644
--- a/include/linux/capability.h
+++ b/include/linux/capability.h
@@ -104,308 +104,310 @@ typedef struct kernel_cap_struct {
 struct cpu_vfs_cap_data {
 	__u32 magic_etc;
 	kernel_cap_t permitted;
 	kernel_cap_t inheritable;
 };
 
 #define _USER_CAP_HEADER_SIZE  (sizeof(struct __user_cap_header_struct))
 #define _KERNEL_CAP_T_SIZE     (sizeof(kernel_cap_t))
 
 #endif
 
 
 /**
  ** POSIX-draft defined capabilities.
  **/
 
 /* In a system with the [_POSIX_CHOWN_RESTRICTED] option defined, this
    overrides the restriction of changing file ownership and group
    ownership. */
 
 #define CAP_CHOWN            0
 
 /* Override all DAC access, including ACL execute access if
    [_POSIX_ACL] is defined. Excluding DAC access covered by
    CAP_LINUX_IMMUTABLE. */
 
 #define CAP_DAC_OVERRIDE     1
 
 /* Overrides all DAC restrictions regarding read and search on files
    and directories, including ACL restrictions if [_POSIX_ACL] is
    defined. Excluding DAC access covered by CAP_LINUX_IMMUTABLE. */
 
 #define CAP_DAC_READ_SEARCH  2
 
 /* Overrides all restrictions about allowed operations on files, where
    file owner ID must be equal to the user ID, except where CAP_FSETID
    is applicable. It doesn't override MAC and DAC restrictions. */
 
 #define CAP_FOWNER           3
 
 /* Overrides the following restrictions that the effective user ID
    shall match the file owner ID when setting the S_ISUID and S_ISGID
    bits on that file; that the effective group ID (or one of the
    supplementary group IDs) shall match the file owner ID when setting
    the S_ISGID bit on that file; that the S_ISUID and S_ISGID bits are
    cleared on successful return from chown(2) (not implemented). */
 
 #define CAP_FSETID           4
 
 /* Overrides the restriction that the real or effective user ID of a
    process sending a signal must match the real or effective user ID
    of the process receiving the signal. */
 
 #define CAP_KILL             5
 
 /* Allows setgid(2) manipulation */
 /* Allows setgroups(2) */
 /* Allows forged gids on socket credentials passing. */
 
 #define CAP_SETGID           6
 
 /* Allows set*uid(2) manipulation (including fsuid). */
 /* Allows forged pids on socket credentials passing. */
 
 #define CAP_SETUID           7
 
 
 /**
  ** Linux-specific capabilities
  **/
 
 /* Without VFS support for capabilities:
  *   Transfer any capability in your permitted set to any pid,
  *   remove any capability in your permitted set from any pid
  * With VFS support for capabilities (neither of above, but)
  *   Add any capability from current's capability bounding set
  *       to the current process' inheritable set
  *   Allow taking bits out of capability bounding set
  *   Allow modification of the securebits for a process
  */
 
 #define CAP_SETPCAP          8
 
 /* Allow modification of S_IMMUTABLE and S_APPEND file attributes */
 
 #define CAP_LINUX_IMMUTABLE  9
 
 /* Allows binding to TCP/UDP sockets below 1024 */
 /* Allows binding to ATM VCIs below 32 */
 
 #define CAP_NET_BIND_SERVICE 10
 
 /* Allow broadcasting, listen to multicast */
 
 #define CAP_NET_BROADCAST    11
 
 /* Allow interface configuration */
 /* Allow administration of IP firewall, masquerading and accounting */
 /* Allow setting debug option on sockets */
 /* Allow modification of routing tables */
 /* Allow setting arbitrary process / process group ownership on
    sockets */
 /* Allow binding to any address for transparent proxying */
 /* Allow setting TOS (type of service) */
 /* Allow setting promiscuous mode */
 /* Allow clearing driver statistics */
 /* Allow multicasting */
 /* Allow read/write of device-specific registers */
 /* Allow activation of ATM control sockets */
 
 #define CAP_NET_ADMIN        12
 
 /* Allow use of RAW sockets */
 /* Allow use of PACKET sockets */
 
 #define CAP_NET_RAW          13
 
 /* Allow locking of shared memory segments */
 /* Allow mlock and mlockall (which doesn't really have anything to do
    with IPC) */
 
 #define CAP_IPC_LOCK         14
 
 /* Override IPC ownership checks */
 
 #define CAP_IPC_OWNER        15
 
 /* Insert and remove kernel modules - modify kernel without limit */
 #define CAP_SYS_MODULE       16
 
 /* Allow ioperm/iopl access */
 /* Allow sending USB messages to any device via /proc/bus/usb */
 
 #define CAP_SYS_RAWIO        17
 
 /* Allow use of chroot() */
 
 #define CAP_SYS_CHROOT       18
 
 /* Allow ptrace() of any process */
 
 #define CAP_SYS_PTRACE       19
 
 /* Allow configuration of process accounting */
 
 #define CAP_SYS_PACCT        20
 
 /* Allow configuration of the secure attention key */
 /* Allow administration of the random device */
 /* Allow examination and configuration of disk quotas */
 /* Allow configuring the kernel's syslog (printk behaviour) */
 /* Allow setting the domainname */
 /* Allow setting the hostname */
 /* Allow calling bdflush() */
 /* Allow mount() and umount(), setting up new smb connection */
 /* Allow some autofs root ioctls */
 /* Allow nfsservctl */
 /* Allow VM86_REQUEST_IRQ */
 /* Allow to read/write pci config on alpha */
 /* Allow irix_prctl on mips (setstacksize) */
 /* Allow flushing all cache on m68k (sys_cacheflush) */
 /* Allow removing semaphores */
 /* Used instead of CAP_CHOWN to "chown" IPC message queues, semaphores
    and shared memory */
 /* Allow locking/unlocking of shared memory segment */
 /* Allow turning swap on/off */
 /* Allow forged pids on socket credentials passing */
 /* Allow setting readahead and flushing buffers on block devices */
 /* Allow setting geometry in floppy driver */
 /* Allow turning DMA on/off in xd driver */
 /* Allow administration of md devices (mostly the above, but some
    extra ioctls) */
 /* Allow tuning the ide driver */
 /* Allow access to the nvram device */
 /* Allow administration of apm_bios, serial and bttv (TV) device */
 /* Allow manufacturer commands in isdn CAPI support driver */
 /* Allow reading non-standardized portions of pci configuration space */
 /* Allow DDI debug ioctl on sbpcd driver */
 /* Allow setting up serial ports */
 /* Allow sending raw qic-117 commands */
 /* Allow enabling/disabling tagged queuing on SCSI controllers and sending
    arbitrary SCSI commands */
 /* Allow setting encryption key on loopback filesystem */
 /* Allow setting zone reclaim policy */
 
 #define CAP_SYS_ADMIN        21
 
 /* Allow use of reboot() */
 
 #define CAP_SYS_BOOT         22
 
 /* Allow raising priority and setting priority on other (different
    UID) processes */
 /* Allow use of FIFO and round-robin (realtime) scheduling on own
    processes and setting the scheduling algorithm used by another
    process. */
 /* Allow setting cpu affinity on other processes */
 
 #define CAP_SYS_NICE         23
 
 /* Override resource limits. Set resource limits. */
 /* Override quota limits. */
 /* Override reserved space on ext2 filesystem */
 /* Modify data journaling mode on ext3 filesystem (uses journaling
    resources) */
 /* NOTE: ext2 honors fsuid when checking for resource overrides, so
    you can override using fsuid too */
 /* Override size restrictions on IPC message queues */
 /* Allow more than 64hz interrupts from the real-time clock */
 /* Override max number of consoles on console allocation */
 /* Override max number of keymaps */
 
 #define CAP_SYS_RESOURCE     24
 
 /* Allow manipulation of system clock */
 /* Allow irix_stime on mips */
 /* Allow setting the real-time clock */
 
 #define CAP_SYS_TIME         25
 
 /* Allow configuration of tty devices */
 /* Allow vhangup() of tty */
 
 #define CAP_SYS_TTY_CONFIG   26
 
 /* Allow the privileged aspects of mknod() */
 
 #define CAP_MKNOD            27
 
 /* Allow taking of leases on files */
 
 #define CAP_LEASE            28
 
 #define CAP_AUDIT_WRITE      29
 
 #define CAP_AUDIT_CONTROL    30
 
 #define CAP_SETFCAP	     31
 
 /* Override MAC access.
    The base kernel enforces no MAC policy.
    An LSM may enforce a MAC policy, and if it does and it chooses
    to implement capability based overrides of that policy, this is
    the capability it should use to do so. */
 
 #define CAP_MAC_OVERRIDE     32
 
 /* Allow MAC configuration or state changes.
    The base kernel requires no MAC configuration.
    An LSM may enforce a MAC policy, and if it does and it chooses
    to implement capability based checks on modifications to that
    policy or the data required to maintain it, this is the
    capability it should use to do so. */
 
 #define CAP_MAC_ADMIN        33
 
 #define CAP_LAST_CAP         CAP_MAC_ADMIN
 
 #define cap_valid(x) ((x) >= 0 && (x) <= CAP_LAST_CAP)
 
 /*
  * Bit location of each capability (used by user-space library and kernel)
  */
 
 #define CAP_TO_INDEX(x)     ((x) >> 5)        /* 1 << 5 == bits in __u32 */
 #define CAP_TO_MASK(x)      (1 << ((x) & 31)) /* mask for indexed __u32 */
 
 #ifdef __KERNEL__
 
 /*
  * Internal kernel functions only
  */
 
 #define CAP_FOR_EACH_U32(__capi)  \
 	for (__capi = 0; __capi < _KERNEL_CAPABILITY_U32S; ++__capi)
 
 # define CAP_FS_MASK_B0     (CAP_TO_MASK(CAP_CHOWN)		\
 			    | CAP_TO_MASK(CAP_DAC_OVERRIDE)	\
 			    | CAP_TO_MASK(CAP_DAC_READ_SEARCH)	\
 			    | CAP_TO_MASK(CAP_FOWNER)		\
 			    | CAP_TO_MASK(CAP_FSETID))
 
 # define CAP_FS_MASK_B1     (CAP_TO_MASK(CAP_MAC_OVERRIDE))
 
 #if _KERNEL_CAPABILITY_U32S != 2
 # error Fix up hand-coded capability macro initializers
 #else /* HAND-CODED capability initializers */
 
 # define CAP_EMPTY_SET    ((kernel_cap_t){{ 0, 0 }})
 # define CAP_FULL_SET     ((kernel_cap_t){{ ~0, ~0 }})
 # define CAP_INIT_EFF_SET ((kernel_cap_t){{ ~CAP_TO_MASK(CAP_SETPCAP), ~0 }})
 # define CAP_FS_SET       ((kernel_cap_t){{ CAP_FS_MASK_B0, CAP_FS_MASK_B1 } })
-# define CAP_NFSD_SET     ((kernel_cap_t){{ CAP_FS_MASK_B0|CAP_TO_MASK(CAP_SYS_RESOURCE), \
-					CAP_FS_MASK_B1 } })
+# define CAP_NFSD_SET     ((kernel_cap_t){{ CAP_FS_MASK_B0 \
+					    | CAP_TO_MASK(CAP_SYS_RESOURCE) \
+					    | CAP_TO_MASK(CAP_MKNOD), \
+					    CAP_FS_MASK_B1 } })
 
 #endif /* _KERNEL_CAPABILITY_U32S != 2 */
 
 #define CAP_INIT_INH_SET    CAP_EMPTY_SET
 
 # define cap_clear(c)         do { (c) = __cap_empty_set; } while (0)
 # define cap_set_full(c)      do { (c) = __cap_full_set; } while (0)
 # define cap_set_init_eff(c)  do { (c) = __cap_init_eff_set; } while (0)
 
 #define cap_raise(c, flag)  ((c).cap[CAP_TO_INDEX(flag)] |= CAP_TO_MASK(flag))
 #define cap_lower(c, flag)  ((c).cap[CAP_TO_INDEX(flag)] &= ~CAP_TO_MASK(flag))
 #define cap_raised(c, flag) ((c).cap[CAP_TO_INDEX(flag)] & CAP_TO_MASK(flag))
 
 #define CAP_BOP_ALL(c, a, b, OP)                                    \
