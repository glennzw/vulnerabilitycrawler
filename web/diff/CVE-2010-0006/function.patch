commit 2570a4f5428bcdb1077622342181755741e7fa60
Author: David S. Miller <davem@davemloft.net>
Date:   Wed Jan 13 17:27:37 2010 -0800

    ipv6: skb_dst() can be NULL in ipv6_hop_jumbo().
    
    This fixes CERT-FI FICORA #341748
    
    Discovered by Olli Jarva and Tuomo Untinen from the CROSS
    project at Codenomicon Ltd.
    
    Just like in CVE-2007-4567, we can't rely upon skb_dst() being
    non-NULL at this point.  We fixed that in commit
    e76b2b2567b83448c2ee85a896433b96150c92e6 ("[IPV6]: Do no rely on
    skb->dst before it is assigned.")
    
    However commit 483a47d2fe794328d29950fe00ce26dd405d9437 ("ipv6: added
    net argument to IP6_INC_STATS_BH") put a new version of the same bug
    into this function.
    
    Complicating analysis further, this bug can only trigger when network
    namespaces are enabled in the build.  When namespaces are turned off,
    the dev_net() does not evaluate it's argument, so the dereference
    would not occur.
    
    So, for a long time, namespaces couldn't be turned on unless SYSFS was
    disabled.  Therefore, this code has largely been disabled except by
    people turning it on explicitly for namespace development.
    
    With help from Eugene Teo <eugene@redhat.com>
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/net/ipv6/exthdrs.c b/net/ipv6/exthdrs.c
index df159ff..4bac362 100644
--- a/net/ipv6/exthdrs.c
+++ b/net/ipv6/exthdrs.c
@@ -557,8 +557,13 @@ void ipv6_exthdrs_exit(void)
 static inline struct inet6_dev *ipv6_skb_idev(struct sk_buff *skb)
 {
 	return skb_dst(skb) ? ip6_dst_idev(skb_dst(skb)) : __in6_dev_get(skb->dev);
 }
 
+static inline struct net *ipv6_skb_net(struct sk_buff *skb)
+{
+	return skb_dst(skb) ? dev_net(skb_dst(skb)->dev) : dev_net(skb->dev);
+}
+
 /* Router Alert as of RFC 2711 */
 
 static int ipv6_hop_ra(struct sk_buff *skb, int optoff)
@@ -580,39 +585,39 @@ static int ipv6_hop_ra(struct sk_buff *skb, int optoff)
 static int ipv6_hop_jumbo(struct sk_buff *skb, int optoff)
 {
 	const unsigned char *nh = skb_network_header(skb);
+	struct net *net = ipv6_skb_net(skb);
 	u32 pkt_len;
-	struct net *net = dev_net(skb_dst(skb)->dev);
 
 	if (nh[optoff + 1] != 4 || (optoff & 3) != 2) {
 		LIMIT_NETDEBUG(KERN_DEBUG "ipv6_hop_jumbo: wrong jumbo opt length/alignment %d\n",
 			       nh[optoff+1]);
 		IP6_INC_STATS_BH(net, ipv6_skb_idev(skb),
 				 IPSTATS_MIB_INHDRERRORS);
 		goto drop;
 	}
 
 	pkt_len = ntohl(*(__be32 *)(nh + optoff + 2));
 	if (pkt_len <= IPV6_MAXPLEN) {
 		IP6_INC_STATS_BH(net, ipv6_skb_idev(skb),
 				 IPSTATS_MIB_INHDRERRORS);
 		icmpv6_param_prob(skb, ICMPV6_HDR_FIELD, optoff+2);
 		return 0;
 	}
 	if (ipv6_hdr(skb)->payload_len) {
 		IP6_INC_STATS_BH(net, ipv6_skb_idev(skb),
 				 IPSTATS_MIB_INHDRERRORS);
 		icmpv6_param_prob(skb, ICMPV6_HDR_FIELD, optoff);
 		return 0;
 	}
 
 	if (pkt_len > skb->len - sizeof(struct ipv6hdr)) {
 		IP6_INC_STATS_BH(net, ipv6_skb_idev(skb),
 				 IPSTATS_MIB_INTRUNCATEDPKTS);
 		goto drop;
 	}
 
 	if (pskb_trim_rcsum(skb, pkt_len + sizeof(struct ipv6hdr)))
 		goto drop;
 
 	return 1;
 
