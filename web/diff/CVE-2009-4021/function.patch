commit f60311d5f7670d9539b424e4ed8b5c0872fc9e83
Author: Anand V. Avati <avati@gluster.com>
Date:   Thu Oct 22 06:24:52 2009 -0700

    fuse: prevent fuse_put_request on invalid pointer
    
    fuse_direct_io() has a loop where requests are allocated in each
    iteration. if allocation fails, the loop is broken out and follows
    into an unconditional fuse_put_request() on that invalid pointer.
    
    Signed-off-by: Anand V. Avati <avati@gluster.com>
    Signed-off-by: Miklos Szeredi <mszeredi@suse.cz>
    Cc: stable@kernel.org

diff --git a/fs/fuse/file.c b/fs/fuse/file.c
index a3492f7..5887a63 100644
--- a/fs/fuse/file.c
+++ b/fs/fuse/file.c
@@ -1015,57 +1015,58 @@ static int fuse_get_user_pages(struct fuse_req *req, const char __user *buf,
 ssize_t fuse_direct_io(struct file *file, const char __user *buf,
 		       size_t count, loff_t *ppos, int write)
 {
 	struct fuse_file *ff = file->private_data;
 	struct fuse_conn *fc = ff->fc;
 	size_t nmax = write ? fc->max_write : fc->max_read;
 	loff_t pos = *ppos;
 	ssize_t res = 0;
 	struct fuse_req *req;
 
 	req = fuse_get_req(fc);
 	if (IS_ERR(req))
 		return PTR_ERR(req);
 
 	while (count) {
 		size_t nres;
 		fl_owner_t owner = current->files;
 		size_t nbytes = min(count, nmax);
 		int err = fuse_get_user_pages(req, buf, &nbytes, write);
 		if (err) {
 			res = err;
 			break;
 		}
 
 		if (write)
 			nres = fuse_send_write(req, file, pos, nbytes, owner);
 		else
 			nres = fuse_send_read(req, file, pos, nbytes, owner);
 
 		fuse_release_user_pages(req, !write);
 		if (req->out.h.error) {
 			if (!res)
 				res = req->out.h.error;
 			break;
 		} else if (nres > nbytes) {
 			res = -EIO;
 			break;
 		}
 		count -= nres;
 		res += nres;
 		pos += nres;
 		buf += nres;
 		if (nres != nbytes)
 			break;
 		if (count) {
 			fuse_put_request(fc, req);
 			req = fuse_get_req(fc);
 			if (IS_ERR(req))
 				break;
 		}
 	}
-	fuse_put_request(fc, req);
+	if (!IS_ERR(req))
+		fuse_put_request(fc, req);
 	if (res > 0)
 		*ppos = pos;
 
 	return res;
 }
