   Redirect to the desired page after logging in a user
   
   This prevents back button attacks in the form of resubmitting form data
   after the user has logged out of the browser (but not closed it).  See
   also rt3 #15804.
   
   For non-homepage hits, the browser now also gets redirected to
   /NoAuth/Login.html to get a login form.
   
   We use the session to store the next page URL (referenced by a hash),
   similar to how action results work.
    unless ( _UserLoggedIn() ) {
        _ForceLogout();

        # If the user is logging in, let's authenticate
        if ( defined $ARGS->{user} && defined $ARGS->{pass} ) {
            AttemptPasswordAuthentication($ARGS);
        } else {
            # if no credentials then show him login page
            $HTML::Mason::Commands::m->comp( '/Elements/Login', %$ARGS );
            $HTML::Mason::Commands::m->abort;
        }
    }


}

=head2 MaybeShowInstallModePage 

This function, called exclusively by RT's autohandler, dispatches

    return unless $m->base_comp->path =~ RT->Config->Get('WebNoAuthRegex');

    # If it's a noauth file, don't ask for auth.
    SendSessionCookie();
    $m->comp( { base_comp => $m->request_comp }, $m->fetch_next, %$ARGS );

                # we failed to successfully create the user. abort abort abort.
                delete $HTML::Mason::Commands::session{'CurrentUser'};
                $m->comp( '/Elements/Login', %$ARGS, Error => HTML::Mason::Commands::loc( 'Cannot create user: [_1]', $msg ) )
                    if RT->Config->Get('WebFallbackToInternalAuth');;
                $m->abort();
            }
        }

            $user = $orig_user;

            if ( RT->Config->Get('WebExternalOnly') ) {
                $m->comp( '/Elements/Login', %$ARGS, Error => HTML::Mason::Commands::loc('You are not an authorized user') );
                $m->abort();
            }
        }
    } elsif ( RT->Config->Get('WebFallbackToInternalAuth') ) {
        unless ( defined $HTML::Mason::Commands::session{'CurrentUser'} ) {
            # XXX unreachable due to prior defaulting in HandleRequest (check c34d108)
            $m->comp( '/Elements/Login', %$ARGS, Error => HTML::Mason::Commands::loc('You are not an authorized user') );
            $m->abort();
        }
    } else {

}

sub AttemptPasswordAuthentication {
    my $ARGS     = shift;
    my $user_obj = RT::CurrentUser->new();
    $user_obj->Load( $ARGS->{user} );


    unless ( $user_obj->id && $user_obj->IsPassword( $ARGS->{pass} ) ) {
        $RT::Logger->error("FAILED LOGIN for @{[$ARGS->{user}]} from $ENV{'REMOTE_ADDR'}");
        $m->comp( '/Elements/Login', %$ARGS, Error => HTML::Mason::Commands::loc('Your username or password is incorrect'), );
        $m->callback( %$ARGS, CallbackName => 'FailedLogin', CallbackPage => '/autohandler' );
        $m->abort;
    }

    $RT::Logger->info("Successful login for @{[$ARGS->{user}]} from $ENV{'REMOTE_ADDR'}");
    InstantiateNewSession();
    $HTML::Mason::Commands::session{'CurrentUser'} = $user_obj;
    $m->callback( %$ARGS, CallbackName => 'SuccessfulLogin', CallbackPage => '/autohandler' );
}

=head2 LoadSessionFromCookie
    untie $HTML::Mason::Commands::session;
    my $uri        = URI->new($redir_to);
    my $server_uri = URI->new( RT->Config->Get('WebURL') );

    # If the user is coming in via a non-canonical
    # hostname, don't redirect them to the canonical host,
%# 
%# END BPS TAGGED BLOCK }}}
<div class="results">
<&| /Widgets/TitleBox, title => loc('Results') &>
  <ul class="action-results">
% foreach my $action (@actions) {
    <li><%$action%></li>

</%init>
<%ARGS>
@actions => undef
</%ARGS>
%# those contributions and any derivatives thereof.
%# 
%# END BPS TAGGED BLOCK }}}
<%INIT>
if ($m->request_comp->path =~ '^/REST/\d+\.\d+/') {
    $r->content_type("text/plain");
    $m->error_format("text");
    $m->out("RT/$RT::VERSION 401 Credentials required\n");
    $m->out("\n$Error\n") if $Error;
    $m->abort;
}

my $req_uri;

if (UNIVERSAL::can($r, 'uri') and $r->uri =~ m{.*/(.*)}) {
    $req_uri = $1;
}

my $form_action = defined $goto             ? $goto
                : defined $req_uri          ? $req_uri
                :                             RT->Config->Get('WebPath')
                ;

# sanitize $form_action
my $uri = URI->new($form_action);

# You get undef scheme with a relative uri like "/Search/Build.html"
unless (!defined($uri->scheme) || $uri->scheme eq 'http' || $uri->scheme eq 'https') {
    $form_action = RT->Config->Get('WebPath');
}

# Make sure we're logging in to the same domain
# You can get an undef authority with a relative uri like "index.html"
my $uri_base_url = URI->new(RT->Config->Get('WebBaseURL'));
unless (!defined($uri->authority) || $uri->authority eq $uri_base_url->authority) {
    $form_action = RT->Config->Get('WebPath');
}
</%INIT>

% $m->callback( %ARGS, CallbackName => 'Header' );
<& /Elements/Header, Title => loc('Login'), Focus => 'user' &>

</div>

<div id="body" class="login-body">
% if ($Error) {
<&| "/Widgets/TitleBox", title => loc('Error'), hideable => 0, class => 'error'  &>
<% $Error %>
</&>
% }

% $m->callback( %ARGS, CallbackName => 'BeforeForm' );

<&| /Widgets/TitleBox, title => loc('Login'), titleright => $RT::VERSION, hideable => 0 &>

% unless (RT->Config->Get('WebExternalAuth') and !RT->Config->Get('WebFallbackToInternalAuth')) {
<form id="login" name="login" method="post" action="<% $form_action %>">

<div class="input-row">
    <span class="label"><&|/l&>Username</&>:</span>
    <span class="input"><input type="password" name="pass" autocomplete="off" /></span>
</div>

<div class="button-row">
    <span class="input"><input type="submit" class="button" value="<&|/l&>Login</&>" /></span>
</div>
%# Give callbacks a chance to add more control elements
% $m->callback( %ARGS );

% # From mason 1.0.1 forward, this doesn't work. in fact, it breaks things.
% # But on Mason 1.15 it's fixed again, so we still use it.
% # The code below iterates through everything in the passed in arguments
% # Preserving all the old parameters
% # This would be easier, except mason is 'smart' and calls multiple values
% # arrays rather than multiple hash keys
% my $key; my $val;
% foreach $key (keys %ARGS) {
%  if (($key ne 'user') and ($key ne 'pass')) {
% 	if (ref($ARGS{$key}) =~ /ARRAY/) {
% 		foreach $val (@{$ARGS{$key}}) {
<input type="hidden" class="hidden" name="<%$key %>" value="<% $val %>" />
% 		}
% 	}
%	else {
<input type="hidden" class="hidden" name="<% $key %>" value="<% $ARGS{$key} %>" />
% 	}
%  }
% }
</form>
% }
</&>
</div><!-- #login-body -->
<& /Elements/Footer, Menu => 0 &>
<%ARGS>
$user => ""
$pass => undef
$goto => undef
$Error => undef
</%ARGS>
