   disable xslt read/write by default and allow user to overwrite it
xmlsecprivateincdir = $(includedir)/xmlsec1/xmlsec/private

xmlsecprivateinc_HEADERS = \
xkms.h \
$(NULL)

                                                                         xmlSecNodeSetType nodeSetType,
                                                                         xmlNodePtr hereNode);
#ifndef XMLSEC_NO_XSLT
/**
 * xmlSecTransformXsltId:
 *
#define xmlSecTransformXsltId \
        xmlSecTransformXsltGetKlass()
XMLSEC_EXPORT xmlSecTransformId xmlSecTransformXsltGetKlass             (void);
#endif /* XMLSEC_NO_XSLT */

/**
#include <xmlsec/parser.h>
#include <xmlsec/errors.h>

/**************************************************************************
 *
 * Global xmlSecTransformIds list functions
        return(-1);
    }

    return(0);
}

 */
void
xmlSecTransformIdsShutdown(void) {
    xmlSecPtrListFinalize(xmlSecTransformIdsGet());
}

#include <xmlsec/keys.h>
#include <xmlsec/parser.h>
#include <xmlsec/errors.h>

/**************************************************************************
 *
    NULL,                                       /* void* reserved1; */
};

/**
 * xmlSecTransformXsltGetKlass:
 *
static int
xmlSecXsltInitialize(xmlSecTransformPtr transform) {
    xmlSecXsltCtxPtr ctx;

    xmlSecAssert2(xmlSecTransformCheckId(transform, xmlSecTransformXsltId), -1);
    xmlSecAssert2(xmlSecTransformCheckSize(transform, xmlSecXsltSize), -1);

    /* initialize context */
    memset(ctx, 0, sizeof(xmlSecXsltCtx));
    return(0);
}

