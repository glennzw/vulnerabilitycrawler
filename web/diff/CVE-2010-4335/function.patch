commit e431e86aa4301ced4273dc7919b59362cbb353cb
Author: mark_story <mark@mark-story.com>
Date:   Sun Nov 7 20:53:04 2010 -0500

    Fixing issue found by Felix Wilhelm(flxm) where users could send potentially dangerous or corrupted serialized objects to SecurityComponent, potentially allowing manipulation of file map caches.  Test case added.

diff --git a/cake/libs/controller/components/security.php b/cake/libs/controller/components/security.php
index c267c6c..7e5b3b2 100644
--- a/cake/libs/controller/components/security.php
+++ b/cake/libs/controller/components/security.php
@@ -29,718 +29,723 @@ App::import('Core', array('String', 'Security'));
 class SecurityComponent extends Object {
 
 /**
  * The controller method that will be called if this request is black-hole'd
  *
  * @var string
  * @access public
  */
 	var $blackHoleCallback = null;
 
 /**
  * List of controller actions for which a POST request is required
  *
  * @var array
  * @access public
  * @see SecurityComponent::requirePost()
  */
 	var $requirePost = array();
 
 /**
  * List of controller actions for which a GET request is required
  *
  * @var array
  * @access public
  * @see SecurityComponent::requireGet()
  */
 	var $requireGet = array();
 
 /**
  * List of controller actions for which a PUT request is required
  *
  * @var array
  * @access public
  * @see SecurityComponent::requirePut()
  */
 	var $requirePut = array();
 
 /**
  * List of controller actions for which a DELETE request is required
  *
  * @var array
  * @access public
  * @see SecurityComponent::requireDelete()
  */
 	var $requireDelete = array();
 
 /**
  * List of actions that require an SSL-secured connection
  *
  * @var array
  * @access public
  * @see SecurityComponent::requireSecure()
  */
 	var $requireSecure = array();
 
 /**
  * List of actions that require a valid authentication key
  *
  * @var array
  * @access public
  * @see SecurityComponent::requireAuth()
  */
 	var $requireAuth = array();
 
 /**
  * List of actions that require an HTTP-authenticated login (basic or digest)
  *
  * @var array
  * @access public
  * @see SecurityComponent::requireLogin()
  */
 	var $requireLogin = array();
 
 /**
  * Login options for SecurityComponent::requireLogin()
  *
  * @var array
  * @access public
  * @see SecurityComponent::requireLogin()
  */
 	var $loginOptions = array('type' => '', 'prompt' => null);
 
 /**
  * An associative array of usernames/passwords used for HTTP-authenticated logins.
  *
  * @var array
  * @access public
  * @see SecurityComponent::requireLogin()
  */
 	var $loginUsers = array();
 
 /**
  * Controllers from which actions of the current controller are allowed to receive
  * requests.
  *
  * @var array
  * @access public
  * @see SecurityComponent::requireAuth()
  */
 	var $allowedControllers = array();
 
 /**
  * Actions from which actions of the current controller are allowed to receive
  * requests.
  *
  * @var array
  * @access public
  * @see SecurityComponent::requireAuth()
  */
 	var $allowedActions = array();
 
 /**
  * Form fields to disable
  *
  * @var array
  * @access public
  */
 	var $disabledFields = array();
 
 /**
  * Whether to validate POST data.  Set to false to disable for data coming from 3rd party
  * services, etc.
  *
  * @var boolean
  * @access public
  */
 	var $validatePost = true;
 
 /**
  * Other components used by the Security component
  *
  * @var array
  * @access public
  */
 	var $components = array('RequestHandler', 'Session');
 
 /**
  * Holds the current action of the controller
  *
  * @var string
  */
 	var $_action = null;
 
 /**
  * Initialize the SecurityComponent
  *
  * @param object $controller Controller instance for the request
  * @param array $settings Settings to set to the component
  * @return void
  * @access public
  */
 	function initialize(&$controller, $settings = array()) {
 		$this->_set($settings);
 	}
 
 /**
  * Component startup. All security checking happens here.
  *
  * @param object $controller Instantiating controller
  * @return void
  * @access public
  */
 	function startup(&$controller) {
 		$this->_action = strtolower($controller->action);
 		$this->_methodsRequired($controller);
 		$this->_secureRequired($controller);
 		$this->_authRequired($controller);
 		$this->_loginRequired($controller);
 
 		$isPost = ($this->RequestHandler->isPost() || $this->RequestHandler->isPut());
 		$isRequestAction = (
 			!isset($controller->params['requested']) ||
 			$controller->params['requested'] != 1
 		);
 
 		if ($isPost && $isRequestAction && $this->validatePost) {
 			if ($this->_validatePost($controller) === false) {
 				if (!$this->blackHole($controller, 'auth')) {
 					return null;
 				}
 			}
 		}
 		$this->_generateToken($controller);
 	}
 
 /**
  * Sets the actions that require a POST request, or empty for all actions
  *
  * @return void
  * @access public
  * @link http://book.cakephp.org/view/1299/requirePost
  */
 	function requirePost() {
 		$args = func_get_args();
 		$this->_requireMethod('Post', $args);
 	}
 
 /**
  * Sets the actions that require a GET request, or empty for all actions
  *
  * @return void
  * @access public
  */
 	function requireGet() {
 		$args = func_get_args();
 		$this->_requireMethod('Get', $args);
 	}
 
 /**
  * Sets the actions that require a PUT request, or empty for all actions
  *
  * @return void
  * @access public
  */
 	function requirePut() {
 		$args = func_get_args();
 		$this->_requireMethod('Put', $args);
 	}
 
 /**
  * Sets the actions that require a DELETE request, or empty for all actions
  *
  * @return void
  * @access public
  */
 	function requireDelete() {
 		$args = func_get_args();
 		$this->_requireMethod('Delete', $args);
 	}
 
 /**
  * Sets the actions that require a request that is SSL-secured, or empty for all actions
  *
  * @return void
  * @access public
  * @link http://book.cakephp.org/view/1300/requireSecure
  */
 	function requireSecure() {
 		$args = func_get_args();
 		$this->_requireMethod('Secure', $args);
 	}
 
 /**
  * Sets the actions that require an authenticated request, or empty for all actions
  *
  * @return void
  * @access public
  * @link http://book.cakephp.org/view/1301/requireAuth
  */
 	function requireAuth() {
 		$args = func_get_args();
 		$this->_requireMethod('Auth', $args);
 	}
 
 /**
  * Sets the actions that require an HTTP-authenticated request, or empty for all actions
  *
  * @return void
  * @access public
  * @link http://book.cakephp.org/view/1302/requireLogin
  */
 	function requireLogin() {
 		$args = func_get_args();
 		$base = $this->loginOptions;
 
 		foreach ($args as $i => $arg) {
 			if (is_array($arg)) {
 				$this->loginOptions = $arg;
 				unset($args[$i]);
 			}
 		}
 		$this->loginOptions = array_merge($base, $this->loginOptions);
 		$this->_requireMethod('Login', $args);
 
 		if (isset($this->loginOptions['users'])) {
 			$this->loginUsers =& $this->loginOptions['users'];
 		}
 	}
 
 /**
  * Attempts to validate the login credentials for an HTTP-authenticated request
  *
  * @param string $type Either 'basic', 'digest', or null. If null/empty, will try both.
  * @return mixed If successful, returns an array with login name and password, otherwise null.
  * @access public
  * @link http://book.cakephp.org/view/1303/loginCredentials-string-type
  */
 	function loginCredentials($type = null) {
 		switch (strtolower($type)) {
 			case 'basic':
 				$login = array('username' => env('PHP_AUTH_USER'), 'password' => env('PHP_AUTH_PW'));
 				if (!empty($login['username'])) {
 					return $login;
 				}
 			break;
 			case 'digest':
 			default:
 				$digest = null;
 
 				if (version_compare(PHP_VERSION, '5.1') != -1) {
 					$digest = env('PHP_AUTH_DIGEST');
 				} elseif (function_exists('apache_request_headers')) {
 					$headers = apache_request_headers();
 					if (isset($headers['Authorization']) && !empty($headers['Authorization']) && substr($headers['Authorization'], 0, 7) == 'Digest ') {
 						$digest = substr($headers['Authorization'], 7);
 					}
 				} else {
 					// Server doesn't support digest-auth headers
 					trigger_error(__('SecurityComponent::loginCredentials() - Server does not support digest authentication', true), E_USER_WARNING);
 				}
 
 				if (!empty($digest)) {
 					return $this->parseDigestAuthData($digest);
 				}
 			break;
 		}
 		return null;
 	}
 
 /**
  * Generates the text of an HTTP-authentication request header from an array of options.
  *
  * @param array $options Set of options for header
  * @return string HTTP-authentication request header
  * @access public
  * @link http://book.cakephp.org/view/1304/loginRequest-array-options
  */
 	function loginRequest($options = array()) {
 		$options = array_merge($this->loginOptions, $options);
 		$this->_setLoginDefaults($options);
 		$auth = 'WWW-Authenticate: ' . ucfirst($options['type']);
 		$out = array('realm="' . $options['realm'] . '"');
 
 		if (strtolower($options['type']) == 'digest') {
 			$out[] = 'qop="auth"';
 			$out[] = 'nonce="' . uniqid("") . '"';
 			$out[] = 'opaque="' . md5($options['realm']) . '"';
 		}
 
 		return $auth . ' ' . implode(',', $out);
 	}
 
 /**
  * Parses an HTTP digest authentication response, and returns an array of the data, or null on failure.
  *
  * @param string $digest Digest authentication response
  * @return array Digest authentication parameters
  * @access public
  * @link http://book.cakephp.org/view/1305/parseDigestAuthData-string-digest
  */
 	function parseDigestAuthData($digest) {
 		if (substr($digest, 0, 7) == 'Digest ') {
 			$digest = substr($digest, 7);
 		}
 		$keys = array();
 		$match = array();
 		$req = array('nonce' => 1, 'nc' => 1, 'cnonce' => 1, 'qop' => 1, 'username' => 1, 'uri' => 1, 'response' => 1);
 		preg_match_all('/(\w+)=([\'"]?)([a-zA-Z0-9@=.\/_-]+)\2/', $digest, $match, PREG_SET_ORDER);
 
 		foreach ($match as $i) {
 			$keys[$i[1]] = $i[3];
 			unset($req[$i[1]]);
 		}
 
 		if (empty($req)) {
 			return $keys;
 		}
 		return null;
 	}
 
 /**
  * Generates a hash to be compared with an HTTP digest-authenticated response
  *
  * @param array $data HTTP digest response data, as parsed by SecurityComponent::parseDigestAuthData()
  * @return string Digest authentication hash
  * @access public
  * @see SecurityComponent::parseDigestAuthData()
  * @link http://book.cakephp.org/view/1306/generateDigestResponseHash-array-data
  */
 	function generateDigestResponseHash($data) {
 		return md5(
 			md5($data['username'] . ':' . $this->loginOptions['realm'] . ':' . $this->loginUsers[$data['username']]) .
 			':' . $data['nonce'] . ':' . $data['nc'] . ':' . $data['cnonce'] . ':' . $data['qop'] . ':' .
 			md5(env('REQUEST_METHOD') . ':' . $data['uri'])
 		);
 	}
 
 /**
  * Black-hole an invalid request with a 404 error or custom callback. If SecurityComponent::$blackHoleCallback
  * is specified, it will use this callback by executing the method indicated in $error
  *
  * @param object $controller Instantiating controller
  * @param string $error Error method
  * @return mixed If specified, controller blackHoleCallback's response, or no return otherwise
  * @access public
  * @see SecurityComponent::$blackHoleCallback
  * @link http://book.cakephp.org/view/1307/blackHole-object-controller-string-error
  */
 	function blackHole(&$controller, $error = '') {
 		if ($this->blackHoleCallback == null) {
 			$code = 404;
 			if ($error == 'login') {
 				$code = 401;
 				$controller->header($this->loginRequest());
 			}
 			$controller->redirect(null, $code, true);
 		} else {
 			return $this->_callback($controller, $this->blackHoleCallback, array($error));
 		}
 	}
 
 /**
  * Sets the actions that require a $method HTTP request, or empty for all actions
  *
  * @param string $method The HTTP method to assign controller actions to
  * @param array $actions Controller actions to set the required HTTP method to.
  * @return void
  * @access protected
  */
 	function _requireMethod($method, $actions = array()) {
 		if (isset($actions[0]) && is_array($actions[0])) {
 			$actions = $actions[0];
 		}
 		$this->{'require' . $method} = (empty($actions)) ? array('*'): $actions;
 	}
 
 /**
  * Check if HTTP methods are required
  *
  * @param object $controller Instantiating controller
  * @return bool true if $method is required
  * @access protected
  */
 	function _methodsRequired(&$controller) {
 		foreach (array('Post', 'Get', 'Put', 'Delete') as $method) {
 			$property = 'require' . $method;
 			if (is_array($this->$property) && !empty($this->$property)) {
 				$require = array_map('strtolower', $this->$property);
 
 				if (in_array($this->_action, $require) || $this->$property == array('*')) {
 					if (!$this->RequestHandler->{'is' . $method}()) {
 						if (!$this->blackHole($controller, strtolower($method))) {
 							return null;
 						}
 					}
 				}
 			}
 		}
 		return true;
 	}
 
 /**
  * Check if access requires secure connection
  *
  * @param object $controller Instantiating controller
  * @return bool true if secure connection required
  * @access protected
  */
 	function _secureRequired(&$controller) {
 		if (is_array($this->requireSecure) && !empty($this->requireSecure)) {
 			$requireSecure = array_map('strtolower', $this->requireSecure);
 
 			if (in_array($this->_action, $requireSecure) || $this->requireSecure == array('*')) {
 				if (!$this->RequestHandler->isSSL()) {
 					if (!$this->blackHole($controller, 'secure')) {
 						return null;
 					}
 				}
 			}
 		}
 		return true;
 	}
 
 /**
  * Check if authentication is required
  *
  * @param object $controller Instantiating controller
  * @return bool true if authentication required
  * @access protected
  */
 	function _authRequired(&$controller) {
 		if (is_array($this->requireAuth) && !empty($this->requireAuth) && !empty($controller->data)) {
 			$requireAuth = array_map('strtolower', $this->requireAuth);
 
 			if (in_array($this->_action, $requireAuth) || $this->requireAuth == array('*')) {
 				if (!isset($controller->data['_Token'] )) {
 					if (!$this->blackHole($controller, 'auth')) {
 						return null;
 					}
 				}
 
 				if ($this->Session->check('_Token')) {
 					$tData = unserialize($this->Session->read('_Token'));
 
 					if (!empty($tData['allowedControllers']) && !in_array($controller->params['controller'], $tData['allowedControllers']) || !empty($tData['allowedActions']) && !in_array($controller->params['action'], $tData['allowedActions'])) {
 						if (!$this->blackHole($controller, 'auth')) {
 							return null;
 						}
 					}
 				} else {
 					if (!$this->blackHole($controller, 'auth')) {
 						return null;
 					}
 				}
 			}
 		}
 		return true;
 	}
 
 /**
  * Check if login is required
  *
  * @param object $controller Instantiating controller
  * @return bool true if login is required
  * @access protected
  */
 	function _loginRequired(&$controller) {
 		if (is_array($this->requireLogin) && !empty($this->requireLogin)) {
 			$requireLogin = array_map('strtolower', $this->requireLogin);
 
 			if (in_array($this->_action, $requireLogin) || $this->requireLogin == array('*')) {
 				$login = $this->loginCredentials($this->loginOptions['type']);
 
 				if ($login == null) {
 					$controller->header($this->loginRequest());
 
 					if (!empty($this->loginOptions['prompt'])) {
 						$this->_callback($controller, $this->loginOptions['prompt']);
 					} else {
 						$this->blackHole($controller, 'login');
 					}
 				} else {
 					if (isset($this->loginOptions['login'])) {
 						$this->_callback($controller, $this->loginOptions['login'], array($login));
 					} else {
 						if (strtolower($this->loginOptions['type']) == 'digest') {
 							if ($login && isset($this->loginUsers[$login['username']])) {
 								if ($login['response'] == $this->generateDigestResponseHash($login)) {
 									return true;
 								}
 							}
 							$this->blackHole($controller, 'login');
 						} else {
 							if (
 								!(in_array($login['username'], array_keys($this->loginUsers)) &&
 								$this->loginUsers[$login['username']] == $login['password'])
 							) {
 								$this->blackHole($controller, 'login');
 							}
 						}
 					}
 				}
 			}
 		}
 		return true;
 	}
 
 /**
  * Validate submitted form
  *
  * @param object $controller Instantiating controller
  * @return bool true if submitted form is valid
  * @access protected
  */
 	function _validatePost(&$controller) {
 		if (empty($controller->data)) {
 			return true;
 		}
 		$data = $controller->data;
 
 		if (!isset($data['_Token']) || !isset($data['_Token']['fields']) || !isset($data['_Token']['key'])) {
 			return false;
 		}
 		$token = $data['_Token']['key'];
 
 		if ($this->Session->check('_Token')) {
 			$tokenData = unserialize($this->Session->read('_Token'));
 
 			if ($tokenData['expires'] < time() || $tokenData['key'] !== $token) {
 				return false;
 			}
 		}
 
 		$locked = null;
 		$check = $controller->data;
 		$token = urldecode($check['_Token']['fields']);
 
 		if (strpos($token, ':')) {
 			list($token, $locked) = explode(':', $token, 2);
 		}
 		unset($check['_Token']);
 
+		$locked = str_rot13($locked);
+		if (preg_match('/(\A|;|{|})O\:[0-9]+/', $locked)) {
+			return false;
+		}
+
 		$lockedFields = array();
 		$fields = Set::flatten($check);
 		$fieldList = array_keys($fields);
-		$locked = unserialize(str_rot13($locked));
+		$locked = unserialize($locked);
 		$multi = array();
 
 		foreach ($fieldList as $i => $key) {
 			if (preg_match('/\.\d+$/', $key)) {
 				$multi[$i] = preg_replace('/\.\d+$/', '', $key);
 				unset($fieldList[$i]);
 			}
 		}
 		if (!empty($multi)) {
 			$fieldList += array_unique($multi);
 		}
 
 		foreach ($fieldList as $i => $key) {
 			$isDisabled = false;
 			$isLocked = (is_array($locked) && in_array($key, $locked));
 
 			if (!empty($this->disabledFields)) {
 				foreach ((array)$this->disabledFields as $disabled) {
 					$disabled = explode('.', $disabled);
 					$field = array_values(array_intersect(explode('.', $key), $disabled));
 					$isDisabled = ($field === $disabled);
 					if ($isDisabled) {
 						break;
 					}
 				}
 			}
 
 			if ($isDisabled || $isLocked) {
 				unset($fieldList[$i]);
 				if ($isLocked) {
 					$lockedFields[$key] = $fields[$key];
 				}
 			}
 		}
 		sort($fieldList, SORT_STRING);
 		ksort($lockedFields, SORT_STRING);
 
 		$fieldList += $lockedFields;
 		$check = Security::hash(serialize($fieldList) . Configure::read('Security.salt'));
 		return ($token === $check);
 	}
 
 /**
  * Add authentication key for new form posts
  *
  * @param object $controller Instantiating controller
  * @return bool Success
  * @access protected
  */
 	function _generateToken(&$controller) {
 		if (isset($controller->params['requested']) && $controller->params['requested'] === 1) {
 			if ($this->Session->check('_Token')) {
 				$tokenData = unserialize($this->Session->read('_Token'));
 				$controller->params['_Token'] = $tokenData;
 			}
 			return false;
 		}
 		$authKey = Security::generateAuthKey();
 		$expires = strtotime('+' . Security::inactiveMins() . ' minutes');
 		$token = array(
 			'key' => $authKey,
 			'expires' => $expires,
 			'allowedControllers' => $this->allowedControllers,
 			'allowedActions' => $this->allowedActions,
 			'disabledFields' => $this->disabledFields
 		);
 
 		if (!isset($controller->data)) {
 			$controller->data = array();
 		}
 
 		if ($this->Session->check('_Token')) {
 			$tokenData = unserialize($this->Session->read('_Token'));
 			$valid = (
 				isset($tokenData['expires']) &&
 				$tokenData['expires'] > time() &&
 				isset($tokenData['key'])
 			);
 
 			if ($valid) {
 				$token['key'] = $tokenData['key'];
 			}
 		}
 		$controller->params['_Token'] = $token;
 		$this->Session->write('_Token', serialize($token));
 		return true;
 	}
 
 /**
  * Sets the default login options for an HTTP-authenticated request
  *
  * @param array $options Default login options
  * @return void
  * @access protected
  */
 	function _setLoginDefaults(&$options) {
 		$options = array_merge(array(
 			'type' => 'basic',
 			'realm' => env('SERVER_NAME'),
 			'qop' => 'auth',
 			'nonce' => String::uuid()
 		), array_filter($options));
 		$options = array_merge(array('opaque' => md5($options['realm'])), $options);
 	}
 
 /**
  * Calls a controller callback method
  *
  * @param object $controller Controller to run callback on
  * @param string $method Method to execute
  * @param array $params Parameters to send to method
  * @return mixed Controller callback method's response
  * @access protected
  */
 	function _callback(&$controller, $method, $params = array()) {
 		if (is_callable(array($controller, $method))) {
 			return call_user_func_array(array(&$controller, $method), empty($params) ? null : $params);
 		} else {
 			return null;
 		}
 	}
 }
diff --git a/cake/tests/cases/libs/controller/components/security.test.php b/cake/tests/cases/libs/controller/components/security.test.php
index 883f1c8..bbd5141 100644
--- a/cake/tests/cases/libs/controller/components/security.test.php
+++ b/cake/tests/cases/libs/controller/components/security.test.php
@@ -431,633 +431,657 @@ class SecurityComponentTest extends CakeTestCase {
 DIGEST;
 		$this->Controller->Security->requireLogin('posted', array(
 			'type' => 'digest', 'users' => array('Mufasa' => 'password'),
 			'realm' => 'testrealm@host.com'
 		));
 		$this->Controller->Security->startup($this->Controller);
 		$this->assertFalse($this->Controller->failed);
 	}
 
 /**
  * testRequireGetSucceedWrongMethod method
  *
  * @access public
  * @return void
  */
 	function testRequireGetSucceedWrongMethod() {
 		$_SERVER['REQUEST_METHOD'] = 'POST';
 		$this->Controller->action = 'posted';
 		$this->Controller->Security->requireGet('getted');
 		$this->Controller->Security->startup($this->Controller);
 		$this->assertFalse($this->Controller->failed);
 	}
 
 /**
  * testRequirePutFail method
  *
  * @access public
  * @return void
  */
 	function testRequirePutFail() {
 		$_SERVER['REQUEST_METHOD'] = 'POST';
 		$this->Controller->action = 'putted';
 		$this->Controller->Security->requirePut(array('putted'));
 		$this->Controller->Security->startup($this->Controller);
 		$this->assertTrue($this->Controller->failed);
 	}
 
 /**
  * testRequirePutSucceed method
  *
  * @access public
  * @return void
  */
 	function testRequirePutSucceed() {
 		$_SERVER['REQUEST_METHOD'] = 'PUT';
 		$this->Controller->action = 'putted';
 		$this->Controller->Security->requirePut('putted');
 		$this->Controller->Security->startup($this->Controller);
 		$this->assertFalse($this->Controller->failed);
 	}
 
 /**
  * testRequirePutSucceedWrongMethod method
  *
  * @access public
  * @return void
  */
 	function testRequirePutSucceedWrongMethod() {
 		$_SERVER['REQUEST_METHOD'] = 'POST';
 		$this->Controller->action = 'posted';
 		$this->Controller->Security->requirePut('putted');
 		$this->Controller->Security->startup($this->Controller);
 		$this->assertFalse($this->Controller->failed);
 	}
 
 /**
  * testRequireDeleteFail method
  *
  * @access public
  * @return void
  */
 	function testRequireDeleteFail() {
 		$_SERVER['REQUEST_METHOD'] = 'POST';
 		$this->Controller->action = 'deleted';
 		$this->Controller->Security->requireDelete(array('deleted', 'other_method'));
 		$this->Controller->Security->startup($this->Controller);
 		$this->assertTrue($this->Controller->failed);
 	}
 
 /**
  * testRequireDeleteSucceed method
  *
  * @access public
  * @return void
  */
 	function testRequireDeleteSucceed() {
 		$_SERVER['REQUEST_METHOD'] = 'DELETE';
 		$this->Controller->action = 'deleted';
 		$this->Controller->Security->requireDelete('deleted');
 		$this->Controller->Security->startup($this->Controller);
 		$this->assertFalse($this->Controller->failed);
 	}
 
 /**
  * testRequireDeleteSucceedWrongMethod method
  *
  * @access public
  * @return void
  */
 	function testRequireDeleteSucceedWrongMethod() {
 		$_SERVER['REQUEST_METHOD'] = 'POST';
 		$this->Controller->action = 'posted';
 		$this->Controller->Security->requireDelete('deleted');
 		$this->Controller->Security->startup($this->Controller);
 		$this->assertFalse($this->Controller->failed);
 	}
 
 /**
  * testRequireLoginSettings method
  *
  * @access public
  * @return void
  */
 	function testRequireLoginSettings() {
 		$this->Controller->Security->requireLogin(
 			'add', 'edit',
 			array('type' => 'basic', 'users' => array('admin' => 'password'))
 		);
 		$this->assertEqual($this->Controller->Security->requireLogin, array('add', 'edit'));
 		$this->assertEqual($this->Controller->Security->loginUsers, array('admin' => 'password'));
 	}
 
 /**
  * testRequireLoginAllActions method
  *
  * @access public
  * @return void
  */
 	function testRequireLoginAllActions() {
 		$this->Controller->Security->requireLogin(
 			array('type' => 'basic', 'users' => array('admin' => 'password'))
 		);
 		$this->assertEqual($this->Controller->Security->requireLogin, array('*'));
 		$this->assertEqual($this->Controller->Security->loginUsers, array('admin' => 'password'));
 	}
 
 /**
  * Simple hash validation test
  *
  * @access public
  * @return void
  */
 	function testValidatePost() {
 		$this->Controller->Security->startup($this->Controller);
 		$key = $this->Controller->params['_Token']['key'];
 		$fields = 'a5475372b40f6e3ccbf9f8af191f20e1642fd877%3An%3A1%3A%7Bv%3A0%3B';
 		$fields .= 'f%3A11%3A%22Zbqry.inyvq%22%3B%7D';
 
 		$this->Controller->data = array(
 			'Model' => array('username' => 'nate', 'password' => 'foo', 'valid' => '0'),
 			'_Token' => compact('key', 'fields')
 		);
 		$this->assertTrue($this->Controller->Security->validatePost($this->Controller));
 	}
 
 /**
  * test that validatePost fails if any of its required fields are missing.
  *
  * @return void
  */
 	function testValidatePostFormHacking() {
 		$this->Controller->Security->startup($this->Controller);
 		$key = $this->Controller->params['_Token']['key'];
 		$fields = 'a5475372b40f6e3ccbf9f8af191f20e1642fd877%3An%3A1%3A%7Bv%3A0%3B';
 		$fields .= 'f%3A11%3A%22Zbqry.inyvq%22%3B%7D';
 
 		$this->Controller->data = array(
 			'Model' => array('username' => 'nate', 'password' => 'foo', 'valid' => '0'),
 			'_Token' => compact('key')
 		);
 		$result = $this->Controller->Security->validatePost($this->Controller);
 		$this->assertFalse($result, 'validatePost passed when fields were missing. %s');
 
 		$this->Controller->data = array(
 			'Model' => array('username' => 'nate', 'password' => 'foo', 'valid' => '0'),
 			'_Token' => compact('fields')
 		);
 		$result = $this->Controller->Security->validatePost($this->Controller);
 		$this->assertFalse($result, 'validatePost passed when key was missing. %s');
 	}
+
+/**
+ * Test that objects can't be passed into the serialized string. This was a vector for RFI and LFI 
+ * attacks. Thanks to Felix Wilhelm
+ *
+ * @return void
+ */
+	function testValidatePostObjectDeserialize() {
+		$this->Controller->Security->startup($this->Controller);
+		$key = $this->Controller->params['_Token']['key'];
+		$fields = 'a5475372b40f6e3ccbf9f8af191f20e1642fd877';
+
+		// a corrupted serialized object, so we can see if it ever gets to deserialize
+		$attack = 'O:3:"App":1:{s:5:"__map";a:1:{s:3:"foo";s:7:"Hacked!";s:1:"fail"}}';
+		$fields .= urlencode(':' . str_rot13($attack));
+
+		$this->Controller->data = array(
+			'Model' => array('username' => 'mark', 'password' => 'foo', 'valid' => '0'),
+			'_Token' => compact('key', 'fields')
+		);
+		$result = $this->Controller->Security->validatePost($this->Controller);
+		$this->assertFalse($result, 'validatePost passed when key was missing. %s');
+	}
+
 /**
  * Tests validation of checkbox arrays
  *
  * @access public
  * @return void
  */
 	function testValidatePostArray() {
 		$this->Controller->Security->startup($this->Controller);
 		$key = $this->Controller->params['_Token']['key'];
 		$fields = 'f7d573650a295b94e0938d32b323fde775e5f32b%3An%3A0%3A%7B%7D';
 
 		$this->Controller->data = array(
 			'Model' => array('multi_field' => array('1', '3')),
 			'_Token' => compact('key', 'fields')
 		);
 		$this->assertTrue($this->Controller->Security->validatePost($this->Controller));
 	}
 
 /**
  * testValidatePostNoModel method
  *
  * @access public
  * @return void
  */
 	function testValidatePostNoModel() {
 		$this->Controller->Security->startup($this->Controller);
 		$key = $this->Controller->params['_Token']['key'];
 		$fields = '540ac9c60d323c22bafe997b72c0790f39a8bdef%3An%3A0%3A%7B%7D';
 
 		$this->Controller->data = array(
 			'anything' => 'some_data',
 			'_Token' => compact('key', 'fields')
 		);
 
 		$result = $this->Controller->Security->validatePost($this->Controller);
 		$this->assertTrue($result);
 	}
 
 /**
  * testValidatePostSimple method
  *
  * @access public
  * @return void
  */
 	function testValidatePostSimple() {
 		$this->Controller->Security->startup($this->Controller);
 		$key = $this->Controller->params['_Token']['key'];
 		$fields = '69f493434187b867ea14b901fdf58b55d27c935d%3An%3A0%3A%7B%7D';
 
 		$this->Controller->data = $data = array(
 			'Model' => array('username' => '', 'password' => ''),
 			'_Token' => compact('key', 'fields')
 		);
 
 		$result = $this->Controller->Security->validatePost($this->Controller);
 		$this->assertTrue($result);
 	}
 
 /**
  * Tests hash validation for multiple records, including locked fields
  *
  * @access public
  * @return void
  */
 	function testValidatePostComplex() {
 		$this->Controller->Security->startup($this->Controller);
 		$key = $this->Controller->params['_Token']['key'];
 		$fields = 'c9118120e680a7201b543f562e5301006ccfcbe2%3An%3A2%3A%7Bv%3A0%3Bf%3A14%3A%';
 		$fields .= '22Nqqerffrf.0.vq%22%3Bv%3A1%3Bf%3A14%3A%22Nqqerffrf.1.vq%22%3B%7D';
 
 		$this->Controller->data = array(
 			'Addresses' => array(
 				'0' => array(
 					'id' => '123456', 'title' => '', 'first_name' => '', 'last_name' => '',
 					'address' => '', 'city' => '', 'phone' => '', 'primary' => ''
 				),
 				'1' => array(
 					'id' => '654321', 'title' => '', 'first_name' => '', 'last_name' => '',
 					'address' => '', 'city' => '', 'phone' => '', 'primary' => ''
 				)
 			),
 			'_Token' => compact('key', 'fields')
 		);
 		$result = $this->Controller->Security->validatePost($this->Controller);
 		$this->assertTrue($result);
 	}
 
 /**
  * test ValidatePost with multiple select elements.
  *
  * @return void
  */
 	function testValidatePostMultipleSelect() {
 		$this->Controller->Security->startup($this->Controller);
 		$key = $this->Controller->params['_Token']['key'];
 		$fields = '422cde416475abc171568be690a98cad20e66079%3An%3A0%3A%7B%7D';
 
 		$this->Controller->data = array(
 			'Tag' => array('Tag' => array(1, 2)),
 			'_Token' => compact('key', 'fields'),
 		);
 		$result = $this->Controller->Security->validatePost($this->Controller);
 		$this->assertTrue($result);
 
 		$this->Controller->data = array(
 			'Tag' => array('Tag' => array(1, 2, 3)),
 			'_Token' => compact('key', 'fields'),
 		);
 		$result = $this->Controller->Security->validatePost($this->Controller);
 		$this->assertTrue($result);
 
 		$this->Controller->data = array(
 			'Tag' => array('Tag' => array(1, 2, 3, 4)),
 			'_Token' => compact('key', 'fields'),
 		);
 		$result = $this->Controller->Security->validatePost($this->Controller);
 		$this->assertTrue($result);
 
 		$fields = '19464422eafe977ee729c59222af07f983010c5f%3An%3A0%3A%7B%7D';
 		$this->Controller->data = array(
 			'User.password' => 'bar', 'User.name' => 'foo', 'User.is_valid' => '1',
 			'Tag' => array('Tag' => array(1)), '_Token' => compact('key', 'fields'),
 		);
 		$result = $this->Controller->Security->validatePost($this->Controller);
 		$this->assertTrue($result);
 	}
 
 /**
  * testValidatePostCheckbox method
  *
  * First block tests un-checked checkbox
  * Second block tests checked checkbox
  *
  * @access public
  * @return void
  */
 	function testValidatePostCheckbox() {
 		$this->Controller->Security->startup($this->Controller);
 		$key = $this->Controller->params['_Token']['key'];
 		$fields = 'a5475372b40f6e3ccbf9f8af191f20e1642fd877%3An%3A1%3A%7Bv%3A0%';
 		$fields .= '3Bf%3A11%3A%22Zbqry.inyvq%22%3B%7D';
 
 		$this->Controller->data = array(
 			'Model' => array('username' => '', 'password' => '', 'valid' => '0'),
 			'_Token' => compact('key', 'fields')
 		);
 
 		$result = $this->Controller->Security->validatePost($this->Controller);
 		$this->assertTrue($result);
 
 		$fields = '874439ca69f89b4c4a5f50fb9c36ff56a28f5d42%3An%3A0%3A%7B%7D';
 
 		$this->Controller->data = array(
 			'Model' => array('username' => '', 'password' => '', 'valid' => '0'),
 			'_Token' => compact('key', 'fields')
 		);
 
 		$result = $this->Controller->Security->validatePost($this->Controller);
 		$this->assertTrue($result);
 
 
 		$this->Controller->data = array();
 		$this->Controller->Security->startup($this->Controller);
 		$key = $this->Controller->params['_Token']['key'];
 
 		$this->Controller->data = $data = array(
 			'Model' => array('username' => '', 'password' => '', 'valid' => '0'),
 			'_Token' => compact('key', 'fields')
 		);
 
 		$result = $this->Controller->Security->validatePost($this->Controller);
 		$this->assertTrue($result);
 	}
 
 /**
  * testValidatePostHidden method
  *
  * @access public
  * @return void
  */
 	function testValidatePostHidden() {
 		$this->Controller->Security->startup($this->Controller);
 		$key = $this->Controller->params['_Token']['key'];
 		$fields = '51ccd8cb0997c7b3d4523ecde5a109318405ef8c%3An%3A2%3A%7Bv%3A0%3Bf%3A12%3A';
 		$fields .= '%22Zbqry.uvqqra%22%3Bv%3A1%3Bf%3A18%3A%22Zbqry.bgure_uvqqra%22%3B%7D';
 
 		$this->Controller->data = array(
 			'Model' => array(
 				'username' => '', 'password' => '', 'hidden' => '0',
 				'other_hidden' => 'some hidden value'
 			),
 			'_Token' => compact('key', 'fields')
 		);
 		$result = $this->Controller->Security->validatePost($this->Controller);
 		$this->assertTrue($result);
 	}
 
 /**
  * testValidatePostWithDisabledFields method
  *
  * @access public
  * @return void
  */
 	function testValidatePostWithDisabledFields() {
 		$this->Controller->Security->disabledFields = array('Model.username', 'Model.password');
 		$this->Controller->Security->startup($this->Controller);
 		$key = $this->Controller->params['_Token']['key'];
 		$fields = 'ef1082968c449397bcd849f963636864383278b1%3An%3A1%3A%7Bv%';
 		$fields .= '3A0%3Bf%3A12%3A%22Zbqry.uvqqra%22%3B%7D';
 
 		$this->Controller->data = array(
 			'Model' => array(
 				'username' => '', 'password' => '', 'hidden' => '0'
 			),
 			'_Token' => compact('fields', 'key')
 		);
 
 		$result = $this->Controller->Security->validatePost($this->Controller);
 		$this->assertTrue($result);
 	}
 
 /**
  * testValidateHiddenMultipleModel method
  *
  * @access public
  * @return void
  */
 	function testValidateHiddenMultipleModel() {
 		$this->Controller->Security->startup($this->Controller);
 		$key = $this->Controller->params['_Token']['key'];
 		$fields = 'a2d01072dc4660eea9d15007025f35a7a5b58e18%3An%3A3%3A%7Bv%3A0%3Bf%3A11';
 		$fields .= '%3A%22Zbqry.inyvq%22%3Bv%3A1%3Bf%3A12%3A%22Zbqry2.inyvq%22%3Bv%3A2%';
 		$fields .= '3Bf%3A12%3A%22Zbqry3.inyvq%22%3B%7D';
 
 		$this->Controller->data = array(
 			'Model' => array('username' => '', 'password' => '', 'valid' => '0'),
 			'Model2' => array('valid' => '0'),
 			'Model3' => array('valid' => '0'),
 			'_Token' => compact('key', 'fields')
 		);
 		$result = $this->Controller->Security->validatePost($this->Controller);
 		$this->assertTrue($result);
 	}
 
 /**
  * testLoginValidation method
  *
  * @access public
  * @return void
  */
 	function testLoginValidation() {
 
 	}
 
 /**
  * testValidateHasManyModel method
  *
  * @access public
  * @return void
  */
 	function testValidateHasManyModel() {
 		$this->Controller->Security->startup($this->Controller);
 		$key = $this->Controller->params['_Token']['key'];
 		$fields = '51e3b55a6edd82020b3f29c9ae200e14bbeb7ee5%3An%3A4%3A%7Bv%3A0%3Bf%3A14%3A%2';
 		$fields .= '2Zbqry.0.uvqqra%22%3Bv%3A1%3Bf%3A13%3A%22Zbqry.0.inyvq%22%3Bv%3A2%3Bf%3';
 		$fields .= 'A14%3A%22Zbqry.1.uvqqra%22%3Bv%3A3%3Bf%3A13%3A%22Zbqry.1.inyvq%22%3B%7D';
 
 		$this->Controller->data = array(
 			'Model' => array(
 				array(
 					'username' => 'username', 'password' => 'password',
 					'hidden' => 'value', 'valid' => '0'
 				),
 				array(
 					'username' => 'username', 'password' => 'password',
 					'hidden' => 'value', 'valid' => '0'
 				)
 			),
 			'_Token' => compact('key', 'fields')
 		);
 
 		$result = $this->Controller->Security->validatePost($this->Controller);
 		$this->assertTrue($result);
 	}
 
 /**
  * testValidateHasManyRecordsPass method
  *
  * @access public
  * @return void
  */
 	function testValidateHasManyRecordsPass() {
 		$this->Controller->Security->startup($this->Controller);
 		$key = $this->Controller->params['_Token']['key'];
 		$fields = '7a203edb3d345bbf38fe0dccae960da8842e11d7%3An%3A4%3A%7Bv%3A0%3Bf%3A12%3A%2';
 		$fields .= '2Nqqerff.0.vq%22%3Bv%3A1%3Bf%3A17%3A%22Nqqerff.0.cevznel%22%3Bv%3A2%3Bf%';
 		$fields .= '3A12%3A%22Nqqerff.1.vq%22%3Bv%3A3%3Bf%3A17%3A%22Nqqerff.1.cevznel%22%3B%7D';
 
 		$this->Controller->data = array(
 			'Address' => array(
 				0 => array(
 					'id' => '123',
 					'title' => 'home',
 					'first_name' => 'Bilbo',
 					'last_name' => 'Baggins',
 					'address' => '23 Bag end way',
 					'city' => 'the shire',
 					'phone' => 'N/A',
 					'primary' => '1',
 				),
 				1 => array(
 					'id' => '124',
 					'title' => 'home',
 					'first_name' => 'Frodo',
 					'last_name' => 'Baggins',
 					'address' => '50 Bag end way',
 					'city' => 'the shire',
 					'phone' => 'N/A',
 					'primary' => '1'
 				)
 			),
 			'_Token' => compact('key', 'fields')
 		);
 
 		$result = $this->Controller->Security->validatePost($this->Controller);
 		$this->assertTrue($result);
 	}
 
 /**
  * testValidateHasManyRecords method
  *
  * validatePost should fail, hidden fields have been changed.
  *
  * @access public
  * @return void
  */
 	function testValidateHasManyRecordsFail() {
 		$this->Controller->Security->startup($this->Controller);
 		$key = $this->Controller->params['_Token']['key'];
 		$fields = '7a203edb3d345bbf38fe0dccae960da8842e11d7%3An%3A4%3A%7Bv%3A0%3Bf%3A12%3A%2';
 		$fields .= '2Nqqerff.0.vq%22%3Bv%3A1%3Bf%3A17%3A%22Nqqerff.0.cevznel%22%3Bv%3A2%3Bf%';
 		$fields .= '3A12%3A%22Nqqerff.1.vq%22%3Bv%3A3%3Bf%3A17%3A%22Nqqerff.1.cevznel%22%3B%7D';
 
 		$this->Controller->data = array(
 			'Address' => array(
 				0 => array(
 					'id' => '123',
 					'title' => 'home',
 					'first_name' => 'Bilbo',
 					'last_name' => 'Baggins',
 					'address' => '23 Bag end way',
 					'city' => 'the shire',
 					'phone' => 'N/A',
 					'primary' => '5',
 				),
 				1 => array(
 					'id' => '124',
 					'title' => 'home',
 					'first_name' => 'Frodo',
 					'last_name' => 'Baggins',
 					'address' => '50 Bag end way',
 					'city' => 'the shire',
 					'phone' => 'N/A',
 					'primary' => '1'
 				)
 			),
 			'_Token' => compact('key', 'fields')
 		);
 
 		$result = $this->Controller->Security->validatePost($this->Controller);
 		$this->assertFalse($result);
 	}
 
 /**
  * testLoginRequest method
  *
  * @access public
  * @return void
  */
 	function testLoginRequest() {
 		$this->Controller->Security->startup($this->Controller);
 		$realm = 'cakephp.org';
 		$options = array('realm' => $realm, 'type' => 'basic');
 		$result = $this->Controller->Security->loginRequest($options);
 		$expected = 'WWW-Authenticate: Basic realm="'.$realm.'"';
 		$this->assertEqual($result, $expected);
 
 		$this->Controller->Security->startup($this->Controller);
 		$options = array('realm' => $realm, 'type' => 'digest');
 		$result = $this->Controller->Security->loginRequest($options);
 		$this->assertPattern('/realm="'.$realm.'"/', $result);
 		$this->assertPattern('/qop="auth"/', $result);
 	}
 
 /**
  * testGenerateDigestResponseHash method
  *
  * @access public
  * @return void
  */
 	function testGenerateDigestResponseHash() {
 		$this->Controller->Security->startup($this->Controller);
 		$realm = 'cakephp.org';
 		$loginData = array('realm' => $realm, 'users' => array('Willy Smith' => 'password'));
 		$this->Controller->Security->requireLogin($loginData);
 
 		$data = array(
 			'username' => 'Willy Smith',
 			'password' => 'password',
 			'nonce' => String::uuid(),
 			'nc' => 1,
 			'cnonce' => 1,
 			'realm' => $realm,
 			'uri' => 'path_to_identifier',
 			'qop' => 'testme'
 		);
 		$_SERVER['REQUEST_METHOD'] = 'POST';
 
 		$result = $this->Controller->Security->generateDigestResponseHash($data);
 		$expected = md5(
 			md5($data['username'] . ':' . $loginData['realm'] . ':' . $data['password']) . ':' .
 			$data['nonce'] . ':' . $data['nc'] . ':' . $data['cnonce'] . ':' . $data['qop'] . ':' .
 			md5(env('REQUEST_METHOD') . ':' . $data['uri'])
 		);
 		$this->assertIdentical($result, $expected);
 	}
 
 /**
  * testLoginCredentials method
  *
  * @access public
  * @return void
  */
 	function testLoginCredentials() {
 		$this->Controller->Security->startup($this->Controller);
 		$_SERVER['PHP_AUTH_USER'] = $user = 'Willy Test';
 		$_SERVER['PHP_AUTH_PW'] = $pw = 'some password for the nice test';
 
 		$result = $this->Controller->Security->loginCredentials('basic');
 		$expected = array('username' => $user, 'password' => $pw);
 		$this->assertIdentical($result, $expected);
 
 		if (version_compare(PHP_VERSION, '5.1') != -1) {
 			$_SERVER['PHP_AUTH_DIGEST'] = $digest = <<<DIGEST
 				Digest username="Mufasa",
 				realm="testrealm@host.com",
 				nonce="dcd98b7102dd2f0e8b11d0f600bfb0c093",
 				uri="/dir/index.html",
 				qop=auth,
 				nc=00000001,
 				cnonce="0a4f113b",
 				response="6629fae49393a05397450978507c4ef1",
 				opaque="5ccc069c403ebaf9f0171e9517f40e41"
