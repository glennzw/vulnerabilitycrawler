   Work around x errors by asking dialog to die on cancel
   
   Basically, what is happening is that gnome-screensaver-dialog exits after the
   5th failed attempt at unlocking the screen, but before the shake animation
   finishes. If the timing is slightly unlucky, this results in gnome-screensaver
   accessing X resources that have already been destroyed (I ran it through
   xtrace, and that showed this happening)
   
   My patch fixes this by making gnome-screensaver-dialog request to
   gnome-screensaver that it be terminated after the 5th failed attempt (rather
   than exitting straight away, although there is a fallback timeout too).
   gnome-screensaver then terminates the dialog after it is finished with the
   shake animation, to avoid the race condition that is currently making it crash.
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

#include <glib/gi18n.h>
#include <gdk/gdkx.h>
}

static gboolean
auth_check_idle (GSLockPlug *plug)
{
        gboolean     res;
                } else {
                        gs_debug ("Authentication failed, quitting (max failures)");
                        again = FALSE;
                        gtk_main_quit ();
                }
        }

        gint       lock_pid;
        gint       lock_watch_id;
        gint       dialog_response;

        gint       keyboard_pid;
        gint       keyboard_watch_id;
        remove_key_events (window);
}

/* very rudimentary animation for indicating an auth failure */
static void
shake_dialog (GSWindow *window)
        guint left;
        guint right;

        for (i = 0; i < 9; i++) {
                if (i % 2 == 0) {
                        left = 30;

                g_usleep (10000);
        }
}

static gboolean
                                        window->priv->dialog_response = DIALOG_RESPONSE_CANCEL;
                                }
                                finished = TRUE;
                        }
                        break;
                case G_IO_STATUS_EOF:

        set_invisible_cursor (GTK_WIDGET (window)->window, FALSE);

        result = spawn_on_window (window,
                                  command->str,
                                  &window->priv->lock_pid,
