commit 78f1ddbb498283c2445c11b0dfa666424c301803
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Mon Jul 27 23:09:47 2009 -0400

    ext4: Avoid null pointer dereference when decoding EROFS w/o a journal
    
    We need to check to make sure a journal is present before checking the
    journal flags in ext4_decode_error().
    
    Signed-off-by: Eric Sesterhenn <eric.sesterhenn@lsexperts.de>
    Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>

diff --git a/fs/ext4/super.c b/fs/ext4/super.c
index 8f4f079..fe3f376 100644
--- a/fs/ext4/super.c
+++ b/fs/ext4/super.c
@@ -334,36 +334,37 @@ void ext4_error(struct super_block *sb, const char *function,
 static const char *ext4_decode_error(struct super_block *sb, int errno,
 				     char nbuf[16])
 {
 	char *errstr = NULL;
 
 	switch (errno) {
 	case -EIO:
 		errstr = "IO failure";
 		break;
 	case -ENOMEM:
 		errstr = "Out of memory";
 		break;
 	case -EROFS:
-		if (!sb || EXT4_SB(sb)->s_journal->j_flags & JBD2_ABORT)
+		if (!sb || (EXT4_SB(sb)->s_journal &&
+			    EXT4_SB(sb)->s_journal->j_flags & JBD2_ABORT))
 			errstr = "Journal has aborted";
 		else
 			errstr = "Readonly filesystem";
 		break;
 	default:
 		/* If the caller passed in an extra buffer for unknown
 		 * errors, textualise them now.  Else we just return
 		 * NULL. */
 		if (nbuf) {
 			/* Check for truncated error codes... */
 			if (snprintf(nbuf, 16, "error %d", -errno) >= 0)
 				errstr = nbuf;
 		}
 		break;
 	}
 
 	return errstr;
 }
 
 /* __ext4_std_error decodes expected errors from journaling functions
  * automatically and invokes the appropriate error response.  */
 
