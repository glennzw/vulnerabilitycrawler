commit 04bb801a31825d1559c4670253e1bea1291a1af8
Author: Amir Vadai <amirv@mellanox.co.il>
Date:   Tue Dec 21 13:38:37 2010 +0200

    sdp: move histogram allocation from stack to heap
    
    - Cause a kernel crash when accessing /proc/net/sdpstats on RH6
    
    Signed-off-by: Amir Vadai <amirv@mellanox.co.il>

diff --git a/drivers/infiniband/ulp/sdp/sdp_proc.c b/drivers/infiniband/ulp/sdp/sdp_proc.c
index 33f66b6..d88d0d0 100644
--- a/drivers/infiniband/ulp/sdp/sdp_proc.c
+++ b/drivers/infiniband/ulp/sdp/sdp_proc.c
@@ -1,44 +1,45 @@
 /*
  * Copyright (c) 2008 Mellanox Technologies Ltd.  All rights reserved.
  *
  * This software is available to you under a choice of one of two
  * licenses.  You may choose to be licensed under the terms of the GNU
  * General Public License (GPL) Version 2, available from the file
  * COPYING in the main directory of this source tree, or the
  * OpenIB.org BSD license below:
  *
  *     Redistribution and use in source and binary forms, with or
  *     without modification, are permitted provided that the following
  *     conditions are met:
  *
  *      - Redistributions of source code must retain the above
  *        copyright notice, this list of conditions and the following
  *        disclaimer.
  *
  *      - Redistributions in binary form must reproduce the above
  *        copyright notice, this list of conditions and the following
  *        disclaimer in the documentation and/or other materials
  *        provided with the distribution.
  *
  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  * SOFTWARE.
  */
 
 #include <linux/proc_fs.h>
 #include <linux/debugfs.h>
 #include <rdma/sdp_socket.h>
+#include <linux/vmalloc.h>
 #include "sdp.h"
 
 #ifdef CONFIG_PROC_FS
 
 #define DEBUGFS_SDP_BASE "sdp"
 #define PROC_SDP_STATS "sdpstats"
 #define PROC_SDP_PERF "sdpprf"
 
 #if defined(SDP_SOCK_HISTORY) || defined(SDP_PROFILING)
@@ -231,159 +232,164 @@ DEFINE_PER_CPU(struct sdpstats, sdpstats);
 static void sdpstats_seq_hist(struct seq_file *seq, char *str, u32 *h, int n,
 		int is_log)
 {
 	int i;
 	u32 max = 0;
 	int first = -1, last = n - 1;
 
 	seq_printf(seq, "%s:\n", str);
 
 	for (i = 0; i < n; i++) {
 		if (h[i] > max)
 			max = h[i];
 
 		if (first == -1 && h[i])
 			first = i;
 
 		if (h[i])
 			last = i;
 	}
 
 	if (max == 0) {
 		seq_printf(seq, " - all values are 0\n");
 		return;
 	}
 
 	for (i = first; i <= last; i++) {
 		char s[51];
 		int j = 50 * h[i] / max;
 		int val = is_log ? (i == n-1 ? 0 : 1<<i) : i;
 		memset(s, '*', j);
 		s[j] = '\0';
 
 		seq_printf(seq, "%10d | %-50s - %u\n", val, s, h[i]);
 	}
 }
 
 #define SDPSTATS_COUNTER_GET(var) ({ \
 	u32 __val = 0;						\
 	unsigned int __i;                                       \
 	for_each_possible_cpu(__i)                              \
 		__val += per_cpu(sdpstats, __i).var;		\
 	__val;							\
 })
 
 #define SDPSTATS_HIST_GET(hist, hist_len, sum) ({ \
 	unsigned int __i;                                       \
 	for_each_possible_cpu(__i) {                            \
 		unsigned int __j;				\
 		u32 *h = per_cpu(sdpstats, __i).hist;		\
 		for (__j = 0; __j < hist_len; __j++) { 		\
 			sum[__j] += h[__j];			\
 		} \
 	} 							\
 })
 
 #define __sdpstats_seq_hist(seq, msg, hist, is_log) ({		\
-	u32 tmp_hist[SDPSTATS_MAX_HIST_SIZE];			\
 	int hist_len = ARRAY_SIZE(__get_cpu_var(sdpstats).hist);\
-	memset(tmp_hist, 0, sizeof(tmp_hist));			\
-	SDPSTATS_HIST_GET(hist, hist_len, tmp_hist);	\
-	sdpstats_seq_hist(seq, msg, tmp_hist, hist_len, is_log);\
+	memset(h, 0, sizeof(*h) * h_len);			\
+	SDPSTATS_HIST_GET(hist, hist_len, h);	\
+	sdpstats_seq_hist(seq, msg, h, hist_len, is_log);\
 })
 
 #define __sdpstats_seq_hist_pcpu(seq, msg, hist) ({		\
-	u32 h[NR_CPUS];						\
 	unsigned int __i;                                       \
-	memset(h, 0, sizeof(h));				\
+	memset(h, 0, sizeof(*h) * h_len);				\
 	for_each_possible_cpu(__i) {                            \
 		h[__i] = per_cpu(sdpstats, __i).hist;		\
 	} 							\
 	sdpstats_seq_hist(seq, msg, h, NR_CPUS, 0);		\
 })
 
 static int sdpstats_seq_show(struct seq_file *seq, void *v)
 {
 	int i;
+	size_t h_len = max(NR_CPUS, SDPSTATS_MAX_HIST_SIZE);
+	u32 *h;
+
+	if (!(h = vmalloc(h_len * sizeof(*h))))
+		return -ENOMEM;
 
 	seq_printf(seq, "SDP statistics:\n");
 
 	__sdpstats_seq_hist(seq, "sendmsg_seglen", sendmsg_seglen, 1);
 	__sdpstats_seq_hist(seq, "send_size", send_size, 1);
 	__sdpstats_seq_hist(seq, "credits_before_update",
 		credits_before_update, 0);
 
 	seq_printf(seq, "sdp_sendmsg() calls\t\t: %d\n",
 		SDPSTATS_COUNTER_GET(sendmsg));
 	seq_printf(seq, "bcopy segments     \t\t: %d\n",
 		SDPSTATS_COUNTER_GET(sendmsg_bcopy_segment));
 	seq_printf(seq, "inline sends       \t\t: %d\n",
 		SDPSTATS_COUNTER_GET(inline_sends));
 	seq_printf(seq, "bzcopy segments    \t\t: %d\n",
 		SDPSTATS_COUNTER_GET(sendmsg_bzcopy_segment));
 	seq_printf(seq, "zcopy segments    \t\t: %d\n",
 		SDPSTATS_COUNTER_GET(sendmsg_zcopy_segment));
 	seq_printf(seq, "post_send_credits  \t\t: %d\n",
 		SDPSTATS_COUNTER_GET(post_send_credits));
 	seq_printf(seq, "memcpy_count       \t\t: %u\n",
 		SDPSTATS_COUNTER_GET(memcpy_count));
 
         for (i = 0; i < ARRAY_SIZE(__get_cpu_var(sdpstats).post_send); i++) {
                 if (mid2str(i)) {
                         seq_printf(seq, "post_send %-20s\t: %d\n",
                                         mid2str(i),
 					SDPSTATS_COUNTER_GET(post_send[i]));
                 }
         }
 
 	seq_printf(seq, "\n");
 	seq_printf(seq, "sdp_recvmsg() calls\t\t: %d\n",
 		SDPSTATS_COUNTER_GET(recvmsg));
 	seq_printf(seq, "post_recv         \t\t: %d\n",
 		SDPSTATS_COUNTER_GET(post_recv));
 	seq_printf(seq, "BZCopy poll miss  \t\t: %d\n",
 		SDPSTATS_COUNTER_GET(bzcopy_poll_miss));
 	seq_printf(seq, "send_wait_for_mem \t\t: %d\n",
 		SDPSTATS_COUNTER_GET(send_wait_for_mem));
 	seq_printf(seq, "send_miss_no_credits\t\t: %d\n",
 		SDPSTATS_COUNTER_GET(send_miss_no_credits));
 
 	seq_printf(seq, "rx_poll_miss      \t\t: %d\n", SDPSTATS_COUNTER_GET(rx_poll_miss));
 	seq_printf(seq, "rx_poll_hit       \t\t: %d\n", SDPSTATS_COUNTER_GET(rx_poll_hit));
 	__sdpstats_seq_hist(seq, "poll_hit_usec", poll_hit_usec, 1);
 	seq_printf(seq, "rx_cq_arm_timer      \t\t: %d\n", SDPSTATS_COUNTER_GET(rx_cq_arm_timer));
 
 	seq_printf(seq, "tx_poll_miss      \t\t: %d\n", SDPSTATS_COUNTER_GET(tx_poll_miss));
 	seq_printf(seq, "tx_poll_busy      \t\t: %d\n", SDPSTATS_COUNTER_GET(tx_poll_busy));
 	seq_printf(seq, "tx_poll_hit       \t\t: %d\n", SDPSTATS_COUNTER_GET(tx_poll_hit));
 	seq_printf(seq, "tx_poll_no_op     \t\t: %d\n", SDPSTATS_COUNTER_GET(tx_poll_no_op));
 
 	seq_printf(seq, "keepalive timer   \t\t: %d\n", SDPSTATS_COUNTER_GET(keepalive_timer));
 	seq_printf(seq, "nagle timer       \t\t: %d\n", SDPSTATS_COUNTER_GET(nagle_timer));
 
 	seq_printf(seq, "CQ stats:\n");
 	seq_printf(seq, "- RX irq armed  \t\t: %d\n", SDPSTATS_COUNTER_GET(rx_int_arm));
 	seq_printf(seq, "- RX interrupts \t\t: %d\n", SDPSTATS_COUNTER_GET(rx_int_count));
 	seq_printf(seq, "- RX int wake up\t\t: %d\n", SDPSTATS_COUNTER_GET(rx_int_wake_up));
 	seq_printf(seq, "- RX int queue  \t\t: %d\n", SDPSTATS_COUNTER_GET(rx_int_queue));
 	seq_printf(seq, "- RX int no op  \t\t: %d\n", SDPSTATS_COUNTER_GET(rx_int_no_op));
 	seq_printf(seq, "- RX cq modified\t\t: %d\n", SDPSTATS_COUNTER_GET(rx_cq_modified));
 
 	seq_printf(seq, "- TX irq armed\t\t: %d\n", SDPSTATS_COUNTER_GET(tx_int_arm));
 	seq_printf(seq, "- TX interrupts\t\t: %d\n", SDPSTATS_COUNTER_GET(tx_int_count));
 
 	seq_printf(seq, "ZCopy stats:\n");
 	seq_printf(seq, "- TX timeout\t\t: %d\n", SDPSTATS_COUNTER_GET(zcopy_tx_timeout));
 	seq_printf(seq, "- TX cross send\t\t: %d\n", SDPSTATS_COUNTER_GET(zcopy_cross_send));
 	seq_printf(seq, "- TX aborted by peer\t: %d\n", SDPSTATS_COUNTER_GET(zcopy_tx_aborted));
 	seq_printf(seq, "- TX error\t\t: %d\n", SDPSTATS_COUNTER_GET(zcopy_tx_error));
 	seq_printf(seq, "- FMR alloc error\t: %d\n", SDPSTATS_COUNTER_GET(fmr_alloc_error));
 
 	__sdpstats_seq_hist_pcpu(seq, "CPU sendmsg", sendmsg);
 	__sdpstats_seq_hist_pcpu(seq, "CPU recvmsg", recvmsg);
 	__sdpstats_seq_hist_pcpu(seq, "CPU rx_irq", rx_int_count);
 	__sdpstats_seq_hist_pcpu(seq, "CPU rx_wq", rx_wq);
 	__sdpstats_seq_hist_pcpu(seq, "CPU tx_irq", tx_int_count);
 
+	vfree(h);
+
 	return 0;
 }
 
