commit c265cad1c95b84abfd4e8d861f25926ef13b5d91
Author: Gu1ll4um3r0m41n <aeroxteam@gmail.com>
Date:   Wed Mar 2 15:20:36 2011 +0100

    Fix verification of SSL certificates by calling gnutls verify callback (patch #7459)

diff --git a/ChangeLog b/ChangeLog
index 51f7306..c020549 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,38 +1,40 @@
 WeeChat ChangeLog
 =================
 SÃ©bastien Helleu <flashcode@flashtux.org>
-v0.3.5-dev, 2011-03-01
+v0.3.5-dev, 2011-03-02
 
 
 Version 0.3.5 (under dev!)
 --------------------------
 
+* core: fix verification of SSL certificates by calling gnutls verify callback
+  (patch #7459)
 * core: remember scroll position for all buffers in windows (bug #25555)
 * core: fix crash when using column filling in bars with some empty items
   (bug #32565)
 * core: allow relative size for command /window resize
 * core: add some default keys for gnome-terminal (home/end, ctrl+up/down,
   alt+pgup/pgdn)
 * core: add option "memory" to command /debug
 * core: add option weechat.look.read_marker_string
 * core: improve display of commands lists in /help (add arguments -list
   and -listfull) (task #10299)
 * core: improve arguments displayed in /help of commands
 * core: fix terminal title when $TERM starts with "screen"
 * core: add some chars after cursor when scrolling input line: new option
   weechat.look.input_cursor_scroll (bug #21391)
 * core: add color "gray"
 * core: add attributes for colors ("*": bold, "!": reverse, "_": underline)
 * core: dynamically allocate color pairs (extended colors can be used without
   being added with command "/color")
 * core: allow background for nick colors (using ":")
 * irc: add new option irc.look.color_nicks_in_nicklist
 * irc: fix crash when completing /part command on a non-irc buffer (bug #32402)
 * irc: add many missing commands for target buffer (options irc.msgbuffer.xxx)
   (bug #32216)
 * lua: fix crash when many scripts are executing callbacks at same time
 * relay: do not send join for private buffers to client
 * rmodifier: fix reload of file rmodifier.conf
 * rmodifier: fix crash when adding rmodifier with invalid regex
 * xfer: do not close chat buffers when removing xfer from list (bug #32271)
 
diff --git a/src/core/wee-hook.c b/src/core/wee-hook.c
index 8794206..606c878 100644
--- a/src/core/wee-hook.c
+++ b/src/core/wee-hook.c
@@ -1641,66 +1641,99 @@ struct t_hook *
 hook_connect (struct t_weechat_plugin *plugin, const char *proxy, const char *address,
               int port, int sock, int ipv6, void *gnutls_sess, void *gnutls_cb,
               int gnutls_dhkey_size, const char *local_hostname,
               t_hook_callback_connect *callback, void *callback_data)
 {
     struct t_hook *new_hook;
     struct t_hook_connect *new_hook_connect;
     
 #ifndef HAVE_GNUTLS
     /* make C compiler happy */
     (void) gnutls_sess;
     (void) gnutls_cb;
     (void) gnutls_dhkey_size;
 #endif
     
     if ((sock < 0) || !address || (port <= 0) || !callback)
         return NULL;
     
     new_hook = malloc (sizeof (*new_hook));
     if (!new_hook)
         return NULL;
     new_hook_connect = malloc (sizeof (*new_hook_connect));
     if (!new_hook_connect)
     {
         free (new_hook);
         return NULL;
     }
     
     hook_init_data (new_hook, plugin, HOOK_TYPE_CONNECT, HOOK_PRIORITY_DEFAULT,
                     callback_data);
     
     new_hook->hook_data = new_hook_connect;
     new_hook_connect->callback = callback;
     new_hook_connect->proxy = (proxy) ? strdup (proxy) : NULL;
     new_hook_connect->address = strdup (address);
     new_hook_connect->port = port;
     new_hook_connect->sock = sock;
     new_hook_connect->ipv6 = ipv6;
 #ifdef HAVE_GNUTLS
     new_hook_connect->gnutls_sess = gnutls_sess;
     new_hook_connect->gnutls_cb = gnutls_cb;
     new_hook_connect->gnutls_dhkey_size = gnutls_dhkey_size;
 #endif
     new_hook_connect->local_hostname = (local_hostname) ?
         strdup (local_hostname) : NULL;
     new_hook_connect->child_read = -1;
     new_hook_connect->child_write = -1;
     new_hook_connect->child_pid = 0;
     new_hook_connect->hook_fd = NULL;
     new_hook_connect->handshake_hook_fd = NULL;
     new_hook_connect->handshake_hook_timer = NULL;
     new_hook_connect->handshake_fd_flags = 0;
     new_hook_connect->handshake_ip_address = NULL;
     
     hook_add_to_list (new_hook);
     
     network_connect_with_fork (new_hook);
     
     return new_hook;
 }
 
 /*
- * hook_connect_gnutls_set_certificates: set gnutls
+ * hook_connect_gnutls_verify_certificates: verify certificates
+ */
+
+#ifdef HAVE_GNUTLS
+int
+hook_connect_gnutls_verify_certificates (gnutls_session_t tls_session)
+{
+    struct t_hook *ptr_hook;
+    int rc;
+    
+    rc = -1;
+    ptr_hook = weechat_hooks[HOOK_TYPE_CONNECT];
+    while (ptr_hook)
+    {
+        /* looking for the right hook using to the gnutls session pointer */
+        if (!ptr_hook->deleted
+            && HOOK_CONNECT(ptr_hook, gnutls_sess)
+            && (*(HOOK_CONNECT(ptr_hook, gnutls_sess)) == tls_session))
+        {
+            rc = (int) (HOOK_CONNECT(ptr_hook, gnutls_cb))
+                (ptr_hook->callback_data, tls_session, NULL, 0,
+                 NULL, 0, NULL,
+                 WEECHAT_HOOK_CONNECT_GNUTLS_CB_VERIFY_CERT);
+            break;
+        }
+        ptr_hook = ptr_hook->next_hook;
+    }
+    
+    return rc;
+}
+#endif
+
+/*
+ * hook_connect_gnutls_set_certificates: set certificates
  */
 
 #ifdef HAVE_GNUTLS
@@ -1708,34 +1741,35 @@ int
 hook_connect_gnutls_set_certificates (gnutls_session_t tls_session,
                                       const gnutls_datum_t *req_ca, int nreq,
                                       const gnutls_pk_algorithm_t *pk_algos,
                                       int pk_algos_len,
                                       gnutls_retr_st *answer)
 {
     struct t_hook *ptr_hook;
     int rc;
     
     rc = -1;
     ptr_hook = weechat_hooks[HOOK_TYPE_CONNECT];
     while (ptr_hook)
     {
         /* looking for the right hook using to the gnutls session pointer */
         if (!ptr_hook->deleted
             && HOOK_CONNECT(ptr_hook, gnutls_sess)
             && (*(HOOK_CONNECT(ptr_hook, gnutls_sess)) == tls_session))
         {
             rc = (int) (HOOK_CONNECT(ptr_hook, gnutls_cb))
                 (ptr_hook->callback_data, tls_session, req_ca, nreq,
-                 pk_algos, pk_algos_len, answer);
+                 pk_algos, pk_algos_len, answer,
+                 WEECHAT_HOOK_CONNECT_GNUTLS_CB_SET_CERT);
             break;
         }
         ptr_hook = ptr_hook->next_hook;
     }
     
     return rc;
 }
 #endif
 
 /*
  * hook_print: hook a message printed by WeeChat
  */
 
diff --git a/src/core/wee-hook.h b/src/core/wee-hook.h
index a3ae429..4575187 100644
--- a/src/core/wee-hook.h
+++ b/src/core/wee-hook.h
@@ -205,7 +205,8 @@ typedef int (t_hook_callback_connect)(void *data, int status,
 typedef int (gnutls_callback_t)(void *data, gnutls_session_t tls_session,
                                 const gnutls_datum_t *req_ca, int nreq,
                                 const gnutls_pk_algorithm_t *pk_algos,
-                                int pk_algos_len, gnutls_retr_st *answer);
+                                int pk_algos_len, gnutls_retr_st *answer,
+                                int action);
 #endif
 
 struct t_hook_connect
@@ -411,6 +412,7 @@ extern struct t_hook *hook_connect (struct t_weechat_plugin *plugin,
                                     t_hook_callback_connect *callback,
                                     void *callback_data);
 #ifdef HAVE_GNUTLS
+extern int hook_connect_gnutls_verify_certificates (gnutls_session_t tls_session);
 extern int hook_connect_gnutls_set_certificates (gnutls_session_t tls_session,
                                                  const gnutls_datum_t *req_ca, int nreq,
                                                  const gnutls_pk_algorithm_t *pk_algos,
diff --git a/src/core/wee-network.c b/src/core/wee-network.c
index f74a90b..08fa691 100644
--- a/src/core/wee-network.c
+++ b/src/core/wee-network.c
@@ -77,35 +77,37 @@ void
 network_init ()
 {
 #ifdef HAVE_GNUTLS
     char *ca_path, *ca_path2;
 
     gnutls_global_init ();
     gnutls_certificate_allocate_credentials (&gnutls_xcred);
     
     ca_path = string_expand_home (CONFIG_STRING(config_network_gnutls_ca_file));
     if (ca_path)
     {
         ca_path2 = string_replace (ca_path, "%h", weechat_home);
         if (ca_path2)
         {
             gnutls_certificate_set_x509_trust_file (gnutls_xcred, ca_path2,
                                                     GNUTLS_X509_FMT_PEM);
             free (ca_path2);
         }
         free (ca_path);
     }
+    gnutls_certificate_set_verify_function (gnutls_xcred,
+                                            &hook_connect_gnutls_verify_certificates);
     gnutls_certificate_client_set_retrieve_function (gnutls_xcred,
                                                      &hook_connect_gnutls_set_certificates);
     network_init_ok = 1;
 #endif
 #ifdef HAVE_GCRYPT
     gcry_check_version (GCRYPT_VERSION);
     gcry_control (GCRYCTL_DISABLE_SECMEM, 0);
     gcry_control (GCRYCTL_INITIALIZATION_FINISHED, 0);
 #endif
 }
 
 /*
  * network_end: end network
  */
 
diff --git a/src/plugins/irc/irc-server.c b/src/plugins/irc/irc-server.c
index acbc1ca..d39a0cf 100644
--- a/src/plugins/irc/irc-server.c
+++ b/src/plugins/irc/irc-server.c
@@ -2805,255 +2805,261 @@ int
 irc_server_gnutls_callback (void *data, gnutls_session_t tls_session,
                             const gnutls_datum_t *req_ca, int nreq,
                             const gnutls_pk_algorithm_t *pk_algos,
-                            int pk_algos_len, gnutls_retr_st *answer)
+                            int pk_algos_len, gnutls_retr_st *answer,
+                            int action)
 {
     struct t_irc_server *server;
     gnutls_retr_st tls_struct;
     gnutls_x509_crt_t cert_temp;
     const gnutls_datum_t *cert_list;
     gnutls_datum_t filedatum;
     unsigned int cert_list_len, status;
     time_t cert_time;
     char *cert_path0, *cert_path1, *cert_path2, *cert_str, *hostname;
     const char *weechat_dir;
     int rc, ret, i, j, hostname_match;
 #if LIBGNUTLS_VERSION_NUMBER >= 0x010706
     gnutls_datum_t cinfo;
     int rinfo;
 #endif
 
     /* make C compiler happy */
     (void) req_ca;
     (void) nreq;
     (void) pk_algos;
     (void) pk_algos_len;
     
     rc = 0;
     
     if (!data)
         return -1;
     
     server = (struct t_irc_server *) data;
     hostname = server->current_address;
     hostname_match = 0;
     
-    weechat_printf (server->buffer,
-                    _("gnutls: connected using %d-bit Diffie-Hellman shared "
-                      "secret exchange"),
-                    IRC_SERVER_OPTION_INTEGER (server,
-                                               IRC_SERVER_OPTION_SSL_DHKEY_SIZE));
-    if (gnutls_certificate_verify_peers2 (tls_session, &status) < 0)
+    if (action == WEECHAT_HOOK_CONNECT_GNUTLS_CB_VERIFY_CERT)
     {
         weechat_printf (server->buffer,
-                        _("%sgnutls: error while checking peer's certificate"),
-                        weechat_prefix ("error"));
-        rc = -1;
-    }
-    else
-    {
-        /* some checks */
-        if (status & GNUTLS_CERT_INVALID)
+                        _("gnutls: connected using %d-bit Diffie-Hellman shared "
+                          "secret exchange"),
+                        IRC_SERVER_OPTION_INTEGER (server,
+                                                   IRC_SERVER_OPTION_SSL_DHKEY_SIZE));
+        if (gnutls_certificate_verify_peers2 (tls_session, &status) < 0)
         {
             weechat_printf (server->buffer,
-                            _("%sgnutls: peer's certificate is NOT trusted"),
+                            _("%sgnutls: error while checking peer's certificate"),
                             weechat_prefix ("error"));
             rc = -1;
         }
         else
         {
-            weechat_printf (server->buffer,
-                            _("gnutls: peer's certificate is trusted"));
-        }
-        if (status & GNUTLS_CERT_SIGNER_NOT_FOUND)
-        {
-            weechat_printf (server->buffer,
-                            _("%sgnutls: peer's certificate issuer is unknown"),
-                            weechat_prefix ("error"));
-            rc = -1;
-        }
-        if (status & GNUTLS_CERT_REVOKED)
-        {
-            weechat_printf (server->buffer,
-                            _("%sgnutls: the certificate has been revoked"),
-                            weechat_prefix ("error"));
-            rc = -1;
-        }
-        
-        /* check certificates */
-        if (gnutls_x509_crt_init (&cert_temp) >= 0)
-        {
-            cert_list = gnutls_certificate_get_peers (tls_session, &cert_list_len);
-            if (cert_list)
+            /* some checks */
+            if (status & GNUTLS_CERT_INVALID)
+            {
+                weechat_printf (server->buffer,
+                                _("%sgnutls: peer's certificate is NOT trusted"),
+                                weechat_prefix ("error"));
+                rc = -1;
+            }
+            else
+            {
+                weechat_printf (server->buffer,
+                                _("gnutls: peer's certificate is trusted"));
+            }
+            if (status & GNUTLS_CERT_SIGNER_NOT_FOUND)
             {
                 weechat_printf (server->buffer,
-                                NG_("gnutls: receiving %d certificate",
-                                    "gnutls: receiving %d certificates",
-                                    cert_list_len),
-                                cert_list_len);
-                for (i = 0, j = (int) cert_list_len; i < j; i++)
+                                _("%sgnutls: peer's certificate issuer is unknown"),
+                                weechat_prefix ("error"));
+                rc = -1;
+            }
+            if (status & GNUTLS_CERT_REVOKED)
+            {
+                weechat_printf (server->buffer,
+                                _("%sgnutls: the certificate has been revoked"),
+                                weechat_prefix ("error"));
+                rc = -1;
+            }
+            
+            /* check certificates */
+            if (gnutls_x509_crt_init (&cert_temp) >= 0)
+            {
+                cert_list = gnutls_certificate_get_peers (tls_session, &cert_list_len);
+                if (cert_list)
                 {
-                    if (gnutls_x509_crt_import (cert_temp, &cert_list[i], GNUTLS_X509_FMT_DER) >= 0)
+                    weechat_printf (server->buffer,
+                                    NG_("gnutls: receiving %d certificate",
+                                        "gnutls: receiving %d certificates",
+                                        cert_list_len),
+                                    cert_list_len);
+                    for (i = 0, j = (int) cert_list_len; i < j; i++)
                     {
-                        /* checking if hostname matches in the first certificate */
-                        if (i == 0 && gnutls_x509_crt_check_hostname (cert_temp, hostname) != 0)
+                        if (gnutls_x509_crt_import (cert_temp, &cert_list[i], GNUTLS_X509_FMT_DER) >= 0)
                         {
-                            hostname_match = 1;
-                        }
+                            /* checking if hostname matches in the first certificate */
+                            if ((i == 0) && (gnutls_x509_crt_check_hostname (cert_temp, hostname) != 0))
+                            {
+                                hostname_match = 1;
+                            }
 #if LIBGNUTLS_VERSION_NUMBER >= 0x010706
-                        /* displaying infos about certificate */
+                            /* displaying infos about certificate */
 #if LIBGNUTLS_VERSION_NUMBER < 0x020400
-                        rinfo = gnutls_x509_crt_print (cert_temp, GNUTLS_X509_CRT_ONELINE, &cinfo);
+                            rinfo = gnutls_x509_crt_print (cert_temp, GNUTLS_X509_CRT_ONELINE, &cinfo);
 #else
-                        rinfo = gnutls_x509_crt_print (cert_temp, GNUTLS_CRT_PRINT_ONELINE, &cinfo);
+                            rinfo = gnutls_x509_crt_print (cert_temp, GNUTLS_CRT_PRINT_ONELINE, &cinfo);
 #endif
-                        if (rinfo == 0)
-                        {
-                            weechat_printf (server->buffer,
-                                            _(" - certificate[%d] info:"), i + 1);
-                            weechat_printf (server->buffer,
-                                            "   - %s", cinfo.data);
-                            gnutls_free (cinfo.data);
-                        }
+                            if (rinfo == 0)
+                            {
+                                weechat_printf (server->buffer,
+                                                _(" - certificate[%d] info:"), i + 1);
+                                weechat_printf (server->buffer,
+                                                "   - %s", cinfo.data);
+                                gnutls_free (cinfo.data);
+                            }
 #endif
-                        /* check expiration date */
-                        cert_time = gnutls_x509_crt_get_expiration_time (cert_temp);
-                        if (cert_time < time(NULL))
-                        {
-                            weechat_printf (server->buffer,
-                                            _("%sgnutls: certificate has expired"),
-                                            weechat_prefix ("error"));
-                            rc = -1;
-                        }
-                        /* check expiration date */
-                        cert_time = gnutls_x509_crt_get_activation_time (cert_temp);
-                        if (cert_time > time(NULL))
-                        {
-                            weechat_printf (server->buffer,
-                                            _("%sgnutls: certificate is not yet activated"),
-                                            weechat_prefix ("error"));
-                            rc = -1;
+                            /* check expiration date */
+                            cert_time = gnutls_x509_crt_get_expiration_time (cert_temp);
+                            if (cert_time < time (NULL))
+                            {
+                                weechat_printf (server->buffer,
+                                                _("%sgnutls: certificate has expired"),
+                                                weechat_prefix ("error"));
+                                rc = -1;
+                            }
+                            /* check activation date */
+                            cert_time = gnutls_x509_crt_get_activation_time (cert_temp);
+                            if (cert_time > time (NULL))
+                            {
+                                weechat_printf (server->buffer,
+                                                _("%sgnutls: certificate is not yet activated"),
+                                                weechat_prefix ("error"));
+                                rc = -1;
+                            }
                         }
                     }
-                }
-                if (hostname_match == 0)
-                {
-                    weechat_printf (server->buffer,
-                                    _("%sgnutls: the hostname in the "
-                                      "certificate does NOT match \"%s\""),
-                                    weechat_prefix ("error"), hostname);
-                    rc = -1;
+                    if (hostname_match == 0)
+                    {
+                        weechat_printf (server->buffer,
+                                        _("%sgnutls: the hostname in the "
+                                          "certificate does NOT match \"%s\""),
+                                        weechat_prefix ("error"), hostname);
+                        rc = -1;
+                    }
                 }
             }
         }
     }
-    
-    /* using client certificate if it exists */
-    cert_path0 = (char *) IRC_SERVER_OPTION_STRING(server,
-                                                   IRC_SERVER_OPTION_SSL_CERT);
-    if (cert_path0 && cert_path0[0])
+    else if (action == WEECHAT_HOOK_CONNECT_GNUTLS_CB_SET_CERT)
     {
-        weechat_dir = weechat_info_get ("weechat_dir", "");
-        cert_path1 = weechat_string_replace (cert_path0, "%h", weechat_dir);
-        cert_path2 = (cert_path1) ?
-            weechat_string_expand_home (cert_path1) : NULL;
-        
-        if (cert_path2)
+        /* using client certificate if it exists */
+        cert_path0 = (char *) IRC_SERVER_OPTION_STRING(server,
+                                                       IRC_SERVER_OPTION_SSL_CERT);
+        if (cert_path0 && cert_path0[0])
         {
-            cert_str = weechat_file_get_content (cert_path2);
-            if (cert_str)
+            weechat_dir = weechat_info_get ("weechat_dir", "");
+            cert_path1 = weechat_string_replace (cert_path0, "%h", weechat_dir);
+            cert_path2 = (cert_path1) ?
+                weechat_string_expand_home (cert_path1) : NULL;
+            
+            if (cert_path2)
             {
-                weechat_printf (server->buffer,
-                                _("gnutls: sending one certificate"));
-                
-                filedatum.data = (unsigned char *) cert_str;
-                filedatum.size = strlen (cert_str);
-                
-                /* certificate */
-                gnutls_x509_crt_init (&server->tls_cert);
-                gnutls_x509_crt_import (server->tls_cert, &filedatum,
-                                        GNUTLS_X509_FMT_PEM);
-                
-                /* key */
-                gnutls_x509_privkey_init (&server->tls_cert_key);
-                ret = gnutls_x509_privkey_import (server->tls_cert_key,
-                                                  &filedatum,
-                                                  GNUTLS_X509_FMT_PEM);
-                if (ret < 0)
-                {
-                    ret = gnutls_x509_privkey_import_pkcs8 (server->tls_cert_key,
-                                                            &filedatum,
-                                                            GNUTLS_X509_FMT_PEM,
-                                                            NULL,
-                                                            GNUTLS_PKCS_PLAIN);
-                }
-                if (ret < 0)
+                cert_str = weechat_file_get_content (cert_path2);
+                if (cert_str)
                 {
                     weechat_printf (server->buffer,
-                                    _("%sgnutls: invalid certificate \"%s\", "
-                                      "error: %s"),
-                                    weechat_prefix ("error"), cert_path2,
-                                    gnutls_strerror (ret));
-                    rc = -1;
-                }
-                else
-                {
-                    tls_struct.type = GNUTLS_CRT_X509;
-                    tls_struct.ncerts = 1;
-                    tls_struct.deinit_all = 0;
-                    tls_struct.cert.x509 = &server->tls_cert;
-                    tls_struct.key.x509 = server->tls_cert_key;
+                                    _("gnutls: sending one certificate"));
+                    
+                    filedatum.data = (unsigned char *) cert_str;
+                    filedatum.size = strlen (cert_str);
+                    
+                    /* certificate */
+                    gnutls_x509_crt_init (&server->tls_cert);
+                    gnutls_x509_crt_import (server->tls_cert, &filedatum,
+                                            GNUTLS_X509_FMT_PEM);
+                    
+                    /* key */
+                    gnutls_x509_privkey_init (&server->tls_cert_key);
+                    ret = gnutls_x509_privkey_import (server->tls_cert_key,
+                                                      &filedatum,
+                                                      GNUTLS_X509_FMT_PEM);
+                    if (ret < 0)
+                    {
+                        ret = gnutls_x509_privkey_import_pkcs8 (server->tls_cert_key,
+                                                                &filedatum,
+                                                                GNUTLS_X509_FMT_PEM,
+                                                                NULL,
+                                                                GNUTLS_PKCS_PLAIN);
+                    }
+                    if (ret < 0)
+                    {
+                        weechat_printf (server->buffer,
+                                        _("%sgnutls: invalid certificate \"%s\", "
+                                          "error: %s"),
+                                        weechat_prefix ("error"), cert_path2,
+                                        gnutls_strerror (ret));
+                        rc = -1;
+                    }
+                    else
+                    {
+                        tls_struct.type = GNUTLS_CRT_X509;
+                        tls_struct.ncerts = 1;
+                        tls_struct.deinit_all = 0;
+                        tls_struct.cert.x509 = &server->tls_cert;
+                        tls_struct.key.x509 = server->tls_cert_key;
 #if LIBGNUTLS_VERSION_NUMBER >= 0x010706
-                    /* client certificate info */
+                        /* client certificate info */
 #if LIBGNUTLS_VERSION_NUMBER < 0x020400
-                    rinfo = gnutls_x509_crt_print (server->tls_cert,
-                                                   GNUTLS_X509_CRT_ONELINE,
-                                                   &cinfo);
+                        rinfo = gnutls_x509_crt_print (server->tls_cert,
+                                                       GNUTLS_X509_CRT_ONELINE,
+                                                       &cinfo);
 #else
-                    rinfo = gnutls_x509_crt_print (server->tls_cert,
-                                                   GNUTLS_CRT_PRINT_ONELINE,
-                                                   &cinfo);
+                        rinfo = gnutls_x509_crt_print (server->tls_cert,
+                                                       GNUTLS_CRT_PRINT_ONELINE,
+                                                       &cinfo);
 #endif
-                    if (rinfo == 0)
-                    {
-                        weechat_printf (server->buffer,
-                                        _(" - client certificate info (%s):"),
-                                        cert_path2);
-                        weechat_printf (server->buffer, "  - %s", cinfo.data);
-                        gnutls_free (cinfo.data);
-                    }
+                        if (rinfo == 0)
+                        {
+                            weechat_printf (server->buffer,
+                                            _(" - client certificate info (%s):"),
+                                            cert_path2);
+                            weechat_printf (server->buffer, "  - %s", cinfo.data);
+                            gnutls_free (cinfo.data);
+                        }
 #endif
-                    memcpy (answer, &tls_struct, sizeof (gnutls_retr_st));
-                    free (cert_str);
+                        memcpy (answer, &tls_struct, sizeof (gnutls_retr_st));
+                        free (cert_str);
+                    }
+                }
+                else
+                {
+                    weechat_printf (server->buffer,
+                                    _("%sgnutls: unable to read certifcate \"%s\""),
+                                    weechat_prefix ("error"), cert_path2);
                 }
             }
-            else
-            {
-                weechat_printf (server->buffer,
-                                _("%sgnutls: unable to read certifcate \"%s\""),
-                                weechat_prefix ("error"), cert_path2);
-            }
+            
+            if (cert_path1)
+                free (cert_path1);
+            if (cert_path2)
+                free (cert_path2);
         }
-        
-        if (cert_path1)
-            free (cert_path1);
-        if (cert_path2)
-            free (cert_path2);
     }
     
     /* an error should stop the handshake unless the user doesn't care */
     if ((rc == -1)
         && (IRC_SERVER_OPTION_BOOLEAN(server, IRC_SERVER_OPTION_SSL_VERIFY) == 0))
     {
         rc = 0;
     }
     
     return rc;
 }
 #endif
 
 /*
  * irc_server_connect: connect to an IRC server
  *                     Return: 1 if ok
  *                             0 if error
  */
 
diff --git a/src/plugins/weechat-plugin.h b/src/plugins/weechat-plugin.h
index 8f45504..c5a8433 100644
--- a/src/plugins/weechat-plugin.h
+++ b/src/plugins/weechat-plugin.h
@@ -40,95 +40,99 @@ struct t_hashtable;
 struct timeval;
 
 /*
  * IMPORTANT NOTE for WeeChat developers: if you update, add or remove
  * some functions in this file, then please update API version below.
  */
 
 /* API version (used to check that plugin has same API and can be loaded) */
-#define WEECHAT_PLUGIN_API_VERSION "20110102-01"
+#define WEECHAT_PLUGIN_API_VERSION "20110302-01"
 
 /* macros for defining plugin infos */
 #define WEECHAT_PLUGIN_NAME(__name)                                     \
     char weechat_plugin_name[] = __name;                                \
     char weechat_plugin_api_version[] = WEECHAT_PLUGIN_API_VERSION;
 #define WEECHAT_PLUGIN_AUTHOR(__author)         \
     char weechat_plugin_author[] = __author;
 #define WEECHAT_PLUGIN_DESCRIPTION(__desc)      \
     char weechat_plugin_description[] = __desc;
 #define WEECHAT_PLUGIN_VERSION(__version)       \
     char weechat_plugin_version[] = __version;
 #define WEECHAT_PLUGIN_LICENSE(__license)       \
     char weechat_plugin_license[] = __license;
 
 /* return codes for plugin functions */
 #define WEECHAT_RC_OK                               0
 #define WEECHAT_RC_OK_EAT                           1
 #define WEECHAT_RC_ERROR                           -1
 
 /* return codes for config read functions/callbacks */
 #define WEECHAT_CONFIG_READ_OK                      0
 #define WEECHAT_CONFIG_READ_MEMORY_ERROR           -1
 #define WEECHAT_CONFIG_READ_FILE_NOT_FOUND         -2
 
 /* return codes for config write functions/callbacks */
 #define WEECHAT_CONFIG_WRITE_OK                     0
 #define WEECHAT_CONFIG_WRITE_ERROR                 -1
 #define WEECHAT_CONFIG_WRITE_MEMORY_ERROR          -2
 
 /* null value for option */
 #define WEECHAT_CONFIG_OPTION_NULL                 "null"
 
 /* return codes for config option set */
 #define WEECHAT_CONFIG_OPTION_SET_OK_CHANGED        2
 #define WEECHAT_CONFIG_OPTION_SET_OK_SAME_VALUE     1
 #define WEECHAT_CONFIG_OPTION_SET_ERROR             0
 #define WEECHAT_CONFIG_OPTION_SET_OPTION_NOT_FOUND -1
 
 /* return codes for config option unset */
 #define WEECHAT_CONFIG_OPTION_UNSET_OK_NO_RESET     0
 #define WEECHAT_CONFIG_OPTION_UNSET_OK_RESET        1
 #define WEECHAT_CONFIG_OPTION_UNSET_OK_REMOVED      2
 #define WEECHAT_CONFIG_OPTION_UNSET_ERROR          -1
 
 /* list management (order of elements) */
 #define WEECHAT_LIST_POS_SORT                       "sort"
 #define WEECHAT_LIST_POS_BEGINNING                  "beginning"
 #define WEECHAT_LIST_POS_END                        "end"
 
 /* type for keys and values in hashtable */
 #define WEECHAT_HASHTABLE_INTEGER                   "integer"
 #define WEECHAT_HASHTABLE_STRING                    "string"
 #define WEECHAT_HASHTABLE_POINTER                   "pointer"
 #define WEECHAT_HASHTABLE_BUFFER                    "buffer"
 #define WEECHAT_HASHTABLE_TIME                      "time"
 
 /* buffer hotlist */
 #define WEECHAT_HOTLIST_LOW                         "0"
 #define WEECHAT_HOTLIST_MESSAGE                     "1"
 #define WEECHAT_HOTLIST_PRIVATE                     "2"
 #define WEECHAT_HOTLIST_HIGHLIGHT                   "3"
 
 /*
  * process return code (for callback):
  *   if >= 0, then process ended and it's return code of command
  *   if  < 0, then it's running or error
  */
 #define WEECHAT_HOOK_PROCESS_RUNNING                -1
 #define WEECHAT_HOOK_PROCESS_ERROR                  -2
 
 /* connect status for connection hooked */
 #define WEECHAT_HOOK_CONNECT_OK                     0
 #define WEECHAT_HOOK_CONNECT_ADDRESS_NOT_FOUND      1
 #define WEECHAT_HOOK_CONNECT_IP_ADDRESS_NOT_FOUND   2
 #define WEECHAT_HOOK_CONNECT_CONNECTION_REFUSED     3
 #define WEECHAT_HOOK_CONNECT_PROXY_ERROR            4
 #define WEECHAT_HOOK_CONNECT_LOCAL_HOSTNAME_ERROR   5
 #define WEECHAT_HOOK_CONNECT_GNUTLS_INIT_ERROR      6
 #define WEECHAT_HOOK_CONNECT_GNUTLS_HANDSHAKE_ERROR 7
 #define WEECHAT_HOOK_CONNECT_MEMORY_ERROR           8
 
+/* action for gnutls callback: verify or set certificate */
+#define WEECHAT_HOOK_CONNECT_GNUTLS_CB_VERIFY_CERT  0
+#define WEECHAT_HOOK_CONNECT_GNUTLS_CB_SET_CERT     1
+
 /* type of data for signal hooked */
 #define WEECHAT_HOOK_SIGNAL_STRING                  "string"
 #define WEECHAT_HOOK_SIGNAL_INT                     "int"
 #define WEECHAT_HOOK_SIGNAL_POINTER                 "pointer"
 
