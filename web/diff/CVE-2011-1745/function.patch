commit 194b3da873fd334ef183806db751473512af29ce
Author: Vasiliy Kulikov <segoon@openwall.com>
Date:   Thu Apr 14 20:55:16 2011 +0400

    agp: fix arbitrary kernel memory writes
    
    pg_start is copied from userspace on AGPIOC_BIND and AGPIOC_UNBIND ioctl
    cmds of agp_ioctl() and passed to agpioc_bind_wrap().  As said in the
    comment, (pg_start + mem->page_count) may wrap in case of AGPIOC_BIND,
    and it is not checked at all in case of AGPIOC_UNBIND.  As a result, user
    with sufficient privileges (usually "video" group) may generate either
    local DoS or privilege escalation.
    
    Signed-off-by: Vasiliy Kulikov <segoon@openwall.com>
    Signed-off-by: Dave Airlie <airlied@redhat.com>

diff --git a/drivers/char/agp/generic.c b/drivers/char/agp/generic.c
index 850a643..b072648 100644
--- a/drivers/char/agp/generic.c
+++ b/drivers/char/agp/generic.c
@@ -1046,80 +1046,80 @@ EXPORT_SYMBOL(agp_generic_free_gatt_table);
 int agp_generic_insert_memory(struct agp_memory * mem, off_t pg_start, int type)
 {
 	int num_entries;
 	size_t i;
 	off_t j;
 	void *temp;
 	struct agp_bridge_data *bridge;
 	int mask_type;
 
 	bridge = mem->bridge;
 	if (!bridge)
 		return -EINVAL;
 
 	if (mem->page_count == 0)
 		return 0;
 
 	temp = bridge->current_size;
 
 	switch (bridge->driver->size_type) {
 	case U8_APER_SIZE:
 		num_entries = A_SIZE_8(temp)->num_entries;
 		break;
 	case U16_APER_SIZE:
 		num_entries = A_SIZE_16(temp)->num_entries;
 		break;
 	case U32_APER_SIZE:
 		num_entries = A_SIZE_32(temp)->num_entries;
 		break;
 	case FIXED_APER_SIZE:
 		num_entries = A_SIZE_FIX(temp)->num_entries;
 		break;
 	case LVL2_APER_SIZE:
 		/* The generic routines can't deal with 2 level gatt's */
 		return -EINVAL;
 		break;
 	default:
 		num_entries = 0;
 		break;
 	}
 
 	num_entries -= agp_memory_reserved/PAGE_SIZE;
 	if (num_entries < 0) num_entries = 0;
 
 	if (type != mem->type)
 		return -EINVAL;
 
 	mask_type = bridge->driver->agp_type_to_mask_type(bridge, type);
 	if (mask_type != 0) {
 		/* The generic routines know nothing of memory types */
 		return -EINVAL;
 	}
 
-	/* AK: could wrap */
-	if ((pg_start + mem->page_count) > num_entries)
+	if (((pg_start + mem->page_count) > num_entries) ||
+	    ((pg_start + mem->page_count) < pg_start))
 		return -EINVAL;
 
 	j = pg_start;
 
 	while (j < (pg_start + mem->page_count)) {
 		if (!PGE_EMPTY(bridge, readl(bridge->gatt_table+j)))
 			return -EBUSY;
 		j++;
 	}
 
 	if (!mem->is_flushed) {
 		bridge->driver->cache_flush();
 		mem->is_flushed = true;
 	}
 
 	for (i = 0, j = pg_start; i < mem->page_count; i++, j++) {
 		writel(bridge->driver->mask_memory(bridge,
 						   page_to_phys(mem->pages[i]),
 						   mask_type),
 		       bridge->gatt_table+j);
 	}
 	readl(bridge->gatt_table+j-1);	/* PCI Posting. */
 
 	bridge->driver->tlb_flush(mem);
 	return 0;
 }
@@ -1129,31 +1129,36 @@ EXPORT_SYMBOL(agp_generic_insert_memory);
 int agp_generic_remove_memory(struct agp_memory *mem, off_t pg_start, int type)
 {
 	size_t i;
 	struct agp_bridge_data *bridge;
-	int mask_type;
+	int mask_type, num_entries;
 
 	bridge = mem->bridge;
 	if (!bridge)
 		return -EINVAL;
 
 	if (mem->page_count == 0)
 		return 0;
 
 	if (type != mem->type)
 		return -EINVAL;
 
+	num_entries = agp_num_entries();
+	if (((pg_start + mem->page_count) > num_entries) ||
+	    ((pg_start + mem->page_count) < pg_start))
+		return -EINVAL;
+
 	mask_type = bridge->driver->agp_type_to_mask_type(bridge, type);
 	if (mask_type != 0) {
 		/* The generic routines know nothing of memory types */
 		return -EINVAL;
 	}
 
 	/* AK: bogus, should encode addresses > 4GB */
 	for (i = pg_start; i < (mem->page_count + pg_start); i++) {
 		writel(bridge->scratch_page, bridge->gatt_table+i);
 	}
 	readl(bridge->gatt_table+i-1);	/* PCI Posting. */
 
 	bridge->driver->tlb_flush(mem);
 	return 0;
 }
