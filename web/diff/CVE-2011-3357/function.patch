commit 6ede60d3db9e202044f135001589cce941ff6f0f
Author: David Hicks <hickseydr@optusnet.com.au>
Date:   Wed Feb 10 18:48:23 2010 +1100

    Fix #11481: Don't show bug group actions that can't be used
    
    Currently the bug action group dropdown list on view_all_bug_page.php
    shows (almost) every available option, even if the current user isn't
    authorised to use those options.
    
    This patch implements checking to see which options are available to the
    user for the issues which are currently shown on view_all_bug_page.php.
    Options are only displayed in the dropdown list if the user is able to
    use the option on at least one of the bugs displayed.
    
    Additionally, the logic behind when selection checkboxes are shown
    alongside a bug has been improved. Checkboxes won't display next to bugs
    that the user cannot perform group actions on.
    
    Backported from master branch because it's needed to resolve an LFI/XSS
    issue in bug_actiongroup_ext.php.

diff --git a/core/bug_group_action_api.php b/core/bug_group_action_api.php
index 2ca008a..ef57fd4 100644
--- a/core/bug_group_action_api.php
+++ b/core/bug_group_action_api.php
@@ -1,157 +1,293 @@
 <?php
 # MantisBT - a php based bugtracking system
 
 # MantisBT is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation, either version 2 of the License, or
 # (at your option) any later version.
 #
 # MantisBT is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License
 # along with MantisBT.  If not, see <http://www.gnu.org/licenses/>.
 
 /**
  * @copyright Copyright (C) 2000 - 2002  Kenzaburo Ito - kenito@300baud.org
  * @copyright Copyright (C) 2002 - 2011  MantisBT Team - mantisbt-dev@lists.sourceforge.net
  * @link http://www.mantisbt.org
  *	@package CoreAPI
  *	@subpackage BugGroupActionAPI
  */
 
 /**
  * Initialise bug action group api
  */
 function bug_group_action_init( $p_action ) {
 	$t_valid_actions = bug_group_action_get_commands( current_user_get_accessible_projects() );
 	$t_action = strtoupper( $p_action );
 
 	if ( !isset( $t_valid_actions[$t_action] ) && !isset ( $t_valid_actions['EXT_' . $t_action] ) ) {
 		trigger_error( ERROR_GENERIC, ERROR );
 	}
 
 	$t_include_file = config_get_global( 'absolute_path' ) . 'bug_actiongroup_' . $p_action . '_inc.php';
 	if ( !file_exists( $t_include_file ) ) {
 		trigger_error( ERROR_GENERIC, ERROR );
 	} else {
 		require_once( $t_include_file );
 	}
 }
 
 /**
  * Print the top part for the bug action group page.
  */
 function bug_group_action_print_top() {
 	html_page_top();
 }
 
 /**
  * Print the bottom part for the bug action group page.
  */
 function bug_group_action_print_bottom() {
 	html_page_bottom();
 }
 
 /**
  * Print the list of selected issues and the legend for the status colors.
  *
  * @param $p_bug_ids_array   An array of issue ids.
  */
 function bug_group_action_print_bug_list( $p_bug_ids_array ) {
 	$t_legend_position = config_get( 'status_legend_position' );
 
 	if( STATUS_LEGEND_POSITION_TOP == $t_legend_position ) {
 		html_status_legend();
 		echo '<br />';
 	}
 
 	echo '<div align="center">';
 	echo '<table class="width75" cellspacing="1">';
 	echo '<tr class="row-1">';
 	echo '<td class="category" colspan="2">';
 	echo lang_get( 'actiongroup_bugs' );
 	echo '</td>';
 	echo '</tr>';
 
 	$t_i = 1;
 
 	foreach( $p_bug_ids_array as $t_bug_id ) {
 		$t_class = sprintf( "row-%d", ( $t_i++ % 2 ) + 1 );
 		echo sprintf( "<tr bgcolor=\"%s\"> <td>%s</td> <td>%s</td> </tr>\n", get_status_color( bug_get_field( $t_bug_id, 'status' ) ), string_get_bug_view_link( $t_bug_id ), string_attribute( bug_get_field( $t_bug_id, 'summary' ) ) );
 	}
 
 	echo '</table>';
 	echo '</form>';
 	echo '</div>';
 
 	if( STATUS_LEGEND_POSITION_BOTTOM == $t_legend_position ) {
 		echo '<br />';
 		html_status_legend();
 	}
 }
 
 /**
  * Print the array of issue ids via hidden fields in the form to be passed on to
  * the bug action group action page.
  *
  * @param $p_bug_ids_array   An array of issue ids.
  */
 function bug_group_action_print_hidden_fields( $p_bug_ids_array ) {
 	foreach( $p_bug_ids_array as $t_bug_id ) {
 		echo '<input type="hidden" name="bug_arr[]" value="' . $t_bug_id . '" />' . "\n";
 	}
 }
 
 /**
  * Prints the list of fields in the custom action form.  These are the user inputs
  * and the submit button.  This ends up calling action_<action>_print_fields()
  * from bug_actiongroup_<action>_inc.php
  *
  * @param $p_action   The custom action name without the "EXT_" prefix.
  */
 function bug_group_action_print_action_fields( $p_action ) {
 	$t_function_name = 'action_' . $p_action . '_print_fields';
 	$t_function_name();
 }
 
 /**
  * Prints some title text for the custom action page.  This ends up calling
  * action_<action>_print_title() from bug_actiongroup_<action>_inc.php
  *
  * @param $p_action   The custom action name without the "EXT_" prefix.
  */
 function bug_group_action_print_title( $p_action ) {
 	$t_function_name = 'action_' . $p_action . '_print_title';
 	$t_function_name();
 }
 
 /**
  * Validates the combination of an action and a bug.  This ends up calling
  * action_<action>_validate() from bug_actiongroup_<action>_inc.php
  *
  * @param $p_action   The custom action name without the "EXT_" prefix.
  * @param $p_bug_id   The id of the bug to validate the action on.
  *
  * @returns true|array true if action can be applied or array of ( bug_id => reason for failure to validate )
  */
 function bug_group_action_validate( $p_action, $p_bug_id ) {
 	$t_function_name = 'action_' . $p_action . '_validate';
 	return $t_function_name( $p_bug_id );
 }
 
 
 /**
  * Executes an action on a bug.  This ends up calling
  * action_<action>_process() from bug_actiongroup_<action>_inc.php
  *
  * @param $p_action   The custom action name without the "EXT_" prefix.
  * @param $p_bug_id   The id of the bug to validate the action on.
  * @returns true|array Action can be applied., ( bug_id => reason for failure to process )
  */
 function bug_group_action_process( $p_action, $p_bug_id ) {
 	$t_function_name = 'action_' . $p_action . '_process';
 	return $t_function_name( $p_bug_id );
 }
+
+/**
+ * Get a list of bug group actions available to the current user for one or
+ * more projects.
+ * @param array $p_projects An array containing one or more project IDs
+ * @return null
+ */
+function bug_group_action_get_commands( $p_project_ids = null ) {
+	if ( $p_project_ids === null || count( $p_project_ids ) == 0 ) {
+		$p_project_ids = array( ALL_PROJECTS );
+	}
+
+	$t_commands = array();
+	foreach( $p_project_ids as $t_project_id ) {
+
+		if( !isset( $t_commands['MOVE'] ) &&
+			access_has_project_level( config_get( 'move_bug_threshold', null, null, $t_project_id ), $t_project_id ) ) {
+			$t_commands['MOVE'] = lang_get( 'actiongroup_menu_move' );
+		}
+
+		if( !isset( $t_commands['COPY'] ) &&
+			access_has_any_project( config_get( 'report_bug_threshold', null, null, $t_project_id ) ) ) {
+			$t_commands['COPY'] = lang_get( 'actiongroup_menu_copy' );
+		}
+
+		if( !isset( $t_commands['ASSIGN'] ) &&
+			access_has_project_level( config_get( 'update_bug_assign_threshold', null, null, $t_project_id ), $t_project_id ) ) {
+			if( ON == config_get( 'auto_set_status_to_assigned', null, null, $t_project_id ) &&
+				access_has_project_level( access_get_status_threshold( config_get( 'bug_assigned_status', null, null, $t_project_id ), $t_project_id ), $t_project_id ) ) {
+				$t_commands['ASSIGN'] = lang_get( 'actiongroup_menu_assign' );
+			} else {
+				$t_commands['ASSIGN'] = lang_get( 'actiongroup_menu_assign' );
+			}
+		}
+
+		if( !isset( $t_commands['CLOSE'] ) &&
+			access_has_project_level( config_get( 'update_bug_status_threshold', null, null, $t_project_id ), $t_project_id ) &&
+			( access_has_project_level( access_get_status_threshold( config_get( 'bug_closed_status_threshold', null, null, $t_project_id ), $t_project_id ), $t_project_id ) ||
+				access_has_project_level( config_get( 'allow_reporter_close', null, null, $t_project_id ), $t_project_id ) ) ) {
+			$t_commands['CLOSE'] = lang_get( 'actiongroup_menu_close' );
+		}
+
+		if( !isset( $t_commands['DELETE'] ) &&
+			access_has_project_level( config_get( 'delete_bug_threshold', null, null, $t_project_id ), $t_project_id ) ) {
+			$t_commands['DELETE'] = lang_get( 'actiongroup_menu_delete' );
+		}
+
+		if( !isset( $t_commands['RESOLVE'] ) &&
+			access_has_project_level( config_get( 'update_bug_status_threshold', null, null, $t_project_id ), $t_project_id ) &&
+			access_has_project_level( access_get_status_threshold( config_get( 'bug_resolved_status_threshold', null, null, $t_project_id ), $t_project_id ), $t_project_id ) ) {
+			$t_commands['RESOLVE'] = lang_get( 'actiongroup_menu_resolve' );
+		}
+
+		if( !isset( $t_commands['SET_STICKY'] ) &&
+			access_has_project_level( config_get( 'set_bug_sticky_threshold', null, null, $t_project_id ), $t_project_id ) ) {
+			$t_commands['SET_STICKY'] = lang_get( 'actiongroup_menu_set_sticky' );
+		}
+
+		if( !isset( $t_commands['UP_PRIOR'] ) &&
+			access_has_project_level( config_get( 'update_bug_threshold', null, null, $t_project_id ), $t_project_id ) ) {
+			$t_commands['UP_PRIOR'] = lang_get( 'actiongroup_menu_update_priority' );
+		}
+
+		if( !isset( $t_commands['EXT_UPDATE_SEVERITY'] ) &&
+			access_has_project_level( config_get( 'update_bug_threshold', null, null, $t_project_id ), $t_project_id ) ) {
+			$t_commands['EXT_UPDATE_SEVERITY'] = lang_get( 'actiongroup_menu_update_severity' );
+		}
+
+		if( !isset( $t_commands['UP_STATUS'] ) &&
+			access_has_project_level( config_get( 'update_bug_status_threshold', null, null, $t_project_id ), $t_project_id ) ) {
+			$t_commands['UP_STATUS'] = lang_get( 'actiongroup_menu_update_status' );
+		}
+
+		if( !isset( $t_commands['UP_CATEGORY'] ) &&
+			access_has_project_level( config_get( 'update_bug_threshold', null, null, $t_project_id ), $t_project_id ) ) {
+			$t_commands['UP_CATEGORY'] = lang_get( 'actiongroup_menu_update_category' );
+		}
+
+		if( !isset( $t_commands['VIEW_STATUS'] ) &&
+			access_has_project_level( config_get( 'change_view_status_threshold', null, null, $t_project_id ), $t_project_id ) ) {
+			$t_commands['VIEW_STATUS'] = lang_get( 'actiongroup_menu_update_view_status' );
+		}
+
+		if( !isset( $t_commands['EXT_UPDATE_PRODUCT_BUILD'] ) &&
+			config_get( 'enable_product_build', null, null, $t_project_id ) == ON &&
+			access_has_project_level( config_get( 'update_bug_threshold', null, null, $t_project_id ), $t_project_id ) ) {
+			$t_commands['EXT_UPDATE_PRODUCT_BUILD'] = lang_get( 'actiongroup_menu_update_product_build' );
+		}
+
+		if( !isset( $t_commands['EXT_ADD_NOTE'] ) &&
+			access_has_project_level( config_get( 'add_bugnote_threshold', null, null, $t_project_id ), $t_project_id ) ) {
+			$t_commands['EXT_ADD_NOTE'] = lang_get( 'actiongroup_menu_add_note' );
+		}
+
+		if( !isset( $t_commands['EXT_ATTACH_TAGS'] ) &&
+			access_has_project_level( config_get( 'tag_attach_threshold', null, null, $t_project_id ), $t_project_id ) ) {
+			$t_commands['EXT_ATTACH_TAGS'] = lang_get( 'actiongroup_menu_attach_tags' );
+		}
+
+		if( !isset( $t_commands['UP_FIXED_IN_VERSION'] ) &&
+			version_should_show_product_version( $t_project_id ) &&
+			access_has_project_level( config_get( 'update_bug_threshold', null, null, $t_project_id ), $t_project_id ) ) {
+			$t_commands['UP_FIXED_IN_VERSION'] = lang_get( 'actiongroup_menu_update_fixed_in_version' );
+		}
+
+		if( !isset( $t_commands['UP_TARGET_VERSION'] ) &&
+			version_should_show_product_version( $t_project_id ) &&
+			access_has_project_level( config_get( 'roadmap_update_threshold', null, null, $t_project_id ), $t_project_id ) ) {
+			$t_commands['UP_TARGET_VERSION'] = lang_get( 'actiongroup_menu_update_target_version' );
+		}
+
+		$t_custom_field_ids = custom_field_get_linked_ids( $t_project_id );
+		foreach( $t_custom_field_ids as $t_custom_field_id ) {
+			if( !custom_field_has_write_access_to_project( $t_custom_field_id, $t_project_id ) ) {
+				continue;
+			}
+			$t_custom_field_def = custom_field_get_definition( $t_custom_field_id );
+			$t_command_id = 'custom_field_' . $t_custom_field_id;
+			$t_command_caption = sprintf( lang_get( 'actiongroup_menu_update_field' ), lang_get_defaulted( $t_custom_field_def['name'] ) );
+			$t_commands[$t_command_id] = string_display( $t_command_caption );
+		}
+	}
+
+	$t_custom_group_actions = config_get( 'custom_group_actions' );
+
+	foreach( $t_custom_group_actions as $t_custom_group_action ) {
+		# use label if provided to get the localized text, otherwise fallback to action name.
+		if( isset( $t_custom_group_action['label'] ) ) {
+			$t_commands[$t_custom_group_action['action']] = lang_get_defaulted( $t_custom_group_action['label'] );
+		} else {
+			$t_commands[$t_custom_group_action['action']] = lang_get_defaulted( $t_custom_group_action['action'] );
+		}
+	}
+
+	return $t_commands;
+}
diff --git a/core/columns_api.php b/core/columns_api.php
index c1b6026..9144deb 100644
--- a/core/columns_api.php
+++ b/core/columns_api.php
@@ -836,23 +836,36 @@ function print_column_title_overdue( $p_sort, $p_dir, $p_columns_target = COLUMN
  * @access public
  */
 function print_column_selection( $p_bug, $p_columns_target = COLUMNS_TARGET_VIEW_PAGE ) {
-	global $t_checkboxes_exist, $t_update_bug_threshold;
+	global $g_checkboxes_exist;
 
 	echo '<td>';
-	if( access_has_bug_level( $t_update_bug_threshold, $p_bug->id ) ) {
-		$t_checkboxes_exist = true;
+	if( access_has_any_project( config_get( 'report_bug_threshold', null, null, $p_bug->project_id ), $p_bug->project_id ) ||
+		# !TODO: check if any other projects actually exist for the bug to be moved to
+		access_has_project_level( config_get( 'move_bug_threshold', null, null, $p_bug->project_id ), $p_bug->project_id ) ||
+		# !TODO: factor in $g_auto_set_status_to_assigned == ON
+		access_has_project_level( config_get( 'update_bug_assign_threshold', null, null, $p_bug->project_id ), $p_bug->project_id ) ||
+		access_has_project_level( config_get( 'update_bug_threshold', null, null, $p_bug->project_id ), $p_bug->project_id ) ||
+		access_has_project_level( config_get( 'delete_bug_threshold', null, null, $p_bug->project_id ), $p_bug->project_id ) ||
+		# !TODO: check to see if the bug actually has any different selectable workflow states
+		access_has_project_level( config_get( 'update_bug_status_threshold', null, null, $p_bug->project_id ), $p_bug->project_id ) ||
+		access_has_project_level( config_get( 'set_bug_sticky_threshold', null, null, $p_bug->project_id ), $p_bug->project_id ) ||
+		access_has_project_level( config_get( 'change_view_status_threshold', null, null, $p_bug->project_id ), $p_bug->project_id ) ||
+		access_has_project_level( config_get( 'add_bugnote_threshold', null, null, $p_bug->project_id ), $p_bug->project_id ) ||
+		access_has_project_level( config_get( 'tag_attach_threshold', null, null, $p_bug->project_id ), $p_bug->project_id ) ||
+		access_has_project_level( config_get( 'roadmap_update_threshold', null, null, $p_bug->project_id ), $p_bug->project_id ) ) {
+		$g_checkboxes_exist = true;
 		printf( "<input type=\"checkbox\" name=\"bug_arr[]\" value=\"%d\" />", $p_bug->id );
 	} else {
 		echo "&#160;";
 	}
 	echo '</td>';
 }
 
 /**
  * Print column title for a specific custom column.
  * @param object Column object
  * @param string sort
  * @param string direction
  * @param int $p_columns_target: see COLUMNS_TARGET_* in constant_inc.php
  * @access public
  */
diff --git a/core/print_api.php b/core/print_api.php
index 6ab54de..764d5be 100644
--- a/core/print_api.php
+++ b/core/print_api.php
@@ -48,16 +48,18 @@ require_once( 'last_visited_api.php' );
  */
 require_once( 'file_api.php' );
 
+require_once( 'bug_group_action_api.php' );
+
 # --------------------
 # Print the headers to cause the page to redirect to $p_url
 # If $p_die is true (default), terminate the execution of the script
 #  immediately
 # If we have handled any errors on this page and the 'stop_on_errors' config
 #  option is turned on, return false and don't redirect.
 # $p_sanitize - true/false - true in the case where the URL is extracted from GET/POST or untrusted source.
 # This would be false if the URL is trusted (e.g. read from config_inc.php).
 #
 # @param string The page to redirect: has to be a relative path
 # @param boolean if true, stop the script after redirecting
 # @param boolean apply string_sanitize_url to passed url
 # @return boolean
@@ -937,80 +939,28 @@ function print_project_access_levels_option_list( $p_val, $p_project_id = null )
 function print_language_option_list( $p_language ) {
 	$t_arr = config_get( 'language_choices_arr' );
 	$enum_count = count( $t_arr );
 	for( $i = 0;$i < $enum_count;$i++ ) {
 		$t_language = string_attribute( $t_arr[$i] );
 		echo '<option value="' . $t_language . '"';
 		check_selected( $t_language, $p_language );
 		echo '>' . $t_language . '</option>';
 	}
 }
 
-# @@@ preliminary support for multiple bug actions.
-function print_all_bug_action_option_list() {
-	$commands = array(
-		'MOVE' => lang_get( 'actiongroup_menu_move' ),
-		'COPY' => lang_get( 'actiongroup_menu_copy' ),
-		'ASSIGN' => lang_get( 'actiongroup_menu_assign' ),
-		'CLOSE' => lang_get( 'actiongroup_menu_close' ),
-		'DELETE' => lang_get( 'actiongroup_menu_delete' ),
-		'RESOLVE' => lang_get( 'actiongroup_menu_resolve' ),
-		'SET_STICKY' => lang_get( 'actiongroup_menu_set_sticky' ),
-		'UP_PRIOR' => lang_get( 'actiongroup_menu_update_priority' ),
-		'EXT_UPDATE_SEVERITY' => lang_get( 'actiongroup_menu_update_severity' ),
-		'UP_STATUS' => lang_get( 'actiongroup_menu_update_status' ),
-		'UP_CATEGORY' => lang_get( 'actiongroup_menu_update_category' ),
-		'VIEW_STATUS' => lang_get( 'actiongroup_menu_update_view_status' ),
-		'EXT_UPDATE_PRODUCT_BUILD' => lang_get( 'actiongroup_menu_update_product_build' ),
-		'EXT_ADD_NOTE' => lang_get( 'actiongroup_menu_add_note' ),
-		'EXT_ATTACH_TAGS' => lang_get( 'actiongroup_menu_attach_tags' ),
-	);
-
-	$t_project_id = helper_get_current_project();
-
-	if( ALL_PROJECTS != $t_project_id ) {
-		$t_user_id = auth_get_current_user_id();
-
-		if( access_has_project_level( config_get( 'update_bug_threshold' ), $t_project_id ) ) {
-			$commands['UP_FIXED_IN_VERSION'] = lang_get( 'actiongroup_menu_update_fixed_in_version' );
-		}
-
-		if( access_has_project_level( config_get( 'roadmap_update_threshold' ), $t_project_id ) ) {
-			$commands['UP_TARGET_VERSION'] = lang_get( 'actiongroup_menu_update_target_version' );
-		}
-
-		$t_custom_field_ids = custom_field_get_linked_ids( $t_project_id );
-
-		foreach( $t_custom_field_ids as $t_custom_field_id ) {
-			# if user has not access right to modify the field, then there is no
-			# point in showing it.
-			if( !custom_field_has_write_access_to_project( $t_custom_field_id, $t_project_id, $t_user_id ) ) {
-				continue;
-			}
-
-			$t_custom_field_def = custom_field_get_definition( $t_custom_field_id );
-			$t_command_id = 'custom_field_' . $t_custom_field_id;
-			$t_command_caption = sprintf( lang_get( 'actiongroup_menu_update_field' ), lang_get_defaulted( $t_custom_field_def['name'] ) );
-			$commands[$t_command_id] = string_display( $t_command_caption );
-		}
-	}
-
-	$t_custom_group_actions = config_get( 'custom_group_actions' );
-
-	foreach( $t_custom_group_actions as $t_custom_group_action ) {
-		# use label if provided to get the localized text, otherwise fallback to action name.
-		if( isset( $t_custom_group_action['label'] ) ) {
-			$commands[$t_custom_group_action['action']] = lang_get_defaulted( $t_custom_group_action['label'] );
-		} else {
-			$commands[$t_custom_group_action['action']] = lang_get_defaulted( $t_custom_group_action['action'] );
-		}
-	}
-
-	while( list( $key, $val ) = each( $commands ) ) {
-		echo '<option value="' . $key . '">' . $val . '</option>';
+/**
+ * Print a dropdown list of all bug actions available to a user for a specified
+ * set of projects.
+ * @param array $p_projects An array containing one or more project IDs
+ * @return null
+ */
+function print_all_bug_action_option_list( $p_project_ids = null ) {
+	$t_commands = bug_group_action_get_commands( $p_project_ids);
+	while( list( $t_action_id, $t_action_label ) = each( $t_commands ) ) {
+		echo '<option value="' . $t_action_id . '">' . $t_action_label . '</option>';
 	}
 }
 
 # --------------------
 # list of users that are NOT in the specified project and that are enabled
 # if no project is specified use the current project
 # also exclude any administrators
diff --git a/my_view_inc.php b/my_view_inc.php
index cb73581..1120901 100644
--- a/my_view_inc.php
+++ b/my_view_inc.php
@@ -50,8 +50,6 @@ if( $t_filter === false ) {
 $t_sort = $t_filter['sort'];
 $t_dir = $t_filter['dir'];
 
-$t_checkboxes_exist = false;
-
 $t_icon_path = config_get( 'icon_path' );
 $t_update_bug_threshold = config_get( 'update_bug_threshold' );
 $t_bug_resolved_status_threshold = config_get( 'bug_resolved_status_threshold' );
diff --git a/view_all_bug_page.php b/view_all_bug_page.php
index 557bab5..ab5de02 100644
--- a/view_all_bug_page.php
+++ b/view_all_bug_page.php
@@ -1,76 +1,78 @@
 <?php
 # MantisBT - a php based bugtracking system
 
 # MantisBT is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation, either version 2 of the License, or
 # (at your option) any later version.
 #
 # MantisBT is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License
 # along with MantisBT.  If not, see <http://www.gnu.org/licenses/>.
 
 	/**
 	 * @package MantisBT
 	 * @copyright Copyright (C) 2000 - 2002  Kenzaburo Ito - kenito@300baud.org
 	 * @copyright Copyright (C) 2002 - 2011  MantisBT Team - mantisbt-dev@lists.sourceforge.net
 	 * @link http://www.mantisbt.org
 	 */
 	 /**
 	  * MantisBT Core API's
 	  */
 	require_once( 'core.php' );
 
 	require_once( 'compress_api.php' );
 	require_once( 'filter_api.php' );
 	require_once( 'last_visited_api.php' );
 
 	auth_ensure_user_authenticated();
 
 	$f_page_number		= gpc_get_int( 'page_number', 1 );
 
 	$t_per_page = null;
 	$t_bug_count = null;
 	$t_page_count = null;
 
 	$rows = filter_get_bug_rows( $f_page_number, $t_per_page, $t_page_count, $t_bug_count, null, null, null, true );
 	if ( $rows === false ) {
 		print_header_redirect( 'view_all_set.php?type=0' );
 	}
 
 	$t_bugslist = Array();
 	$t_users_handlers = Array();
 	$t_project_ids  = Array();
 	$t_row_count = count( $rows );
 	for($i=0; $i < $t_row_count; $i++) {
 		array_push($t_bugslist, $rows[$i]->id );
 		$t_users_handlers[] = $rows[$i]->handler_id;
 		$t_project_ids[] = $rows[$i]->project_id;
 	}
-	user_cache_array_rows( array_unique( $t_users_handlers ) );
-	project_cache_array_rows( array_unique( $t_project_ids ) );
-	
+	$t_unique_users_handlers = array_unique( $t_users_handlers );
+	$t_unique_project_ids = array_unique( $t_project_ids );
+	user_cache_array_rows( $t_unique_users_handlers );
+	project_cache_array_rows( $t_unique_project_ids );
+
 	gpc_set_cookie( config_get( 'bug_list_cookie' ), implode( ',', $t_bugslist ) );
 
 	compress_enable();
 
 	# don't index view issues pages
 	html_robots_noindex();
 
 	html_page_top1( lang_get( 'view_bugs_link' ) );
 
 	if ( current_user_get_pref( 'refresh_delay' ) > 0 ) {
 		html_meta_redirect( 'view_all_bug_page.php?page_number='.$f_page_number, current_user_get_pref( 'refresh_delay' )*60 );
 	}
 
 	html_page_top2();
 
 	print_recently_visited();
 
 	include( dirname( __FILE__ ) . DIRECTORY_SEPARATOR . 'view_all_inc.php' );
 
 	html_page_bottom();
diff --git a/view_all_inc.php b/view_all_inc.php
index 25e9402..56b16b6 100644
--- a/view_all_inc.php
+++ b/view_all_inc.php
@@ -1,266 +1,265 @@
 <?php
 # MantisBT - a php based bugtracking system
 
 # MantisBT is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation, either version 2 of the License, or
 # (at your option) any later version.
 #
 # MantisBT is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License
 # along with MantisBT.  If not, see <http://www.gnu.org/licenses/>.
 
 	/**
 	 * @package MantisBT
 	 * @copyright Copyright (C) 2000 - 2002  Kenzaburo Ito - kenito@300baud.org
 	 * @copyright Copyright (C) 2002 - 2011  MantisBT Team - mantisbt-dev@lists.sourceforge.net
 	 * @link http://www.mantisbt.org
 	 */
 
 	/**
 	 * requires current_user_api
 	 */
 	require_once( 'current_user_api.php' );
 	/**
 	 * requires bug_api
 	 */
 	require_once( 'bug_api.php' );
 	/**
 	 * requires string_api
 	 */
 	require_once( 'string_api.php' );
 	/**
 	 * requires date_api
 	 */
 	require_once( 'date_api.php' );
 	/**
 	 * requires icon_api
 	 */
 	require_once( 'icon_api.php' );
 	/**
 	 * requires columns_api
 	 */
 	require_once( 'columns_api.php' );
 
 	$t_filter = current_user_get_bug_filter();
 	# NOTE: this check might be better placed in current_user_get_bug_filter()
 	if ( $t_filter === false ) {
 		$t_filter = filter_get_default();
 	}
 
 	list( $t_sort, ) = explode( ',', $t_filter['sort'] );
 	list( $t_dir, ) = explode( ',', $t_filter['dir'] );
 
-	$t_checkboxes_exist = false;
+	$g_checkboxes_exist = false;
 
 	$t_icon_path = config_get( 'icon_path' );
-	$t_update_bug_threshold = config_get( 'update_bug_threshold' );
 
 	# Improve performance by caching category data in one pass
 	if ( helper_get_current_project() > 0 ) {
 		category_get_all_rows( helper_get_current_project() );
 	} else {
 		$t_categories = array();
 		foreach ($rows as $t_row) {
 			$t_categories[] = $t_row->category_id;
 		}
 		category_cache_array_rows( array_unique( $t_categories ) );
 	}
 	$t_columns = helper_get_columns_to_view( COLUMNS_TARGET_VIEW_PAGE );
 
 	$col_count = count( $t_columns );
 
 	$t_filter_position = config_get( 'filter_position' );
 
 	# -- ====================== FILTER FORM ========================= --
 	if ( ( $t_filter_position & FILTER_POSITION_TOP ) == FILTER_POSITION_TOP ) {
 		filter_draw_selection_area( $f_page_number );
 	}
 	# -- ====================== end of FILTER FORM ================== --
 
 
 	# -- ====================== BUG LIST ============================ --
 
 	$t_status_legend_position = config_get( 'status_legend_position' );
 
 	if ( $t_status_legend_position == STATUS_LEGEND_POSITION_TOP || $t_status_legend_position == STATUS_LEGEND_POSITION_BOTH ) {
 		html_status_legend();
 	}
 
 	/** @todo (thraxisp) this may want a browser check  ( MS IE >= 5.0, Mozilla >= 1.0, Safari >=1.2, ...) */
 	if ( ( ON == config_get( 'dhtml_filters' ) ) && ( ON == config_get( 'use_javascript' ) ) ){
 		?>
 		<script type="text/javascript" language="JavaScript">
 		<!--
 			var string_loading = '<?php echo lang_get( 'loading' );?>';
 		// -->
 		</script>
 		<?php
 			html_javascript_link( 'xmlhttprequest.js');
 			html_javascript_link( 'addLoadEvent.js');
 			html_javascript_link( 'dynamic_filters.js');
 	}
 ?>
 <br />
 <form name="bug_action" method="get" action="bug_actiongroup_page.php">
 <?php # CSRF protection not required here - form does not result in modifications ?>
 <table id="buglist" class="width100" cellspacing="1">
 <tr>
 	<td class="form-title" colspan="<?php echo $col_count; ?>">
 		<span class="floatleft">
 		<?php
 			# -- Viewing range info --
 
 			$v_start = 0;
 			$v_end   = 0;
 
 			if ( count( $rows ) > 0 ) {
 				$v_start = $t_filter['per_page'] * ($f_page_number - 1) + 1;
 				$v_end = $v_start + count( $rows ) - 1;
 			}
 
 			echo lang_get( 'viewing_bugs_title' );
 			echo " ($v_start - $v_end / $t_bug_count)";
 		?> </span>
 
 		<span class="floatleft small"> <?php
 				# -- Print and Export links --
 				echo '&#160;';
 				print_bracket_link( 'print_all_bug_page.php', lang_get( 'print_all_bug_page_link' ) );
 				echo '&#160;';
 				print_bracket_link( 'csv_export.php', lang_get( 'csv_export' ) );
 				echo '&#160;';
 				print_bracket_link( 'excel_xml_export.php', lang_get( 'excel_export' ) );
 
 				$t_event_menu_options = $t_links = event_signal( 'EVENT_MENU_FILTER' );
 
 				foreach ( $t_event_menu_options as $t_plugin => $t_plugin_menu_options ) {
 					foreach ( $t_plugin_menu_options as $t_callback => $t_callback_menu_options ) {
 						if ( !is_array( $t_callback_menu_options ) ) {
 							$t_callback_menu_options = array( $t_callback_menu_options );
 						}
 
 						foreach ( $t_callback_menu_options as $t_menu_option ) {
 						    if ( $t_menu_option ) {
 							    print_bracket_link_prepared( $t_menu_option );
 						    }
 						}
 					}
 				}
 		?> </span>
 
 		<span class="floatright small"><?php
 			# -- Page number links --
 			$f_filter	= gpc_get_int( 'filter', 0);
 			print_page_links( 'view_all_bug_page.php', 1, $t_page_count, (int)$f_page_number, $f_filter );
 		?> </span>
 	</td>
 </tr>
 <?php # -- Bug list column header row -- ?>
 <tr class="row-category">
 <?php
 		foreach( $t_columns as $t_column ) {
 			$t_title_function = 'print_column_title';
 			helper_call_custom_function( $t_title_function, array( $t_column ) );
 		}
 ?>
 </tr>
 
 <?php # -- Spacer row -- ?>
 <tr class="spacer">
 	<td colspan="<?php echo $col_count; ?>"></td>
 </tr>
 <?php
 	function write_bug_rows ( $p_rows )
 	{
 		global $t_columns, $t_filter;
 
 		$t_in_stickies = ( $t_filter && ( 'on' == $t_filter['sticky_issues'] ) );
 
 		# pre-cache custom column data
 		columns_plugin_cache_issue_data( $p_rows );
 
 		# -- Loop over bug rows --
 
 		$t_rows = count( $p_rows );
 		for( $i=0; $i < $t_rows; $i++ ) {
 			$t_row = $p_rows[$i];
 
 			if ( ( 0 == $t_row->sticky ) && ( 0 == $i ) ) {
 				$t_in_stickies = false;
 			}
 			if ( ( 0 == $t_row->sticky ) && $t_in_stickies ) {	# demarcate stickies, if any have been shown
 ?>
                <tr>
                        <td class="left" colspan="<?php echo count( $t_columns ); ?>" bgcolor="#999999">&#160;</td>
                </tr>
 <?php
 				$t_in_stickies = false;
 			}
 
 			# choose color based on status
 			$status_color = get_status_color( $t_row->status );
 
 			echo '<tr bgcolor="', $status_color, '" border="1" valign="top">';
 
 			foreach( $t_columns as $t_column ) {
 				$t_column_value_function = 'print_column_value';
 				helper_call_custom_function( $t_column_value_function, array( $t_column, $t_row ) );
 			}
 
 			echo '</tr>';
 		}
 	}
 
 
 	write_bug_rows($rows);
 	# -- ====================== end of BUG LIST ========================= --
 
 	# -- ====================== MASS BUG MANIPULATION =================== --
 ?>
 	<tr>
 		<td class="left" colspan="<?php echo $col_count; ?>">
 			<span class="floatleft">
 <?php
-		if ( $t_checkboxes_exist && ON == config_get( 'use_javascript' ) ) {
+		if ( $g_checkboxes_exist && ON == config_get( 'use_javascript' ) ) {
 			echo "<input type=\"checkbox\" name=\"all_bugs\" value=\"all\" onclick=\"checkall('bug_action', this.form.all_bugs.checked)\" /><span class=\"small\">" . lang_get( 'select_all' ) . '</span>';
 		}
 
-		if ( $t_checkboxes_exist ) {
+		if ( $g_checkboxes_exist ) {
 ?>
 			<select name="action">
-				<?php print_all_bug_action_option_list() ?>
+				<?php print_all_bug_action_option_list( $t_unique_project_ids ) ?>
 			</select>
 			<input type="submit" class="button" value="<?php echo lang_get( 'ok' ); ?>" />
 <?php
 		} else {
 			echo '&#160;';
 		}
 ?>			</span>
 			<span class="floatright small">
 				<?php
 					$f_filter	= gpc_get_int( 'filter', 0);
 					print_page_links( 'view_all_bug_page.php', 1, $t_page_count, (int)$f_page_number, $f_filter );
 				?>
 			</span>
 		</td>
 	</tr>
 <?php # -- ====================== end of MASS BUG MANIPULATION ========================= -- ?>
 </table>
 </form>
 
 <?php
 
 	if ( $t_status_legend_position == STATUS_LEGEND_POSITION_BOTTOM || $t_status_legend_position == STATUS_LEGEND_POSITION_BOTH ) {
 		html_status_legend();
 	}
 
 	# -- ====================== FILTER FORM ========================= --
 	if ( ( $t_filter_position & FILTER_POSITION_BOTTOM ) == FILTER_POSITION_BOTTOM ) {
 		filter_draw_selection_area( $f_page_number );
 	}
 	# -- ====================== end of FILTER FORM ================== --
