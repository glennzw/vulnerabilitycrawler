   Create shell-escape-safe cpp options in the non-pathetic-cpp case.
   
   Fixes CVE-2011-0465.
   
   Signed-off-by: Matthias Hopf <mhopf@suse.de>
   Reviewed-by: Adam Jackson <ajax@redhat.com>

static void fatal(char *, ...);
static void addstring ( String *arg, const char *s );
static void FormatEntries ( Buffer *buffer, Entries *entries );
static void StoreProperty ( Display *dpy, Window root, Atom res_prop );
static void Process ( int scrno, Bool doScreen, Bool execute );
	    addstring(buff, " -D");
    } else
	addstring(buff, "-D");
    addstring(buff, title);
    if (value && (value[0] != '\0')) {
	addstring(buff, "=");
	addstring(buff, value);
    }
}

static void
AddDefQ(String *buff, char *title, char *value)
{
#ifdef PATHETICCPP
    else
#endif
    if (value && (value[0] != '\0')) {
	AddDef(buff, title, "\"");
	addstring(buff, value);
	addstring(buff, "\"");
    } else
	AddDef(buff, title, NULL);
}

static void
AddSimpleDef(String *buff, char *title)
{
    AddDef(buff, title, (char *)NULL);
}

static void
AddDefTok(String *buff, char *prefix, char *title)
{
    char *s;
    char name[512];
    char c;

    snprintf(name, sizeof(name), "%s%s", prefix, title);
    for (s = name; (c = *s); s++) {
	if (!isalpha(c) && !isdigit(c) && c != '_')
	    *s = '_';
    }
    AddSimpleDef(buff, name);
}

static void
	    addstring(buff, " -U");
    } else
	addstring(buff, "-U");
    addstring(buff, title);
}

static void 
    }
    if (!*server || !strcmp(server, "unix") || !strcmp(server, "localhost"))
	strcpy(server, client);
    AddDef(defs, "HOST", server); /* R3 compatibility */
    AddDef(defs, "SERVERHOST", server);
    AddDefTok(defs, "SRVR_", server);
    AddNum(defs, "DISPLAY_NUM", n);
    AddDef(defs, "CLIENTHOST", client);
    AddDefTok(defs, "CLNT_", client);
    AddNum(defs, "VERSION", ProtocolVersion(display));
    AddNum(defs, "REVISION", ProtocolRevision(display));
    AddNum(defs, "Y_RESOLUTION", Resolution(screen->height,screen->mheight));
    AddNum(defs, "PLANES", DisplayPlanes(display, scrno));
    AddNum(defs, "BITS_PER_RGB", visual->bits_per_rgb);
    AddDef(defs, "CLASS", ClassNames[visual->class]);
    snprintf(name, sizeof(name), "CLASS_%s", ClassNames[visual->class]);
    AddNum(defs, name, (int)visual->visualid);
    switch(visual->class) {
    arg->used += strlen(s);
}   


int
main(int argc, char *argv[])
		continue;
	    } else if (arg[1] == 'I') {
		addstring(&includes, " ");
		addstring(&includes, arg);
		continue;
	    } else if (arg[1] == 'U' || arg[1] == 'D') {
		if (num_cmd_defines < MAX_CMD_DEFINES) {
