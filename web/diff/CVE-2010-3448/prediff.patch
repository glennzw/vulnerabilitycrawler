   thinkpad-acpi: lock down video output state access
   
   Given the right combination of ThinkPad and X.org, just reading the
   video output control state is enough to hard-crash X.org.
   
   Until the day I somehow find out a model or BIOS cut date to not
   provide this feature to ThinkPads that can do video switching through
   X RandR, change permissions so that only processes with CAP_SYS_ADMIN
   can access any sort of video output control state.
   
   This bug could be considered a local DoS I suppose, as it allows any
   non-privledged local user to cause some versions of X.org to
   hard-crash some ThinkPads.
   
   Reported-by: Jidanni <jidanni@jidanni.org>
   Signed-off-by: Henrique de Moraes Holschuh <hmh@hmh.eng.br>
   Cc: stable@kernel.org
	echo expand_toggle > /proc/acpi/ibm/video
	echo video_switch > /proc/acpi/ibm/video

Each video output device can be enabled or disabled individually.
Reading /proc/acpi/ibm/video shows the status of each device.

	  server running, phase of the moon, and the current mood of
	  Schroedinger's cat.  If you can use X.org's RandR to control
	  your ThinkPad's video output ports instead of this feature,
	  don't think twice: do it and say N here to save some memory.

	  If you are not sure, say Y here.

config THINKPAD_ACPI_HOTKEY_POLL
	bool "Support NVRAM polling for hot keys"
	char param[32];

	int (*init) (struct ibm_init_struct *);
	struct ibm_struct *data;
};

		return 0;
	}

	status = video_outputsw_get();
	if (status < 0)
		return status;
	if (video_supported == TPACPI_VIDEO_NONE)
		return -ENODEV;

	enable = 0;
	disable = 0;

		"%s installed\n", ibm->name);

	if (ibm->read) {
		mode_t mode;

		mode = S_IRUGO;
		if (ibm->write)
			mode |= S_IWUSR;
		entry = proc_create_data(ibm->name, mode, proc_dir,
#ifdef CONFIG_THINKPAD_ACPI_VIDEO
	{
		.init = video_init,
		.data = &video_driver_data,
	},
#endif
