commit cf1ec146f7c6acdc6697032b3aaafc68ffacdcac
Author: Rodrigo Kumpera <kumpera@gmail.com>
Date:   Thu Nov 25 14:23:31 2010 -0200

    Handle invalid instantiation of generic methods.
    
    	* verify.c: Add new function to internal verifier API to check
    	method instantiations.
    
    	* reflection.c (mono_reflection_bind_generic_method_parameters):
    	Check the instantiation before returning it.
    
    	Fixes #655847

diff --git a/mono/metadata/reflection.c b/mono/metadata/reflection.c
index d43ad08..15e6496 100644
--- a/mono/metadata/reflection.c
+++ b/mono/metadata/reflection.c
@@ -10542,72 +10542,75 @@ MonoReflectionMethod*
 mono_reflection_bind_generic_method_parameters (MonoReflectionMethod *rmethod, MonoArray *types)
 {
 	MonoClass *klass;
 	MonoMethod *method, *inflated;
 	MonoMethodInflated *imethod;
 	MonoGenericContext tmp_context;
 	MonoGenericInst *ginst;
 	MonoType **type_argv;
 	int count, i;
 
 	MONO_ARCH_SAVE_REGS;
 
 	/*FIXME but this no longer should happen*/
 	if (!strcmp (rmethod->object.vtable->klass->name, "MethodBuilder")) {
 #ifndef DISABLE_REFLECTION_EMIT
 		MonoReflectionMethodBuilder *mb = NULL;
 		MonoReflectionTypeBuilder *tb;
 		MonoClass *klass;
 
 		mb = (MonoReflectionMethodBuilder *) rmethod;
 		tb = (MonoReflectionTypeBuilder *) mb->type;
 		klass = mono_class_from_mono_type (mono_reflection_type_get_handle ((MonoReflectionType*)tb));
 
 		method = methodbuilder_to_mono_method (klass, mb);
 #else
 		g_assert_not_reached ();
 		method = NULL;
 #endif
 	} else {
 		method = rmethod->method;
 	}
 
 	klass = method->klass;
 
 	if (method->is_inflated)
 		method = ((MonoMethodInflated *) method)->declaring;
 
 	count = mono_method_signature (method)->generic_param_count;
 	if (count != mono_array_length (types))
 		return NULL;
 
 	type_argv = g_new0 (MonoType *, count);
 	for (i = 0; i < count; i++) {
 		MonoReflectionType *garg = mono_array_get (types, gpointer, i);
 		type_argv [i] = mono_reflection_type_get_handle (garg);
 	}
 	ginst = mono_metadata_get_generic_inst (count, type_argv);
 	g_free (type_argv);
 
 	tmp_context.class_inst = klass->generic_class ? klass->generic_class->context.class_inst : NULL;
 	tmp_context.method_inst = ginst;
 
 	inflated = mono_class_inflate_generic_method (method, &tmp_context);
 	imethod = (MonoMethodInflated *) inflated;
 
 	/*FIXME but I think this is no longer necessary*/
 	if (method->klass->image->dynamic) {
 		MonoDynamicImage *image = (MonoDynamicImage*)method->klass->image;
 		/*
 		 * This table maps metadata structures representing inflated methods/fields
 		 * to the reflection objects representing their generic definitions.
 		 */
 		mono_loader_lock ();
 		mono_g_hash_table_insert (image->generic_def_objects, imethod, rmethod);
 		mono_loader_unlock ();
 	}
+
+	if (!mono_verifier_is_method_valid_generic_instantiation (inflated))
+		mono_raise_exception (mono_get_exception_argument ("typeArguments", "Invalid generic arguments"));
 	
 	return mono_method_get_object (mono_object_domain (rmethod), inflated, NULL);
 }
 
 #ifndef DISABLE_REFLECTION_EMIT
 
diff --git a/mono/metadata/verify-internals.h b/mono/metadata/verify-internals.h
index 1d0fb75..e01325e 100644
--- a/mono/metadata/verify-internals.h
+++ b/mono/metadata/verify-internals.h
@@ -22,6 +22,7 @@ gboolean mono_verifier_is_enabled_for_class (MonoClass *klass) MONO_INTERNAL;
 gboolean mono_verifier_is_method_full_trust (MonoMethod *method) MONO_INTERNAL;
 gboolean mono_verifier_is_class_full_trust (MonoClass *klass) MONO_INTERNAL;
 gboolean mono_verifier_class_is_valid_generic_instantiation (MonoClass *class) MONO_INTERNAL;
+gboolean mono_verifier_is_method_valid_generic_instantiation (MonoMethod *method) MONO_INTERNAL;
 
 gboolean mono_verifier_verify_class (MonoClass *klass) MONO_INTERNAL;
 
diff --git a/mono/metadata/verify.c b/mono/metadata/verify.c
index a1d5bcf..81eb1ef 100644
--- a/mono/metadata/verify.c
+++ b/mono/metadata/verify.c
@@ -6040,8 +6040,16 @@ gboolean
 mono_verifier_class_is_valid_generic_instantiation (MonoClass *class)
 {
 	return mono_class_is_valid_generic_instantiation (NULL, class);
 }
 
+gboolean
+mono_verifier_is_method_valid_generic_instantiation (MonoMethod *method)
+{
+	if (!method->is_inflated)
+		return TRUE;
+	return mono_method_is_valid_generic_instantiation (NULL, method);
+}
+
 #else
 
 gboolean
@@ -6111,7 +6119,14 @@ gboolean
 mono_verifier_class_is_valid_generic_instantiation (MonoClass *class)
 {
 	return TRUE;
 }
 
+gboolean
+mono_verifier_is_method_valid_generic_instantiation (MonoMethod *method)
+{
+	return TRUE;
+}
+
+
 
 #endif
