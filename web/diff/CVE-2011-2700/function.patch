commit dc6b845044ccb7e9e6f3b7e71bd179b3cf0223b6
Author: Mauro Carvalho Chehab <mchehab@redhat.com>
Date:   Sun Jul 17 00:24:37 2011 -0300

    si4713-i2c: avoid potential buffer overflow on si4713
    
    While compiling it with Fedora 15, I noticed this issue:
    
      inlined from ‘si4713_write_econtrol_string’ at drivers/media/radio/si4713-i2c.c:1065:24:
      arch/x86/include/asm/uaccess_32.h:211:26: error: call to ‘copy_from_user_overflow’ declared with attribute error: copy_from_user() buffer size is not provably correct
    
    Cc: stable@kernel.org
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>
    Acked-by: Sakari Ailus <sakari.ailus@maxwell.research.nokia.com>
    Acked-by: Eduardo Valentin <edubezval@gmail.com>
    Reviewed-by: Eugene Teo <eugeneteo@kernel.sg>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/drivers/media/radio/si4713-i2c.c b/drivers/media/radio/si4713-i2c.c
index deca2e0..c9f4a8e 100644
--- a/drivers/media/radio/si4713-i2c.c
+++ b/drivers/media/radio/si4713-i2c.c
@@ -1019,66 +1019,66 @@ static int si4713_queryctrl(struct v4l2_subdev *sd, struct v4l2_queryctrl *qc);
 static int si4713_write_econtrol_string(struct si4713_device *sdev,
 				struct v4l2_ext_control *control)
 {
 	struct v4l2_queryctrl vqc;
 	int len;
 	s32 rval = 0;
 
 	vqc.id = control->id;
 	rval = si4713_queryctrl(&sdev->sd, &vqc);
 	if (rval < 0)
 		goto exit;
 
 	switch (control->id) {
 	case V4L2_CID_RDS_TX_PS_NAME: {
 		char ps_name[MAX_RDS_PS_NAME + 1];
 
 		len = control->size - 1;
-		if (len > MAX_RDS_PS_NAME) {
+		if (len < 0 || len > MAX_RDS_PS_NAME) {
 			rval = -ERANGE;
 			goto exit;
 		}
 		rval = copy_from_user(ps_name, control->string, len);
 		if (rval) {
 			rval = -EFAULT;
 			goto exit;
 		}
 		ps_name[len] = '\0';
 
 		if (strlen(ps_name) % vqc.step) {
 			rval = -ERANGE;
 			goto exit;
 		}
 
 		rval = si4713_set_rds_ps_name(sdev, ps_name);
 	}
 		break;
 
 	case V4L2_CID_RDS_TX_RADIO_TEXT: {
 		char radio_text[MAX_RDS_RADIO_TEXT + 1];
 
 		len = control->size - 1;
-		if (len > MAX_RDS_RADIO_TEXT) {
+		if (len < 0 || len > MAX_RDS_RADIO_TEXT) {
 			rval = -ERANGE;
 			goto exit;
 		}
 		rval = copy_from_user(radio_text, control->string, len);
 		if (rval) {
 			rval = -EFAULT;
 			goto exit;
 		}
 		radio_text[len] = '\0';
 
 		if (strlen(radio_text) % vqc.step) {
 			rval = -ERANGE;
 			goto exit;
 		}
 
 		rval = si4713_set_rds_radio_text(sdev, radio_text);
 	}
 		break;
 
 	default:
 		rval = -EINVAL;
 		break;
 	};
 
