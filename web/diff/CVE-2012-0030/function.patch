commit 3d4ffb64f1e18117240c26809788528979e3bd15
Author: Thierry Carrez <thierry@openstack.org>
Date:   Wed Jan 11 13:48:29 2012 +0100

    Do not overwrite project_id from request params
    
    Prevent project_id overwriting from OSAPI request parameters.
    The patch is actually very simple (nova/api/openstack/wsgi.py) but
    needs significant test adjustments (nova/tests/*) to pass.
    
    Fixes bug 904072. Patch from Vish Ishaya and Mark McLoughlin.
    
    (cherry picked from commit c9c09bd60e7a0e0258d218a31d7878755bea1395)
    
    Change-Id: I66ea0f178ce6271ec1020e9f1a73bd4e8c83ddab

diff --git a/nova/api/openstack/wsgi.py b/nova/api/openstack/wsgi.py
index 72e8f1b..f895b0d 100644
--- a/nova/api/openstack/wsgi.py
+++ b/nova/api/openstack/wsgi.py
@@ -447,82 +447,84 @@ class ResponseSerializer(object):
 class Resource(wsgi.Application):
     """WSGI app that handles (de)serialization and controller dispatch.
 
     WSGI app that reads routing information supplied by RoutesMiddleware
     and calls the requested action method upon its controller.  All
     controller action methods must accept a 'req' argument, which is the
     incoming wsgi.Request. If the operation is a PUT or POST, the controller
     method must also accept a 'body' argument (the deserialized request body).
     They may raise a webob.exc exception or return a dict, which will be
     serialized by requested content type.
 
     """
 
     def __init__(self, controller, deserializer=None, serializer=None):
         """
         :param controller: object that implement methods created by routes lib
         :param deserializer: object that can serialize the output of a
                              controller into a webob response
         :param serializer: object that can deserialize a webob request
                            into necessary pieces
 
         """
         self.controller = controller
         self.deserializer = deserializer or RequestDeserializer()
         self.serializer = serializer or ResponseSerializer()
 
     @webob.dec.wsgify(RequestClass=Request)
     def __call__(self, request):
         """WSGI method that controls (de)serialization and method dispatch."""
 
         LOG.info("%(method)s %(url)s" % {"method": request.method,
                                           "url": request.url})
 
         try:
             action, args, accept = self.deserializer.deserialize(request)
         except exception.InvalidContentType:
             msg = _("Unsupported Content-Type")
             return faults.Fault(webob.exc.HTTPBadRequest(explanation=msg))
         except exception.MalformedRequestBody:
             msg = _("Malformed request body")
             return faults.Fault(webob.exc.HTTPBadRequest(explanation=msg))
 
         project_id = args.pop("project_id", None)
-        if 'nova.context' in request.environ and project_id:
-            request.environ['nova.context'].project_id = project_id
+        if ('nova.context' in request.environ and project_id
+            and project_id != request.environ['nova.context'].project_id):
+            msg = _("Malformed request url")
+            return faults.Fault(webob.exc.HTTPBadRequest(explanation=msg))
 
         try:
             action_result = self.dispatch(request, action, args)
         except faults.Fault as ex:
             LOG.info(_("Fault thrown: %s"), unicode(ex))
             action_result = ex
         except webob.exc.HTTPException as ex:
             LOG.info(_("HTTP exception thrown: %s"), unicode(ex))
             action_result = faults.Fault(ex)
 
         if type(action_result) is dict or action_result is None:
             response = self.serializer.serialize(action_result,
                                                  accept,
                                                  action=action)
         else:
             response = action_result
 
         try:
             msg_dict = dict(url=request.url, status=response.status_int)
             msg = _("%(url)s returned with HTTP %(status)d") % msg_dict
         except AttributeError, e:
             msg_dict = dict(url=request.url, e=e)
             msg = _("%(url)s returned a fault: %(e)s" % msg_dict)
 
         LOG.info(msg)
 
         return response
 
     def dispatch(self, request, action, action_args):
         """Find action-spefic method on controller and call it."""
 
         controller_method = getattr(self.controller, action)
         try:
             return controller_method(req=request, **action_args)
         except TypeError as exc:
             LOG.exception(exc)
             return faults.Fault(webob.exc.HTTPBadRequest())
diff --git a/nova/tests/api/openstack/contrib/test_createserverext.py b/nova/tests/api/openstack/contrib/test_createserverext.py
index 078b72d..5b220ce 100644
--- a/nova/tests/api/openstack/contrib/test_createserverext.py
+++ b/nova/tests/api/openstack/contrib/test_createserverext.py
@@ -81,335 +81,335 @@ def return_instance_add_security_group(context, instance_id,
 class CreateserverextTest(test.TestCase):
 
     def setUp(self):
         super(CreateserverextTest, self).setUp()
 
     def tearDown(self):
         super(CreateserverextTest, self).tearDown()
 
     def _setup_mock_compute_api(self):
 
         class MockComputeAPI(nova.compute.API):
 
             def __init__(self):
                 self.injected_files = None
                 self.networks = None
                 self.user_data = None
                 self.db = db
 
             def create(self, *args, **kwargs):
                 if 'injected_files' in kwargs:
                     self.injected_files = kwargs['injected_files']
                 else:
                     self.injected_files = None
 
                 if 'requested_networks' in kwargs:
                     self.networks = kwargs['requested_networks']
                 else:
                     self.networks = None
 
                 if 'user_data' in kwargs:
                     self.user_data = kwargs['user_data']
 
                 return [{'id': '1234', 'display_name': 'fakeinstance',
                          'uuid': FAKE_UUID,
                          'user_id': 'fake',
                          'project_id': 'fake',
                          'created_at': "",
                          'updated_at': ""}]
 
             def set_admin_password(self, *args, **kwargs):
                 pass
 
         def make_stub_method(canned_return):
             def stub_method(*args, **kwargs):
                 return canned_return
             return stub_method
 
         compute_api = MockComputeAPI()
         self.stubs.Set(nova.compute, 'API', make_stub_method(compute_api))
         self.stubs.Set(
             nova.api.openstack.create_instance_helper.CreateInstanceHelper,
             '_get_kernel_ramdisk_from_image', make_stub_method((1, 1)))
         return compute_api
 
     def _create_security_group_request_dict(self, security_groups):
         server = {}
         server['name'] = 'new-server-test'
         server['imageRef'] = 1
         server['flavorRef'] = 1
         if security_groups is not None:
             sg_list = []
             for name in security_groups:
                 sg_list.append({'name': name})
             server['security_groups'] = sg_list
         return {'server': server}
 
     def _create_networks_request_dict(self, networks):
         server = {}
         server['name'] = 'new-server-test'
         server['imageRef'] = 1
         server['flavorRef'] = 1
         if networks is not None:
             network_list = []
             for uuid, fixed_ip in networks:
                 network_list.append({'uuid': uuid, 'fixed_ip': fixed_ip})
             server['networks'] = network_list
         return {'server': server}
 
     def _create_user_data_request_dict(self, user_data):
         server = {}
         server['name'] = 'new-server-test'
         server['imageRef'] = 1
         server['flavorRef'] = 1
         server['user_data'] = user_data
         return {'server': server}
 
     def _get_create_request_json(self, body_dict):
-        req = webob.Request.blank('/v1.1/123/os-create-server-ext')
+        req = webob.Request.blank('/v1.1/fake/os-create-server-ext')
         req.headers['Content-Type'] = 'application/json'
         req.method = 'POST'
         req.body = json.dumps(body_dict)
         return req
 
     def _run_create_instance_with_mock_compute_api(self, request):
         compute_api = self._setup_mock_compute_api()
         response = request.get_response(fakes.wsgi_app())
         return compute_api, response
 
     def _format_xml_request_body(self, body_dict):
         server = body_dict['server']
         body_parts = []
         body_parts.extend([
             '<?xml version="1.0" encoding="UTF-8"?>',
             '<server xmlns="http://docs.rackspacecloud.com/servers/api/v1.1"',
             ' name="%s" imageRef="%s" flavorRef="%s">' % (
                     server['name'], server['imageRef'], server['flavorRef'])])
         if 'metadata' in server:
             metadata = server['metadata']
             body_parts.append('<metadata>')
             for item in metadata.iteritems():
                 body_parts.append('<meta key="%s">%s</meta>' % item)
             body_parts.append('</metadata>')
         if 'personality' in server:
             personalities = server['personality']
             body_parts.append('<personality>')
             for file in personalities:
                 item = (file['path'], file['contents'])
                 body_parts.append('<file path="%s">%s</file>' % item)
             body_parts.append('</personality>')
         if 'networks' in server:
             networks = server['networks']
             body_parts.append('<networks>')
             for network in networks:
                 item = (network['uuid'], network['fixed_ip'])
                 body_parts.append('<network uuid="%s" fixed_ip="%s"></network>'
                                   % item)
             body_parts.append('</networks>')
         body_parts.append('</server>')
         return ''.join(body_parts)
 
     def _get_create_request_xml(self, body_dict):
-        req = webob.Request.blank('/v1.1/123/os-create-server-ext')
+        req = webob.Request.blank('/v1.1/fake/os-create-server-ext')
         req.content_type = 'application/xml'
         req.accept = 'application/xml'
         req.method = 'POST'
         req.body = self._format_xml_request_body(body_dict)
         return req
 
     def _create_instance_with_networks_json(self, networks):
         body_dict = self._create_networks_request_dict(networks)
         request = self._get_create_request_json(body_dict)
         compute_api, response = \
             self._run_create_instance_with_mock_compute_api(request)
         return request, response, compute_api.networks
 
     def _create_instance_with_user_data_json(self, networks):
         body_dict = self._create_user_data_request_dict(networks)
         request = self._get_create_request_json(body_dict)
         compute_api, response = \
             self._run_create_instance_with_mock_compute_api(request)
         return request, response, compute_api.user_data
 
     def _create_instance_with_networks_xml(self, networks):
         body_dict = self._create_networks_request_dict(networks)
         request = self._get_create_request_xml(body_dict)
         compute_api, response = \
             self._run_create_instance_with_mock_compute_api(request)
         return request, response, compute_api.networks
 
     def test_create_instance_with_no_networks(self):
         request, response, networks = \
                 self._create_instance_with_networks_json(networks=None)
         self.assertEquals(response.status_int, 202)
         self.assertEquals(networks, None)
 
     def test_create_instance_with_no_networks_xml(self):
         request, response, networks = \
                 self._create_instance_with_networks_xml(networks=None)
         self.assertEquals(response.status_int, 202)
         self.assertEquals(networks, None)
 
     def test_create_instance_with_one_network(self):
         request, response, networks = \
             self._create_instance_with_networks_json([FAKE_NETWORKS[0]])
         self.assertEquals(response.status_int, 202)
         self.assertEquals(networks, [FAKE_NETWORKS[0]])
 
     def test_create_instance_with_one_network_xml(self):
         request, response, networks = \
             self._create_instance_with_networks_xml([FAKE_NETWORKS[0]])
         self.assertEquals(response.status_int, 202)
         self.assertEquals(networks, [FAKE_NETWORKS[0]])
 
     def test_create_instance_with_two_networks(self):
         request, response, networks = \
             self._create_instance_with_networks_json(FAKE_NETWORKS)
         self.assertEquals(response.status_int, 202)
         self.assertEquals(networks, FAKE_NETWORKS)
 
     def test_create_instance_with_two_networks_xml(self):
         request, response, networks = \
             self._create_instance_with_networks_xml(FAKE_NETWORKS)
         self.assertEquals(response.status_int, 202)
         self.assertEquals(networks, FAKE_NETWORKS)
 
     def test_create_instance_with_duplicate_networks(self):
         request, response, networks = \
             self._create_instance_with_networks_json(DUPLICATE_NETWORKS)
         self.assertEquals(response.status_int, 400)
         self.assertEquals(networks, None)
 
     def test_create_instance_with_duplicate_networks_xml(self):
         request, response, networks = \
             self._create_instance_with_networks_xml(DUPLICATE_NETWORKS)
         self.assertEquals(response.status_int, 400)
         self.assertEquals(networks, None)
 
     def test_create_instance_with_network_no_id(self):
         body_dict = self._create_networks_request_dict([FAKE_NETWORKS[0]])
         del body_dict['server']['networks'][0]['uuid']
         request = self._get_create_request_json(body_dict)
         compute_api, response = \
             self._run_create_instance_with_mock_compute_api(request)
         self.assertEquals(response.status_int, 400)
         self.assertEquals(compute_api.networks, None)
 
     def test_create_instance_with_network_no_id_xml(self):
         body_dict = self._create_networks_request_dict([FAKE_NETWORKS[0]])
         request = self._get_create_request_xml(body_dict)
         uuid = ' uuid="aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"'
         request.body = request.body.replace(uuid, '')
         compute_api, response = \
             self._run_create_instance_with_mock_compute_api(request)
         self.assertEquals(response.status_int, 400)
         self.assertEquals(compute_api.networks, None)
 
     def test_create_instance_with_network_invalid_id(self):
         request, response, networks = \
             self._create_instance_with_networks_json(INVALID_NETWORKS)
         self.assertEquals(response.status_int, 400)
         self.assertEquals(networks, None)
 
     def test_create_instance_with_network_invalid_id_xml(self):
         request, response, networks = \
             self._create_instance_with_networks_xml(INVALID_NETWORKS)
         self.assertEquals(response.status_int, 400)
         self.assertEquals(networks, None)
 
     def test_create_instance_with_network_empty_fixed_ip(self):
         networks = [('1', '')]
         request, response, networks = \
             self._create_instance_with_networks_json(networks)
         self.assertEquals(response.status_int, 400)
         self.assertEquals(networks, None)
 
     def test_create_instance_with_network_non_string_fixed_ip(self):
         networks = [('1', 12345)]
         request, response, networks = \
             self._create_instance_with_networks_json(networks)
         self.assertEquals(response.status_int, 400)
         self.assertEquals(networks, None)
 
     def test_create_instance_with_network_empty_fixed_ip_xml(self):
         networks = [('1', '')]
         request, response, networks = \
             self._create_instance_with_networks_xml(networks)
         self.assertEquals(response.status_int, 400)
         self.assertEquals(networks, None)
 
     def test_create_instance_with_network_no_fixed_ip(self):
         body_dict = self._create_networks_request_dict([FAKE_NETWORKS[0]])
         del body_dict['server']['networks'][0]['fixed_ip']
         request = self._get_create_request_json(body_dict)
         compute_api, response = \
             self._run_create_instance_with_mock_compute_api(request)
         self.assertEquals(response.status_int, 202)
         self.assertEquals(compute_api.networks,
                           [('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', None)])
 
     def test_create_instance_with_network_no_fixed_ip_xml(self):
         body_dict = self._create_networks_request_dict([FAKE_NETWORKS[0]])
         request = self._get_create_request_xml(body_dict)
         request.body = request.body.replace(' fixed_ip="10.0.1.12"', '')
         compute_api, response = \
             self._run_create_instance_with_mock_compute_api(request)
         self.assertEquals(response.status_int, 202)
         self.assertEquals(compute_api.networks,
                           [('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', None)])
 
     def test_create_instance_with_userdata(self):
         user_data_contents = '#!/bin/bash\necho "Oh no!"\n'
         user_data_contents = base64.b64encode(user_data_contents)
         request, response, user_data = \
                 self._create_instance_with_user_data_json(user_data_contents)
         self.assertEquals(response.status_int, 202)
         self.assertEquals(user_data, user_data_contents)
 
     def test_create_instance_with_userdata_none(self):
         user_data_contents = None
         request, response, user_data = \
                 self._create_instance_with_user_data_json(user_data_contents)
         self.assertEquals(response.status_int, 202)
         self.assertEquals(user_data, user_data_contents)
 
     def test_create_instance_with_userdata_with_non_b64_content(self):
         user_data_contents = '#!/bin/bash\necho "Oh no!"\n'
         request, response, user_data = \
                 self._create_instance_with_user_data_json(user_data_contents)
         self.assertEquals(response.status_int, 400)
         self.assertEquals(user_data, None)
 
     def test_create_instance_with_security_group_json(self):
         security_groups = ['test', 'test1']
         self.stubs.Set(nova.db.api, 'security_group_get_by_name',
                        return_security_group_get_by_name)
         self.stubs.Set(nova.db.api, 'instance_add_security_group',
                        return_instance_add_security_group)
         body_dict = self._create_security_group_request_dict(security_groups)
         request = self._get_create_request_json(body_dict)
         response = request.get_response(fakes.wsgi_app())
         self.assertEquals(response.status_int, 202)
 
     def test_get_server_by_id_verify_security_groups_json(self):
         self.stubs.Set(nova.db.api, 'instance_get', return_server_by_id)
-        req = webob.Request.blank('/v1.1/123/os-create-server-ext/1')
+        req = webob.Request.blank('/v1.1/fake/os-create-server-ext/1')
         req.headers['Content-Type'] = 'application/json'
         response = req.get_response(fakes.wsgi_app())
         self.assertEquals(response.status_int, 200)
         res_dict = json.loads(response.body)
         expected_security_group = [{"name": "test"}]
         self.assertEquals(res_dict['server']['security_groups'],
                           expected_security_group)
 
     def test_get_server_by_id_verify_security_groups_xml(self):
         self.stubs.Set(nova.db.api, 'instance_get', return_server_by_id)
-        req = webob.Request.blank('/v1.1/123/os-create-server-ext/1')
+        req = webob.Request.blank('/v1.1/fake/os-create-server-ext/1')
         req.headers['Accept'] = 'application/xml'
         response = req.get_response(fakes.wsgi_app())
         self.assertEquals(response.status_int, 200)
         dom = minidom.parseString(response.body)
         server = dom.childNodes[0]
         sec_groups = server.getElementsByTagName('security_groups')[0]
         sec_group = sec_groups.getElementsByTagName('security_group')[0]
         self.assertEqual(INSTANCE['security_groups'][0]['name'],
                          sec_group.getAttribute("name"))
diff --git a/nova/tests/api/openstack/contrib/test_floating_ips.py b/nova/tests/api/openstack/contrib/test_floating_ips.py
index d4e08b3..aae71c3 100644
--- a/nova/tests/api/openstack/contrib/test_floating_ips.py
+++ b/nova/tests/api/openstack/contrib/test_floating_ips.py
@@ -96,317 +96,317 @@ def fake_instance_get(context, instance_id):
 class FloatingIpTest(test.TestCase):
     address = "10.10.10.10"
 
     def _create_floating_ip(self):
         """Create a floating ip object."""
         host = "fake_host"
         return db.floating_ip_create(self.context,
                                      {'address': self.address,
                                       'host': host})
 
     def _delete_floating_ip(self):
         db.floating_ip_destroy(self.context, self.address)
 
     def setUp(self):
         super(FloatingIpTest, self).setUp()
         self.stubs.Set(network.api.API, "get_floating_ip",
                        network_api_get_floating_ip)
         self.stubs.Set(network.api.API, "get_floating_ip_by_ip",
                        network_api_get_floating_ip)
         self.stubs.Set(network.api.API, "list_floating_ips",
                        network_api_list_floating_ips)
         self.stubs.Set(network.api.API, "release_floating_ip",
                        network_api_release)
         self.stubs.Set(network.api.API, "disassociate_floating_ip",
                        network_api_disassociate)
         self.stubs.Set(network.api.API, "get_instance_nw_info",
                        network_get_instance_nw_info)
         self.stubs.Set(db.api, 'instance_get',
                        fake_instance_get)
 
         self.context = context.get_admin_context()
         self._create_floating_ip()
 
     def tearDown(self):
         self._delete_floating_ip()
         super(FloatingIpTest, self).tearDown()
 
     def test_translate_floating_ip_view(self):
         floating_ip_address = self._create_floating_ip()
         floating_ip = db.floating_ip_get_by_address(self.context,
                                                     floating_ip_address)
         view = _translate_floating_ip_view(floating_ip)
         self.assertTrue('floating_ip' in view)
         self.assertTrue(view['floating_ip']['id'])
         self.assertEqual(view['floating_ip']['ip'], self.address)
         self.assertEqual(view['floating_ip']['fixed_ip'], None)
         self.assertEqual(view['floating_ip']['instance_id'], None)
 
     def test_translate_floating_ip_view_dict(self):
         floating_ip = {'id': 0, 'address': '10.0.0.10', 'fixed_ip': None}
         view = _translate_floating_ip_view(floating_ip)
         self.assertTrue('floating_ip' in view)
 
     def test_floating_ips_list(self):
-        req = webob.Request.blank('/v1.1/123/os-floating-ips')
+        req = webob.Request.blank('/v1.1/fake/os-floating-ips')
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 200)
         res_dict = json.loads(res.body)
         response = {'floating_ips': [{'instance_id': 1,
                                       'ip': '10.10.10.10',
                                       'fixed_ip': '10.0.0.1',
                                       'id': 1},
                                      {'instance_id': None,
                                       'ip': '10.10.10.11',
                                       'fixed_ip': None,
                                       'id': 2}]}
         self.assertEqual(res_dict, response)
 
     def test_floating_ip_show(self):
-        req = webob.Request.blank('/v1.1/123/os-floating-ips/1')
+        req = webob.Request.blank('/v1.1/fake/os-floating-ips/1')
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 200)
         res_dict = json.loads(res.body)
         self.assertEqual(res_dict['floating_ip']['id'], 1)
         self.assertEqual(res_dict['floating_ip']['ip'], '10.10.10.10')
         self.assertEqual(res_dict['floating_ip']['instance_id'], None)
 
     def test_show_associated_floating_ip(self):
         def get_floating_ip(self, context, id):
             return {'id': 1, 'address': '10.10.10.10',
                     'fixed_ip': {'address': '10.0.0.1', 'instance_id': 1}}
         self.stubs.Set(network.api.API, "get_floating_ip", get_floating_ip)
 
-        req = webob.Request.blank('/v1.1/123/os-floating-ips/1')
+        req = webob.Request.blank('/v1.1/fake/os-floating-ips/1')
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 200)
         res_dict = json.loads(res.body)
         self.assertEqual(res_dict['floating_ip']['id'], 1)
         self.assertEqual(res_dict['floating_ip']['ip'], '10.10.10.10')
         self.assertEqual(res_dict['floating_ip']['instance_id'], 1)
 
     def test_floating_ip_allocate_no_free_ips(self):
         def fake_call(*args, **kwargs):
             raise(rpc.RemoteError('NoMoreFloatingIps', '', ''))
 
         self.stubs.Set(rpc, "call", fake_call)
-        req = webob.Request.blank('/v1.1/123/os-floating-ips')
+        req = webob.Request.blank('/v1.1/fake/os-floating-ips')
         req.method = 'POST'
         req.headers['Content-Type'] = 'application/json'
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 400)
 
     def test_floating_ip_allocate(self):
         self.stubs.Set(network.api.API, "allocate_floating_ip",
                        network_api_allocate)
-        req = webob.Request.blank('/v1.1/123/os-floating-ips')
+        req = webob.Request.blank('/v1.1/fake/os-floating-ips')
         req.method = 'POST'
         req.headers['Content-Type'] = 'application/json'
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 200)
         ip = json.loads(res.body)['floating_ip']
 
         expected = {
             "id": 1,
             "instance_id": None,
             "ip": "10.10.10.10",
             "fixed_ip": None}
         self.assertEqual(ip, expected)
 
     def test_floating_ip_release_associated(self):
         self.disassociated = False
 
         def get_floating_ip(ignore, context, id):
             return {'id': 1, 'address': '10.10.10.10',
                     'fixed_ip': {'id': 1}}
 
         def disassociate(ignore, context, floating_address):
             self.disassociated = True
 
         self.stubs.Set(network.api.API, "get_floating_ip",
                        get_floating_ip)
         self.stubs.Set(network.api.API, "disassociate_floating_ip",
                        disassociate)
-        req = webob.Request.blank('/v1.1/123/os-floating-ips/1')
+        req = webob.Request.blank('/v1.1/fake/os-floating-ips/1')
         req.method = 'DELETE'
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 202)
         self.assertTrue(self.disassociated)
 
     def test_floating_ip_release_disassociated(self):
         self.disassociated = False
 
         def fake_get_floating_ip(ignore, context, id):
             return {'id': 1, 'address': '10.10.10.10',
                     'fixed_ip': None}
 
         def fake_disassociate(ignore, context, floating_address):
             self.disassociated = True
 
         self.stubs.Set(network.api.API, "get_floating_ip",
                        fake_get_floating_ip)
         self.stubs.Set(network.api.API, "disassociate_floating_ip",
                        fake_disassociate)
-        req = webob.Request.blank('/v1.1/123/os-floating-ips/1')
+        req = webob.Request.blank('/v1.1/fake/os-floating-ips/1')
         req.method = 'DELETE'
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 202)
         self.assertFalse(self.disassociated)
 
     def test_add_floating_ip_to_instance(self):
         self.stubs.Set(network.api.API, "associate_floating_ip",
                        network_api_associate)
         body = dict(addFloatingIp=dict(address='11.0.0.1'))
-        req = webob.Request.blank('/v1.1/123/servers/test_inst/action')
+        req = webob.Request.blank('/v1.1/fake/servers/test_inst/action')
         req.method = "POST"
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
 
         resp = req.get_response(fakes.wsgi_app())
         self.assertEqual(resp.status_int, 202)
 
     def test_associate_floating_ip_to_instance_wrong_project_id(self):
         def fake_fixed_ip_get_by_address(ctx, address, session=None):
             return {'address': address, 'network': {'multi_host': None,
                                                     'host': 'fake'}}
         self.stubs.Set(db.api, "fixed_ip_get_by_address",
                        fake_fixed_ip_get_by_address)
         db.floating_ip_update(self.context, self.address, {'project_id': 'bad',
                                                            'fixed_ip_id': 1})
         body = dict(addFloatingIp=dict(address=self.address))
-        req = webob.Request.blank('/v1.1/123/servers/test_inst/action')
+        req = webob.Request.blank('/v1.1/fake/servers/test_inst/action')
         req.method = "POST"
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
         resp = req.get_response(fakes.wsgi_app())
         self.assertEqual(resp.status_int, 401)
 
     def test_associate_floating_ip_to_instance_no_project_id(self):
         def fake_fixed_ip_get_by_address(ctx, address, session=None):
             return {'address': address, 'network': {'multi_host': None,
                                                     'host': 'fake'}}
         self.stubs.Set(db.api, "fixed_ip_get_by_address",
                        fake_fixed_ip_get_by_address)
         db.floating_ip_update(self.context, self.address, {'project_id': None,
                                                            'fixed_ip_id': 1})
         body = dict(addFloatingIp=dict(address=self.address))
-        req = webob.Request.blank('/v1.1/123/servers/test_inst/action')
+        req = webob.Request.blank('/v1.1/fake/servers/test_inst/action')
         req.method = "POST"
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
         resp = req.get_response(fakes.wsgi_app())
         self.assertEqual(resp.status_int, 400)
 
     def test_add_associated_floating_ip_to_instance(self):
         def fake_fixed_ip_get_by_address(ctx, address, session=None):
             return {'address': address, 'network': {'multi_host': None,
                                                     'host': 'fake'}}
 
         self.disassociated = False
 
         def fake_network_api_disassociate(local_self, ctx, floating_address):
             self.disassociated = True
 
-        db.floating_ip_update(self.context, self.address, {'project_id': '123',
-                                                           'fixed_ip_id': 1})
+        db.floating_ip_update(self.context, self.address,
+                              {'project_id': 'fake', 'fixed_ip_id': 1})
         self.stubs.Set(network.api.API, "disassociate_floating_ip",
                        fake_network_api_disassociate)
         self.stubs.Set(db.api, "fixed_ip_get_by_address",
                        fake_fixed_ip_get_by_address)
 
         body = dict(addFloatingIp=dict(address=self.address))
-        req = webob.Request.blank('/v1.1/123/servers/test_inst/action')
+        req = webob.Request.blank('/v1.1/fake/servers/test_inst/action')
         req.method = "POST"
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
 
         resp = req.get_response(fakes.wsgi_app())
         self.assertEqual(resp.status_int, 202)
         self.assertTrue(self.disassociated)
 
     def test_remove_associated_floating_ip_from_instance(self):
         self.disassociated = False
 
         def fake_get_floating_ip_by_ip(ignore, context, ip):
             return {'id': 1, 'address': '10.10.10.10',
                     'fixed_ip': {'id': 1}}
 
         def fake_disassociate(ignore, context, floating_address):
             self.disassociated = True
 
         self.stubs.Set(network.api.API, "get_floating_ip_by_ip",
                        fake_get_floating_ip_by_ip)
         self.stubs.Set(network.api.API, "disassociate_floating_ip",
                        fake_disassociate)
         body = dict(removeFloatingIp=dict(address='10.10.10.10'))
-        req = webob.Request.blank('/v1.1/123/servers/test_inst/action')
+        req = webob.Request.blank('/v1.1/fake/servers/test_inst/action')
         req.method = "POST"
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
 
         resp = req.get_response(fakes.wsgi_app())
         self.assertEqual(resp.status_int, 202)
         self.assertTrue(self.disassociated)
 
     def test_remove_disassociated_floating_ip_from_instance(self):
         self.disassociated = False
 
         def fake_get_floating_ip_by_ip(ignore, context, ip):
             return {'id': 1, 'address': '10.10.10.10',
                     'fixed_ip': None}
 
         def fake_disassociate(ignore, context, floating_address):
             self.disassociated = True
 
         self.stubs.Set(network.api.API, "get_floating_ip_by_ip",
                        fake_get_floating_ip_by_ip)
         self.stubs.Set(network.api.API, "disassociate_floating_ip",
                        fake_disassociate)
         body = dict(removeFloatingIp=dict(address='10.10.10.10'))
-        req = webob.Request.blank('/v1.1/123/servers/test_inst/action')
+        req = webob.Request.blank('/v1.1/fake/servers/test_inst/action')
         req.method = "POST"
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
 
         resp = req.get_response(fakes.wsgi_app())
         self.assertEqual(resp.status_int, 202)
         self.assertFalse(self.disassociated)
 
     def test_bad_address_param_in_remove_floating_ip(self):
         body = dict(removeFloatingIp=dict(badparam='11.0.0.1'))
-        req = webob.Request.blank('/v1.1/123/servers/test_inst/action')
+        req = webob.Request.blank('/v1.1/fake/servers/test_inst/action')
         req.method = "POST"
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
 
         resp = req.get_response(fakes.wsgi_app())
         self.assertEqual(resp.status_int, 400)
 
     def test_missing_dict_param_in_remove_floating_ip(self):
         body = dict(removeFloatingIp='11.0.0.1')
-        req = webob.Request.blank('/v1.1/123/servers/test_inst/action')
+        req = webob.Request.blank('/v1.1/fake/servers/test_inst/action')
         req.method = "POST"
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
 
         resp = req.get_response(fakes.wsgi_app())
         self.assertEqual(resp.status_int, 400)
 
     def test_bad_address_param_in_add_floating_ip(self):
         body = dict(addFloatingIp=dict(badparam='11.0.0.1'))
-        req = webob.Request.blank('/v1.1/123/servers/test_inst/action')
+        req = webob.Request.blank('/v1.1/fake/servers/test_inst/action')
         req.method = "POST"
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
 
         resp = req.get_response(fakes.wsgi_app())
         self.assertEqual(resp.status_int, 400)
 
     def test_missing_dict_param_in_add_floating_ip(self):
         body = dict(addFloatingIp='11.0.0.1')
-        req = webob.Request.blank('/v1.1/123/servers/test_inst/action')
+        req = webob.Request.blank('/v1.1/fake/servers/test_inst/action')
         req.method = "POST"
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
 
         resp = req.get_response(fakes.wsgi_app())
         self.assertEqual(resp.status_int, 400)
diff --git a/nova/tests/api/openstack/contrib/test_keypairs.py b/nova/tests/api/openstack/contrib/test_keypairs.py
index 92e401a..4ab0777 100644
--- a/nova/tests/api/openstack/contrib/test_keypairs.py
+++ b/nova/tests/api/openstack/contrib/test_keypairs.py
@@ -45,68 +45,68 @@ def db_key_pair_destroy(context, user_id, name):
 class KeypairsTest(test.TestCase):
 
     def setUp(self):
         super(KeypairsTest, self).setUp()
         self.controller = KeypairController()
         fakes.stub_out_networking(self.stubs)
         fakes.stub_out_rate_limiting(self.stubs)
         self.stubs.Set(db, "key_pair_get_all_by_user",
                        db_key_pair_get_all_by_user)
         self.stubs.Set(db, "key_pair_create",
                        db_key_pair_create)
         self.stubs.Set(db, "key_pair_destroy",
                        db_key_pair_destroy)
         self.context = context.get_admin_context()
 
     def test_keypair_list(self):
-        req = webob.Request.blank('/v1.1/123/os-keypairs')
+        req = webob.Request.blank('/v1.1/fake/os-keypairs')
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 200)
         res_dict = json.loads(res.body)
         response = {'keypairs': [{'keypair': fake_keypair('FAKE')}]}
         self.assertEqual(res_dict, response)
 
     def test_keypair_create(self):
         body = {'keypair': {'name': 'create_test'}}
-        req = webob.Request.blank('/v1.1/123/os-keypairs')
+        req = webob.Request.blank('/v1.1/fake/os-keypairs')
         req.method = 'POST'
         req.body = json.dumps(body)
         req.headers['Content-Type'] = 'application/json'
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 200)
         res_dict = json.loads(res.body)
         self.assertTrue(len(res_dict['keypair']['fingerprint']) > 0)
         self.assertTrue(len(res_dict['keypair']['private_key']) > 0)
 
     def test_keypair_import(self):
         body = {
             'keypair': {
                 'name': 'create_test',
                 'public_key': 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDBYIznA'
                               'x9D7118Q1VKGpXy2HDiKyUTM8XcUuhQpo0srqb9rboUp4'
                               'a9NmCwpWpeElDLuva707GOUnfaBAvHBwsRXyxHJjRaI6Y'
                               'Qj2oLJwqvaSaWUbyT1vtryRqy6J3TecN0WINY71f4uymi'
                               'MZP0wby4bKBcYnac8KiCIlvkEl0ETjkOGUq8OyWRmn7lj'
                               'j5SESEUdBP0JnuTFKddWTU/wD6wydeJaUhBTqOlHn0kX1'
                               'GyqoNTE1UEhcM5ZRWgfUZfTjVyDF2kGj3vJLCJtJ8LoGc'
                               'j7YaN4uPg1rBle+izwE/tLonRrds+cev8p6krSSrxWOwB'
                               'bHkXa6OciiJDvkRzJXzf',
             },
         }
 
-        req = webob.Request.blank('/v1.1/123/os-keypairs')
+        req = webob.Request.blank('/v1.1/fake/os-keypairs')
         req.method = 'POST'
         req.body = json.dumps(body)
         req.headers['Content-Type'] = 'application/json'
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 200)
         # FIXME(ja): sholud we check that public_key was sent to create?
         res_dict = json.loads(res.body)
         self.assertTrue(len(res_dict['keypair']['fingerprint']) > 0)
         self.assertFalse('private_key' in res_dict['keypair'])
 
     def test_keypair_delete(self):
-        req = webob.Request.blank('/v1.1/123/os-keypairs/FAKE')
+        req = webob.Request.blank('/v1.1/fake/os-keypairs/FAKE')
         req.method = 'DELETE'
         req.headers['Content-Type'] = 'application/json'
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 202)
diff --git a/nova/tests/api/openstack/contrib/test_multinic_xs.py b/nova/tests/api/openstack/contrib/test_multinic_xs.py
index cecc4af..f659852 100644
--- a/nova/tests/api/openstack/contrib/test_multinic_xs.py
+++ b/nova/tests/api/openstack/contrib/test_multinic_xs.py
@@ -42,66 +42,66 @@ def compute_api_remove_fixed_ip(self, context, instance_id, address):
 class FixedIpTest(test.TestCase):
     def setUp(self):
         super(FixedIpTest, self).setUp()
         fakes.stub_out_networking(self.stubs)
         fakes.stub_out_rate_limiting(self.stubs)
         self.stubs.Set(compute.api.API, "add_fixed_ip",
                        compute_api_add_fixed_ip)
         self.stubs.Set(compute.api.API, "remove_fixed_ip",
                        compute_api_remove_fixed_ip)
         self.context = context.get_admin_context()
 
     def test_add_fixed_ip(self):
         global last_add_fixed_ip
         last_add_fixed_ip = (None, None)
 
         body = dict(addFixedIp=dict(networkId='test_net'))
-        req = webob.Request.blank('/v1.1/123/servers/test_inst/action')
+        req = webob.Request.blank('/v1.1/fake/servers/test_inst/action')
         req.method = 'POST'
         req.body = json.dumps(body)
         req.headers['content-type'] = 'application/json'
 
         resp = req.get_response(fakes.wsgi_app())
         self.assertEqual(resp.status_int, 202)
         self.assertEqual(last_add_fixed_ip, ('test_inst', 'test_net'))
 
     def test_add_fixed_ip_no_network(self):
         global last_add_fixed_ip
         last_add_fixed_ip = (None, None)
 
         body = dict(addFixedIp=dict())
-        req = webob.Request.blank('/v1.1/123/servers/test_inst/action')
+        req = webob.Request.blank('/v1.1/fake/servers/test_inst/action')
         req.method = 'POST'
         req.body = json.dumps(body)
         req.headers['content-type'] = 'application/json'
 
         resp = req.get_response(fakes.wsgi_app())
         self.assertEqual(resp.status_int, 422)
         self.assertEqual(last_add_fixed_ip, (None, None))
 
     def test_remove_fixed_ip(self):
         global last_remove_fixed_ip
         last_remove_fixed_ip = (None, None)
 
         body = dict(removeFixedIp=dict(address='10.10.10.1'))
-        req = webob.Request.blank('/v1.1/123/servers/test_inst/action')
+        req = webob.Request.blank('/v1.1/fake/servers/test_inst/action')
         req.method = 'POST'
         req.body = json.dumps(body)
         req.headers['content-type'] = 'application/json'
 
         resp = req.get_response(fakes.wsgi_app())
         self.assertEqual(resp.status_int, 202)
         self.assertEqual(last_remove_fixed_ip, ('test_inst', '10.10.10.1'))
 
     def test_remove_fixed_ip_no_address(self):
         global last_remove_fixed_ip
         last_remove_fixed_ip = (None, None)
 
         body = dict(removeFixedIp=dict())
-        req = webob.Request.blank('/v1.1/123/servers/test_inst/action')
+        req = webob.Request.blank('/v1.1/fake/servers/test_inst/action')
         req.method = 'POST'
         req.body = json.dumps(body)
         req.headers['content-type'] = 'application/json'
 
         resp = req.get_response(fakes.wsgi_app())
         self.assertEqual(resp.status_int, 422)
         self.assertEqual(last_remove_fixed_ip, (None, None))
diff --git a/nova/tests/api/openstack/contrib/test_quotas.py b/nova/tests/api/openstack/contrib/test_quotas.py
index 7faef08..e391e5f 100644
--- a/nova/tests/api/openstack/contrib/test_quotas.py
+++ b/nova/tests/api/openstack/contrib/test_quotas.py
@@ -40,114 +40,114 @@ def quota_set_list():
 class QuotaSetsTest(test.TestCase):
 
     def setUp(self):
         super(QuotaSetsTest, self).setUp()
         self.controller = QuotaSetsController()
         self.user_id = 'fake'
         self.project_id = 'fake'
         self.user_context = context.RequestContext(self.user_id,
                                                    self.project_id)
         self.admin_context = context.RequestContext(self.user_id,
                                                     self.project_id,
                                                     is_admin=True)
 
     def test_format_quota_set(self):
         raw_quota_set = {
             'instances': 10,
             'cores': 20,
             'ram': 51200,
             'volumes': 10,
             'floating_ips': 10,
             'metadata_items': 128,
             'gigabytes': 1000,
             'injected_files': 5,
             'injected_file_content_bytes': 10240}
 
         quota_set = QuotaSetsController()._format_quota_set('1234',
                                                             raw_quota_set)
         qs = quota_set['quota_set']
 
         self.assertEqual(qs['id'], '1234')
         self.assertEqual(qs['instances'], 10)
         self.assertEqual(qs['cores'], 20)
         self.assertEqual(qs['ram'], 51200)
         self.assertEqual(qs['volumes'], 10)
         self.assertEqual(qs['gigabytes'], 1000)
         self.assertEqual(qs['floating_ips'], 10)
         self.assertEqual(qs['metadata_items'], 128)
         self.assertEqual(qs['injected_files'], 5)
         self.assertEqual(qs['injected_file_content_bytes'], 10240)
 
     def test_quotas_defaults(self):
-        uri = '/v1.1/fake_tenant/os-quota-sets/fake_tenant/defaults'
+        uri = '/v1.1/fake/os-quota-sets/fake_tenant/defaults'
         req = webob.Request.blank(uri)
         req.method = 'GET'
         req.headers['Content-Type'] = 'application/json'
         res = req.get_response(fakes.wsgi_app())
 
         self.assertEqual(res.status_int, 200)
         expected = {'quota_set': {
                     'id': 'fake_tenant',
                     'instances': 10,
                     'cores': 20,
                     'ram': 51200,
                     'volumes': 10,
                     'gigabytes': 1000,
                     'floating_ips': 10,
                     'metadata_items': 128,
                     'injected_files': 5,
                     'injected_file_content_bytes': 10240}}
 
         self.assertEqual(json.loads(res.body), expected)
 
     def test_quotas_show_as_admin(self):
-        req = webob.Request.blank('/v1.1/1234/os-quota-sets/1234')
+        req = webob.Request.blank('/v1.1/fake/os-quota-sets/1234')
         req.method = 'GET'
         req.headers['Content-Type'] = 'application/json'
         res = req.get_response(fakes.wsgi_app(
                                fake_auth_context=self.admin_context))
 
         self.assertEqual(res.status_int, 200)
         self.assertEqual(json.loads(res.body), quota_set('1234'))
 
     def test_quotas_show_as_unauthorized_user(self):
         req = webob.Request.blank('/v1.1/fake/os-quota-sets/1234')
         req.method = 'GET'
         req.headers['Content-Type'] = 'application/json'
         res = req.get_response(fakes.wsgi_app(
                                fake_auth_context=self.user_context))
 
         self.assertEqual(res.status_int, 403)
 
     def test_quotas_update_as_admin(self):
         updated_quota_set = {'quota_set': {'instances': 50,
                              'cores': 50, 'ram': 51200, 'volumes': 10,
                              'gigabytes': 1000, 'floating_ips': 10,
                              'metadata_items': 128, 'injected_files': 5,
                              'injected_file_content_bytes': 10240}}
 
-        req = webob.Request.blank('/v1.1/1234/os-quota-sets/update_me')
+        req = webob.Request.blank('/v1.1/fake/os-quota-sets/update_me')
         req.method = 'PUT'
         req.body = json.dumps(updated_quota_set)
         req.headers['Content-Type'] = 'application/json'
 
         res = req.get_response(fakes.wsgi_app(
                                fake_auth_context=self.admin_context))
 
         self.assertEqual(json.loads(res.body), updated_quota_set)
 
     def test_quotas_update_as_user(self):
         updated_quota_set = {'quota_set': {'instances': 50,
                              'cores': 50, 'ram': 51200, 'volumes': 10,
                              'gigabytes': 1000, 'floating_ips': 10,
                              'metadata_items': 128, 'injected_files': 5,
                              'injected_file_content_bytes': 10240}}
 
-        req = webob.Request.blank('/v1.1/1234/os-quota-sets/update_me')
+        req = webob.Request.blank('/v1.1/fake/os-quota-sets/update_me')
         req.method = 'PUT'
         req.body = json.dumps(updated_quota_set)
         req.headers['Content-Type'] = 'application/json'
 
         res = req.get_response(fakes.wsgi_app(
                                fake_auth_context=self.user_context))
 
         self.assertEqual(res.status_int, 403)
diff --git a/nova/tests/api/openstack/contrib/test_rescue.py b/nova/tests/api/openstack/contrib/test_rescue.py
index f8126d4..deac16b 100644
--- a/nova/tests/api/openstack/contrib/test_rescue.py
+++ b/nova/tests/api/openstack/contrib/test_rescue.py
@@ -31,25 +31,25 @@ def unrescue(self, context, instance_id):
 class RescueTest(test.TestCase):
     def setUp(self):
         super(RescueTest, self).setUp()
         self.stubs.Set(compute.api.API, "rescue", rescue)
         self.stubs.Set(compute.api.API, "unrescue", unrescue)
 
     def test_rescue(self):
         body = dict(rescue=None)
-        req = webob.Request.blank('/v1.1/123/servers/test_inst/action')
+        req = webob.Request.blank('/v1.1/fake/servers/test_inst/action')
         req.method = "POST"
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
 
         resp = req.get_response(fakes.wsgi_app())
         self.assertEqual(resp.status_int, 200)
 
     def test_unrescue(self):
         body = dict(unrescue=None)
-        req = webob.Request.blank('/v1.1/123/servers/test_inst/action')
+        req = webob.Request.blank('/v1.1/fake/servers/test_inst/action')
         req.method = "POST"
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
 
         resp = req.get_response(fakes.wsgi_app())
         self.assertEqual(resp.status_int, 200)
diff --git a/nova/tests/api/openstack/contrib/test_security_groups.py b/nova/tests/api/openstack/contrib/test_security_groups.py
index 0816a63..d0b25e0 100644
--- a/nova/tests/api/openstack/contrib/test_security_groups.py
+++ b/nova/tests/api/openstack/contrib/test_security_groups.py
@@ -28,10 +28,10 @@ from nova.tests.api.openstack import fakes
 
 
 def _get_create_request_json(body_dict):
-    req = webob.Request.blank('/v1.1/123/os-security-groups')
+    req = webob.Request.blank('/v1.1/fake/os-security-groups')
     req.headers['Content-Type'] = 'application/json'
     req.method = 'POST'
     req.body = json.dumps(body_dict)
     return req
 
 
@@ -79,860 +79,860 @@ def return_server_nonexistant(context, server_id):
 class TestSecurityGroups(test.TestCase):
     def setUp(self):
         super(TestSecurityGroups, self).setUp()
 
     def tearDown(self):
         super(TestSecurityGroups, self).tearDown()
 
     def _create_security_group_request_dict(self, security_group):
         sg = {}
         if security_group is not None:
             name = security_group.get('name', None)
             description = security_group.get('description', None)
             if name:
                 sg['name'] = security_group['name']
             if description:
                 sg['description'] = security_group['description']
         return {'security_group': sg}
 
     def _format_create_xml_request_body(self, body_dict):
         sg = body_dict['security_group']
         body_parts = []
         body_parts.extend([
                   '<?xml version="1.0" encoding="UTF-8"?>',
                   '<security_group xmlns="http://docs.openstack.org/ext/'
                   'securitygroups/api/v1.1"',
                   ' name="%s">' % (sg['name'])])
         if 'description' in sg:
             body_parts.append('<description>%s</description>'
                               % sg['description'])
         body_parts.append('</security_group>')
         return ''.join(body_parts)
 
     def _get_create_request_xml(self, body_dict):
-        req = webob.Request.blank('/v1.1/123/os-security-groups')
+        req = webob.Request.blank('/v1.1/fake/os-security-groups')
         req.headers['Content-Type'] = 'application/xml'
         req.content_type = 'application/xml'
         req.accept = 'application/xml'
         req.method = 'POST'
         req.body = self._format_create_xml_request_body(body_dict)
         return req
 
     def _create_security_group_xml(self, security_group):
         body_dict = self._create_security_group_request_dict(security_group)
         request = self._get_create_request_xml(body_dict)
         response = request.get_response(fakes.wsgi_app())
         return response
 
     def _delete_security_group(self, id):
-        request = webob.Request.blank('/v1.1/123/os-security-groups/%s'
+        request = webob.Request.blank('/v1.1/fake/os-security-groups/%s'
                                       % id)
         request.method = 'DELETE'
         response = request.get_response(fakes.wsgi_app())
         return response
 
     def test_create_security_group_json(self):
         security_group = {}
         security_group['name'] = "test"
         security_group['description'] = "group-description"
         response = _create_security_group_json(security_group)
         res_dict = json.loads(response.body)
         self.assertEqual(res_dict['security_group']['name'], "test")
         self.assertEqual(res_dict['security_group']['description'],
                          "group-description")
         self.assertEquals(response.status_int, 200)
 
     def test_create_security_group_xml(self):
         security_group = {}
         security_group['name'] = "test"
         security_group['description'] = "group-description"
         response = \
                 self._create_security_group_xml(security_group)
 
         self.assertEquals(response.status_int, 200)
         dom = minidom.parseString(response.body)
         sg = dom.childNodes[0]
         self.assertEquals(sg.nodeName, 'security_group')
         self.assertEqual(security_group['name'], sg.getAttribute('name'))
 
     def test_create_security_group_with_no_name_json(self):
         security_group = {}
         security_group['description'] = "group-description"
         response = _create_security_group_json(security_group)
         self.assertEquals(response.status_int, 400)
 
     def test_create_security_group_with_no_description_json(self):
         security_group = {}
         security_group['name'] = "test"
         response = _create_security_group_json(security_group)
         self.assertEquals(response.status_int, 400)
 
     def test_create_security_group_with_blank_name_json(self):
         security_group = {}
         security_group['name'] = ""
         security_group['description'] = "group-description"
         response = _create_security_group_json(security_group)
         self.assertEquals(response.status_int, 400)
 
     def test_create_security_group_with_whitespace_name_json(self):
         security_group = {}
         security_group['name'] = " "
         security_group['description'] = "group-description"
         response = _create_security_group_json(security_group)
         self.assertEquals(response.status_int, 400)
 
     def test_create_security_group_with_blank_description_json(self):
         security_group = {}
         security_group['name'] = "test"
         security_group['description'] = ""
         response = _create_security_group_json(security_group)
         self.assertEquals(response.status_int, 400)
 
     def test_create_security_group_with_whitespace_description_json(self):
         security_group = {}
         security_group['name'] = "name"
         security_group['description'] = " "
         response = _create_security_group_json(security_group)
         self.assertEquals(response.status_int, 400)
 
     def test_create_security_group_with_duplicate_name_json(self):
         security_group = {}
         security_group['name'] = "test"
         security_group['description'] = "group-description"
         response = _create_security_group_json(security_group)
 
         self.assertEquals(response.status_int, 200)
         response = _create_security_group_json(security_group)
         self.assertEquals(response.status_int, 400)
 
     def test_create_security_group_with_no_body_json(self):
         request = _get_create_request_json(body_dict=None)
         response = request.get_response(fakes.wsgi_app())
         self.assertEquals(response.status_int, 422)
 
     def test_create_security_group_with_no_security_group(self):
         body_dict = {}
         body_dict['no-securityGroup'] = None
         request = _get_create_request_json(body_dict)
         response = request.get_response(fakes.wsgi_app())
         self.assertEquals(response.status_int, 422)
 
     def test_create_security_group_above_255_characters_name_json(self):
         security_group = {}
         security_group['name'] = ("1234567890123456"
                             "1234567890123456789012345678901234567890"
                             "1234567890123456789012345678901234567890"
                             "1234567890123456789012345678901234567890"
                             "1234567890123456789012345678901234567890"
                             "1234567890123456789012345678901234567890"
                             "1234567890123456789012345678901234567890")
         security_group['description'] = "group-description"
         response = _create_security_group_json(security_group)
 
         self.assertEquals(response.status_int, 400)
 
     def test_create_security_group_above_255_characters_description_json(self):
         security_group = {}
         security_group['name'] = "test"
         security_group['description'] = ("1234567890123456"
                             "1234567890123456789012345678901234567890"
                             "1234567890123456789012345678901234567890"
                             "1234567890123456789012345678901234567890"
                             "1234567890123456789012345678901234567890"
                             "1234567890123456789012345678901234567890"
                             "1234567890123456789012345678901234567890")
         response = _create_security_group_json(security_group)
         self.assertEquals(response.status_int, 400)
 
     def test_create_security_group_non_string_name_json(self):
         security_group = {}
         security_group['name'] = 12
         security_group['description'] = "group-description"
         response = _create_security_group_json(security_group)
         self.assertEquals(response.status_int, 400)
 
     def test_create_security_group_non_string_description_json(self):
         security_group = {}
         security_group['name'] = "test"
         security_group['description'] = 12
         response = _create_security_group_json(security_group)
         self.assertEquals(response.status_int, 400)
 
     def test_get_security_group_list(self):
         security_group = {}
         security_group['name'] = "test"
         security_group['description'] = "group-description"
         response = _create_security_group_json(security_group)
 
-        req = webob.Request.blank('/v1.1/123/os-security-groups')
+        req = webob.Request.blank('/v1.1/fake/os-security-groups')
         req.headers['Content-Type'] = 'application/json'
         req.method = 'GET'
         response = req.get_response(fakes.wsgi_app())
         res_dict = json.loads(response.body)
 
         expected = {'security_groups': [
                     {'id': 1,
                             'name':"default",
-                            'tenant_id': "123",
+                            'tenant_id': "fake",
                             "description":"default",
                             "rules": []
                        },
                      ]
         }
         expected['security_groups'].append(
                     {
                         'id': 2,
                         'name': "test",
-                        'tenant_id': "123",
+                        'tenant_id': "fake",
                         "description": "group-description",
                         "rules": []
                     }
                 )
         self.assertEquals(response.status_int, 200)
         self.assertEquals(res_dict, expected)
 
     def test_get_security_group_by_id(self):
         security_group = {}
         security_group['name'] = "test"
         security_group['description'] = "group-description"
         response = _create_security_group_json(security_group)
 
         res_dict = json.loads(response.body)
-        req = webob.Request.blank('/v1.1/123/os-security-groups/%s' %
+        req = webob.Request.blank('/v1.1/fake/os-security-groups/%s' %
                                   res_dict['security_group']['id'])
         req.headers['Content-Type'] = 'application/json'
         req.method = 'GET'
         response = req.get_response(fakes.wsgi_app())
         res_dict = json.loads(response.body)
 
         expected = {
                       'security_group': {
                           'id': 2,
                           'name': "test",
-                          'tenant_id': "123",
+                          'tenant_id': "fake",
                           'description': "group-description",
                           'rules': []
                        }
                    }
         self.assertEquals(res_dict, expected)
 
     def test_get_security_group_by_invalid_id(self):
-        req = webob.Request.blank('/v1.1/123/os-security-groups/invalid')
+        req = webob.Request.blank('/v1.1/fake/os-security-groups/invalid')
         req.headers['Content-Type'] = 'application/json'
         req.method = 'GET'
         response = req.get_response(fakes.wsgi_app())
         self.assertEquals(response.status_int, 400)
 
     def test_get_security_group_by_non_existing_id(self):
-        req = webob.Request.blank('/v1.1/123/os-security-groups/111111111')
+        req = webob.Request.blank('/v1.1/fake/os-security-groups/111111111')
         req.headers['Content-Type'] = 'application/json'
         req.method = 'GET'
         response = req.get_response(fakes.wsgi_app())
         self.assertEquals(response.status_int, 404)
 
     def test_delete_security_group_by_id(self):
         security_group = {}
         security_group['name'] = "test"
         security_group['description'] = "group-description"
         response = _create_security_group_json(security_group)
         security_group = json.loads(response.body)['security_group']
         response = self._delete_security_group(security_group['id'])
         self.assertEquals(response.status_int, 202)
 
         response = self._delete_security_group(security_group['id'])
         self.assertEquals(response.status_int, 404)
 
     def test_delete_security_group_by_invalid_id(self):
         response = self._delete_security_group('invalid')
         self.assertEquals(response.status_int, 400)
 
     def test_delete_security_group_by_non_existing_id(self):
         response = self._delete_security_group(11111111)
         self.assertEquals(response.status_int, 404)
 
     def test_associate_by_non_existing_security_group_name(self):
         body = dict(addSecurityGroup=dict(name='non-existing'))
-        req = webob.Request.blank('/v1.1/123/servers/1/action')
+        req = webob.Request.blank('/v1.1/fake/servers/1/action')
         req.headers['Content-Type'] = 'application/json'
         req.method = 'POST'
         req.body = json.dumps(body)
         response = req.get_response(fakes.wsgi_app())
         self.assertEquals(response.status_int, 404)
 
     def test_associate_by_invalid_server_id(self):
         body = dict(addSecurityGroup=dict(name='test'))
         self.stubs.Set(nova.db.api, 'security_group_get_by_name',
                        return_security_group)
-        req = webob.Request.blank('/v1.1/123/servers/invalid/action')
+        req = webob.Request.blank('/v1.1/fake/servers/invalid/action')
         req.headers['Content-Type'] = 'application/json'
         req.method = 'POST'
         req.body = json.dumps(body)
         response = req.get_response(fakes.wsgi_app())
         self.assertEquals(response.status_int, 400)
 
     def test_associate_without_body(self):
-        req = webob.Request.blank('/v1.1/123/servers/1/action')
+        req = webob.Request.blank('/v1.1/fake/servers/1/action')
         body = dict(addSecurityGroup=None)
         self.stubs.Set(nova.db.api, 'instance_get', return_server)
         req.headers['Content-Type'] = 'application/json'
         req.method = 'POST'
         req.body = json.dumps(body)
         response = req.get_response(fakes.wsgi_app())
         self.assertEquals(response.status_int, 400)
 
     def test_associate_no_security_group_name(self):
-        req = webob.Request.blank('/v1.1/123/servers/1/action')
+        req = webob.Request.blank('/v1.1/fake/servers/1/action')
         body = dict(addSecurityGroup=dict())
         self.stubs.Set(nova.db.api, 'instance_get', return_server)
         req.headers['Content-Type'] = 'application/json'
         req.method = 'POST'
         req.body = json.dumps(body)
         response = req.get_response(fakes.wsgi_app())
         self.assertEquals(response.status_int, 400)
 
     def test_associate_security_group_name_with_whitespaces(self):
-        req = webob.Request.blank('/v1.1/123/servers/1/action')
+        req = webob.Request.blank('/v1.1/fake/servers/1/action')
         body = dict(addSecurityGroup=dict(name="   "))
         self.stubs.Set(nova.db.api, 'instance_get', return_server)
         req.headers['Content-Type'] = 'application/json'
         req.method = 'POST'
         req.body = json.dumps(body)
         response = req.get_response(fakes.wsgi_app())
         self.assertEquals(response.status_int, 400)
 
     def test_associate_non_existing_instance(self):
         self.stubs.Set(nova.db.api, 'instance_get', return_server_nonexistant)
         body = dict(addSecurityGroup=dict(name="test"))
         self.stubs.Set(nova.db.api, 'security_group_get_by_name',
                        return_security_group)
-        req = webob.Request.blank('/v1.1/123/servers/10000/action')
+        req = webob.Request.blank('/v1.1/fake/servers/10000/action')
         req.headers['Content-Type'] = 'application/json'
         req.method = 'POST'
         req.body = json.dumps(body)
         response = req.get_response(fakes.wsgi_app())
         self.assertEquals(response.status_int, 404)
 
     def test_associate_non_running_instance(self):
         self.stubs.Set(nova.db.api, 'instance_get', return_non_running_server)
         self.stubs.Set(nova.db.api, 'security_group_get_by_name',
                        return_security_group_without_instances)
         body = dict(addSecurityGroup=dict(name="test"))
-        req = webob.Request.blank('/v1.1/123/servers/1/action')
+        req = webob.Request.blank('/v1.1/fake/servers/1/action')
         req.headers['Content-Type'] = 'application/json'
         req.method = 'POST'
         req.body = json.dumps(body)
         response = req.get_response(fakes.wsgi_app())
         self.assertEquals(response.status_int, 400)
 
     def test_associate_already_associated_security_group_to_instance(self):
         self.stubs.Set(nova.db.api, 'instance_get', return_server)
         self.stubs.Set(nova.db.api, 'security_group_get_by_name',
                        return_security_group)
         body = dict(addSecurityGroup=dict(name="test"))
-        req = webob.Request.blank('/v1.1/123/servers/1/action')
+        req = webob.Request.blank('/v1.1/fake/servers/1/action')
         req.headers['Content-Type'] = 'application/json'
         req.method = 'POST'
         req.body = json.dumps(body)
         response = req.get_response(fakes.wsgi_app())
         self.assertEquals(response.status_int, 400)
 
     def test_associate(self):
         self.stubs.Set(nova.db.api, 'instance_get', return_server)
         self.mox.StubOutWithMock(nova.db.api, 'instance_add_security_group')
         nova.db.api.instance_add_security_group(mox.IgnoreArg(),
                                     mox.IgnoreArg(),
                                     mox.IgnoreArg())
         self.stubs.Set(nova.db.api, 'security_group_get_by_name',
                        return_security_group_without_instances)
         self.mox.ReplayAll()
 
         body = dict(addSecurityGroup=dict(name="test"))
-        req = webob.Request.blank('/v1.1/123/servers/1/action')
+        req = webob.Request.blank('/v1.1/fake/servers/1/action')
         req.headers['Content-Type'] = 'application/json'
         req.method = 'POST'
         req.body = json.dumps(body)
         response = req.get_response(fakes.wsgi_app())
         self.assertEquals(response.status_int, 202)
 
     def test_associate_xml(self):
         self.stubs.Set(nova.db.api, 'instance_get', return_server)
         self.mox.StubOutWithMock(nova.db.api, 'instance_add_security_group')
         nova.db.api.instance_add_security_group(mox.IgnoreArg(),
                                     mox.IgnoreArg(),
                                     mox.IgnoreArg())
         self.stubs.Set(nova.db.api, 'security_group_get_by_name',
                        return_security_group_without_instances)
         self.mox.ReplayAll()
 
-        req = webob.Request.blank('/v1.1/123/servers/1/action')
+        req = webob.Request.blank('/v1.1/fake/servers/1/action')
         req.headers['Content-Type'] = 'application/xml'
         req.method = 'POST'
         req.body = """<addSecurityGroup>
                            <name>test</name>
                     </addSecurityGroup>"""
         response = req.get_response(fakes.wsgi_app())
         self.assertEquals(response.status_int, 202)
 
     def test_disassociate_by_non_existing_security_group_name(self):
         body = dict(removeSecurityGroup=dict(name='non-existing'))
-        req = webob.Request.blank('/v1.1/123/servers/1/action')
+        req = webob.Request.blank('/v1.1/fake/servers/1/action')
         req.headers['Content-Type'] = 'application/json'
         req.method = 'POST'
         req.body = json.dumps(body)
         response = req.get_response(fakes.wsgi_app())
         self.assertEquals(response.status_int, 404)
 
     def test_disassociate_by_invalid_server_id(self):
         body = dict(removeSecurityGroup=dict(name='test'))
         self.stubs.Set(nova.db.api, 'security_group_get_by_name',
                        return_security_group)
-        req = webob.Request.blank('/v1.1/123/servers/invalid/action')
+        req = webob.Request.blank('/v1.1/fake/servers/invalid/action')
         req.headers['Content-Type'] = 'application/json'
         req.method = 'POST'
         req.body = json.dumps(body)
         response = req.get_response(fakes.wsgi_app())
         self.assertEquals(response.status_int, 400)
 
     def test_disassociate_without_body(self):
-        req = webob.Request.blank('/v1.1/123/servers/1/action')
+        req = webob.Request.blank('/v1.1/fake/servers/1/action')
         body = dict(removeSecurityGroup=None)
         self.stubs.Set(nova.db.api, 'instance_get', return_server)
         req.headers['Content-Type'] = 'application/json'
         req.method = 'POST'
         req.body = json.dumps(body)
         response = req.get_response(fakes.wsgi_app())
         self.assertEquals(response.status_int, 400)
 
     def test_disassociate_no_security_group_name(self):
-        req = webob.Request.blank('/v1.1/123/servers/1/action')
+        req = webob.Request.blank('/v1.1/fake/servers/1/action')
         body = dict(removeSecurityGroup=dict())
         self.stubs.Set(nova.db.api, 'instance_get', return_server)
         req.headers['Content-Type'] = 'application/json'
         req.method = 'POST'
         req.body = json.dumps(body)
         response = req.get_response(fakes.wsgi_app())
         self.assertEquals(response.status_int, 400)
 
     def test_disassociate_security_group_name_with_whitespaces(self):
-        req = webob.Request.blank('/v1.1/123/servers/1/action')
+        req = webob.Request.blank('/v1.1/fake/servers/1/action')
         body = dict(removeSecurityGroup=dict(name="   "))
         self.stubs.Set(nova.db.api, 'instance_get', return_server)
         req.headers['Content-Type'] = 'application/json'
         req.method = 'POST'
         req.body = json.dumps(body)
         response = req.get_response(fakes.wsgi_app())
         self.assertEquals(response.status_int, 400)
 
     def test_disassociate_non_existing_instance(self):
         self.stubs.Set(nova.db.api, 'instance_get', return_server_nonexistant)
         body = dict(removeSecurityGroup=dict(name="test"))
         self.stubs.Set(nova.db.api, 'security_group_get_by_name',
                        return_security_group)
-        req = webob.Request.blank('/v1.1/123/servers/10000/action')
+        req = webob.Request.blank('/v1.1/fake/servers/10000/action')
         req.headers['Content-Type'] = 'application/json'
         req.method = 'POST'
         req.body = json.dumps(body)
         response = req.get_response(fakes.wsgi_app())
         self.assertEquals(response.status_int, 404)
 
     def test_disassociate_non_running_instance(self):
         self.stubs.Set(nova.db.api, 'instance_get', return_non_running_server)
         self.stubs.Set(nova.db.api, 'security_group_get_by_name',
                        return_security_group)
         body = dict(removeSecurityGroup=dict(name="test"))
-        req = webob.Request.blank('/v1.1/123/servers/1/action')
+        req = webob.Request.blank('/v1.1/fake/servers/1/action')
         req.headers['Content-Type'] = 'application/json'
         req.method = 'POST'
         req.body = json.dumps(body)
         response = req.get_response(fakes.wsgi_app())
         self.assertEquals(response.status_int, 400)
 
     def test_disassociate_already_associated_security_group_to_instance(self):
         self.stubs.Set(nova.db.api, 'instance_get', return_server)
         self.stubs.Set(nova.db.api, 'security_group_get_by_name',
                        return_security_group_without_instances)
         body = dict(removeSecurityGroup=dict(name="test"))
-        req = webob.Request.blank('/v1.1/123/servers/1/action')
+        req = webob.Request.blank('/v1.1/fake/servers/1/action')
         req.headers['Content-Type'] = 'application/json'
         req.method = 'POST'
         req.body = json.dumps(body)
         response = req.get_response(fakes.wsgi_app())
         self.assertEquals(response.status_int, 400)
 
     def test_disassociate(self):
         self.stubs.Set(nova.db.api, 'instance_get', return_server)
         self.mox.StubOutWithMock(nova.db.api, 'instance_remove_security_group')
         nova.db.api.instance_remove_security_group(mox.IgnoreArg(),
                                     mox.IgnoreArg(),
                                     mox.IgnoreArg())
         self.stubs.Set(nova.db.api, 'security_group_get_by_name',
                        return_security_group)
         self.mox.ReplayAll()
 
         body = dict(removeSecurityGroup=dict(name="test"))
-        req = webob.Request.blank('/v1.1/123/servers/1/action')
+        req = webob.Request.blank('/v1.1/fake/servers/1/action')
         req.headers['Content-Type'] = 'application/json'
         req.method = 'POST'
         req.body = json.dumps(body)
         response = req.get_response(fakes.wsgi_app())
         self.assertEquals(response.status_int, 202)
 
     def test_disassociate_xml(self):
         self.stubs.Set(nova.db.api, 'instance_get', return_server)
         self.mox.StubOutWithMock(nova.db.api, 'instance_remove_security_group')
         nova.db.api.instance_remove_security_group(mox.IgnoreArg(),
                                     mox.IgnoreArg(),
                                     mox.IgnoreArg())
         self.stubs.Set(nova.db.api, 'security_group_get_by_name',
                        return_security_group)
         self.mox.ReplayAll()
 
-        req = webob.Request.blank('/v1.1/123/servers/1/action')
+        req = webob.Request.blank('/v1.1/fake/servers/1/action')
         req.headers['Content-Type'] = 'application/xml'
         req.method = 'POST'
         req.body = """<removeSecurityGroup>
                            <name>test</name>
                     </removeSecurityGroup>"""
         response = req.get_response(fakes.wsgi_app())
         self.assertEquals(response.status_int, 202)
 
 
 class TestSecurityGroupRules(test.TestCase):
     def setUp(self):
         super(TestSecurityGroupRules, self).setUp()
         security_group = {}
         security_group['name'] = "authorize-revoke"
         security_group['description'] = ("Security group created for "
                                         " authorize-revoke testing")
         response = _create_security_group_json(security_group)
         security_group = json.loads(response.body)
         self.parent_security_group = security_group['security_group']
 
         rules = {
                   "security_group_rule": {
                         "ip_protocol": "tcp",
                         "from_port": "22",
                         "to_port": "22",
                         "parent_group_id": self.parent_security_group['id'],
                         "cidr": "10.0.0.0/24"
                     }
                 }
         res = self._create_security_group_rule_json(rules)
         self.assertEquals(res.status_int, 200)
         self.security_group_rule = json.loads(res.body)['security_group_rule']
 
     def tearDown(self):
         super(TestSecurityGroupRules, self).tearDown()
 
     def _create_security_group_rule_json(self, rules):
-        request = webob.Request.blank('/v1.1/123/os-security-group-rules')
+        request = webob.Request.blank('/v1.1/fake/os-security-group-rules')
         request.headers['Content-Type'] = 'application/json'
         request.method = 'POST'
         request.body = json.dumps(rules)
         response = request.get_response(fakes.wsgi_app())
         return response
 
     def _delete_security_group_rule(self, id):
-        request = webob.Request.blank('/v1.1/123/os-security-group-rules/%s'
+        request = webob.Request.blank('/v1.1/fake/os-security-group-rules/%s'
                                       % id)
         request.method = 'DELETE'
         response = request.get_response(fakes.wsgi_app())
         return response
 
     def test_create_by_cidr_json(self):
         rules = {
                   "security_group_rule": {
                         "ip_protocol": "tcp",
                         "from_port": "22",
                         "to_port": "22",
                         "parent_group_id": 2,
                         "cidr": "10.2.3.124/24"
                      }
                   }
 
         response = self._create_security_group_rule_json(rules)
         security_group_rule = json.loads(response.body)['security_group_rule']
         self.assertEquals(response.status_int, 200)
         self.assertNotEquals(security_group_rule['id'], 0)
         self.assertEquals(security_group_rule['parent_group_id'], 2)
         self.assertEquals(security_group_rule['ip_range']['cidr'],
                           "10.2.3.124/24")
 
     def test_create_by_group_id_json(self):
         rules = {
                   "security_group_rule": {
                         "ip_protocol": "tcp",
                         "from_port": "22",
                         "to_port": "22",
                         "group_id": "1",
                         "parent_group_id": "%s"
                                        % self.parent_security_group['id'],
                      }
                   }
 
         response = self._create_security_group_rule_json(rules)
         self.assertEquals(response.status_int, 200)
         security_group_rule = json.loads(response.body)['security_group_rule']
         self.assertNotEquals(security_group_rule['id'], 0)
         self.assertEquals(security_group_rule['parent_group_id'], 2)
 
     def test_create_add_existing_rules_json(self):
         rules = {
               "security_group_rule": {
                   "ip_protocol": "tcp",
                   "from_port": "22",
                   "to_port": "22",
                   "cidr": "10.0.0.0/24",
                   "parent_group_id": "%s" % self.parent_security_group['id'],
                }
             }
 
         response = self._create_security_group_rule_json(rules)
         self.assertEquals(response.status_int, 400)
 
     def test_create_with_no_body_json(self):
-        request = webob.Request.blank('/v1.1/123/os-security-group-rules')
+        request = webob.Request.blank('/v1.1/fake/os-security-group-rules')
         request.headers['Content-Type'] = 'application/json'
         request.method = 'POST'
         request.body = json.dumps(None)
         response = request.get_response(fakes.wsgi_app())
         self.assertEquals(response.status_int, 422)
 
     def test_create_with_no_security_group_rule_in_body_json(self):
-        request = webob.Request.blank('/v1.1/123/os-security-group-rules')
+        request = webob.Request.blank('/v1.1/fake/os-security-group-rules')
         request.headers['Content-Type'] = 'application/json'
         request.method = 'POST'
         body_dict = {'test': "test"}
         request.body = json.dumps(body_dict)
         response = request.get_response(fakes.wsgi_app())
         self.assertEquals(response.status_int, 422)
 
     def test_create_with_invalid_parent_group_id_json(self):
         rules = {
               "security_group_rule": {
                   "ip_protocol": "tcp",
                   "from_port": "22",
                   "to_port": "22",
                   "parent_group_id": "invalid"
                }
             }
 
         response = self._create_security_group_rule_json(rules)
         self.assertEquals(response.status_int, 400)
 
     def test_create_with_non_existing_parent_group_id_json(self):
         rules = {
               "security_group_rule": {
                   "ip_protocol": "tcp",
                   "from_port": "22",
                   "to_port": "22",
                   "group_id": "invalid",
                   "parent_group_id": "1111111111111"
                }
             }
 
         response = self._create_security_group_rule_json(rules)
         self.assertEquals(response.status_int, 404)
 
     def test_create_with_invalid_protocol_json(self):
         rules = {
               "security_group_rule": {
                   "ip_protocol": "invalid-protocol",
                   "from_port": "22",
                   "to_port": "22",
                   "cidr": "10.2.2.0/24",
                   "parent_group_id": "%s" % self.parent_security_group['id'],
                }
             }
 
         response = self._create_security_group_rule_json(rules)
         self.assertEquals(response.status_int, 400)
 
     def test_create_with_no_protocol_json(self):
         rules = {
               "security_group_rule": {
                   "from_port": "22",
                   "to_port": "22",
                   "cidr": "10.2.2.0/24",
                   "parent_group_id": "%s" % self.parent_security_group['id'],
                }
             }
 
         response = self._create_security_group_rule_json(rules)
         self.assertEquals(response.status_int, 400)
 
     def test_create_with_invalid_from_port_json(self):
         rules = {
               "security_group_rule": {
                   "ip_protocol": "tcp",
                   "from_port": "666666",
                   "to_port": "22",
                   "cidr": "10.2.2.0/24",
                   "parent_group_id": "%s" % self.parent_security_group['id'],
                }
             }
 
         response = self._create_security_group_rule_json(rules)
         self.assertEquals(response.status_int, 400)
 
     def test_create_with_invalid_to_port_json(self):
         rules = {
               "security_group_rule": {
                   "ip_protocol": "tcp",
                   "from_port": "22",
                   "to_port": "666666",
                   "cidr": "10.2.2.0/24",
                   "parent_group_id": "%s" % self.parent_security_group['id'],
                }
             }
 
         response = self._create_security_group_rule_json(rules)
         self.assertEquals(response.status_int, 400)
 
     def test_create_with_non_numerical_from_port_json(self):
         rules = {
               "security_group_rule": {
                   "ip_protocol": "tcp",
                   "from_port": "invalid",
                   "to_port": "22",
                   "cidr": "10.2.2.0/24",
                   "parent_group_id": "%s" % self.parent_security_group['id'],
                }
             }
 
         response = self._create_security_group_rule_json(rules)
         self.assertEquals(response.status_int, 400)
 
     def test_create_with_non_numerical_to_port_json(self):
         rules = {
               "security_group_rule": {
                   "ip_protocol": "tcp",
                   "from_port": "22",
                   "to_port": "invalid",
                   "cidr": "10.2.2.0/24",
                   "parent_group_id": "%s" % self.parent_security_group['id'],
                }
             }
 
         response = self._create_security_group_rule_json(rules)
         self.assertEquals(response.status_int, 400)
 
     def test_create_with_no_to_port_json(self):
         rules = {
               "security_group_rule": {
                   "ip_protocol": "tcp",
                   "from_port": "22",
                   "cidr": "10.2.2.0/24",
                   "parent_group_id": "%s" % self.parent_security_group['id'],
                }
             }
 
         response = self._create_security_group_rule_json(rules)
         self.assertEquals(response.status_int, 400)
 
     def test_create_with_invalid_cidr_json(self):
         rules = {
               "security_group_rule": {
                   "ip_protocol": "tcp",
                   "from_port": "22",
                   "to_port": "22",
                   "cidr": "10.2.22222.0/24",
                   "parent_group_id": "%s" % self.parent_security_group['id'],
                }
             }
 
         response = self._create_security_group_rule_json(rules)
         self.assertEquals(response.status_int, 400)
 
     def test_create_with_no_cidr_group_json(self):
         rules = {
               "security_group_rule": {
                   "ip_protocol": "tcp",
                   "from_port": "22",
                   "to_port": "22",
                   "parent_group_id": "%s" % self.parent_security_group['id'],
                }
             }
 
         response = self._create_security_group_rule_json(rules)
         security_group_rule = json.loads(response.body)['security_group_rule']
         self.assertEquals(response.status_int, 200)
         self.assertNotEquals(security_group_rule['id'], 0)
         self.assertEquals(security_group_rule['parent_group_id'],
                           self.parent_security_group['id'])
         self.assertEquals(security_group_rule['ip_range']['cidr'],
                           "0.0.0.0/0")
 
     def test_create_with_invalid_group_id_json(self):
         rules = {
               "security_group_rule": {
                   "ip_protocol": "tcp",
                   "from_port": "22",
                   "to_port": "22",
                   "group_id": "invalid",
                   "parent_group_id": "%s" % self.parent_security_group['id'],
                }
             }
 
         response = self._create_security_group_rule_json(rules)
         self.assertEquals(response.status_int, 400)
 
     def test_create_with_empty_group_id_json(self):
         rules = {
               "security_group_rule": {
                   "ip_protocol": "tcp",
                   "from_port": "22",
                   "to_port": "22",
                   "group_id": "invalid",
                   "parent_group_id": "%s" % self.parent_security_group['id'],
                }
             }
 
         response = self._create_security_group_rule_json(rules)
         self.assertEquals(response.status_int, 400)
 
     def test_create_with_invalid_group_id_json(self):
         rules = {
               "security_group_rule": {
                   "ip_protocol": "tcp",
                   "from_port": "22",
                   "to_port": "22",
                   "group_id": "222222",
                   "parent_group_id": "%s" % self.parent_security_group['id'],
                }
             }
 
         response = self._create_security_group_rule_json(rules)
         self.assertEquals(response.status_int, 400)
 
     def test_create_rule_with_same_group_parent_id_json(self):
         rules = {
               "security_group_rule": {
                   "ip_protocol": "tcp",
                   "from_port": "22",
                   "to_port": "22",
                   "group_id": "%s" % self.parent_security_group['id'],
                   "parent_group_id": "%s" % self.parent_security_group['id'],
                }
             }
 
         response = self._create_security_group_rule_json(rules)
         self.assertEquals(response.status_int, 400)
 
     def test_delete(self):
         response = self._delete_security_group_rule(
                                   self.security_group_rule['id'])
         self.assertEquals(response.status_int, 202)
 
         response = self._delete_security_group_rule(
                                   self.security_group_rule['id'])
         self.assertEquals(response.status_int, 404)
 
     def test_delete_invalid_rule_id(self):
         response = self._delete_security_group_rule('invalid')
         self.assertEquals(response.status_int, 400)
 
     def test_delete_non_existing_rule_id(self):
         response = self._delete_security_group_rule(22222222222222)
         self.assertEquals(response.status_int, 404)
 
 
diff --git a/nova/tests/api/openstack/contrib/test_simple_tenant_usage.py b/nova/tests/api/openstack/contrib/test_simple_tenant_usage.py
index 2430b9d..0e13e36 100644
--- a/nova/tests/api/openstack/contrib/test_simple_tenant_usage.py
+++ b/nova/tests/api/openstack/contrib/test_simple_tenant_usage.py
@@ -70,103 +70,104 @@ def fake_instance_get_active_by_window(self, context, begin, end, project_id):
 class SimpleTenantUsageTest(test.TestCase):
     def setUp(self):
         super(SimpleTenantUsageTest, self).setUp()
         self.stubs.Set(api.API, "get_instance_type",
                        fake_instance_type_get)
         self.stubs.Set(api.API, "get_active_by_window",
                        fake_instance_get_active_by_window)
         self.admin_context = context.RequestContext('fakeadmin_0',
                                                     'faketenant_0',
                                                     is_admin=True)
         self.user_context = context.RequestContext('fakeadmin_0',
                                                    'faketenant_0',
                                                     is_admin=False)
         self.alt_user_context = context.RequestContext('fakeadmin_0',
                                                       'faketenant_1',
                                                        is_admin=False)
         FLAGS.allow_admin_api = True
 
     def test_verify_index(self):
         req = webob.Request.blank(
-                    '/v1.1/123/os-simple-tenant-usage?start=%s&end=%s' %
-                    (START.isoformat(), STOP.isoformat()))
+            '/v1.1/faketenant_0/os-simple-tenant-usage?start=%s&end=%s' %
+            (START.isoformat(), STOP.isoformat()))
         req.method = "GET"
         req.headers["content-type"] = "application/json"
 
         res = req.get_response(fakes.wsgi_app(
                                fake_auth_context=self.admin_context))
 
         self.assertEqual(res.status_int, 200)
         res_dict = json.loads(res.body)
         usages = res_dict['tenant_usages']
         from nova import log as logging
         logging.warn(usages)
         for i in xrange(TENANTS):
             self.assertEqual(int(usages[i]['total_hours']),
                              SERVERS * HOURS)
             self.assertEqual(int(usages[i]['total_local_gb_usage']),
                              SERVERS * LOCAL_GB * HOURS)
             self.assertEqual(int(usages[i]['total_memory_mb_usage']),
                              SERVERS * MEMORY_MB * HOURS)
             self.assertEqual(int(usages[i]['total_vcpus_usage']),
                              SERVERS * VCPUS * HOURS)
             self.assertFalse(usages[i].get('server_usages'))
 
     def test_verify_detailed_index(self):
         req = webob.Request.blank(
-                    '/v1.1/123/os-simple-tenant-usage?'
+                    '/v1.1/faketenant_0/os-simple-tenant-usage?'
                     'detailed=1&start=%s&end=%s' %
                     (START.isoformat(), STOP.isoformat()))
         req.method = "GET"
         req.headers["content-type"] = "application/json"
 
         res = req.get_response(fakes.wsgi_app(
                                fake_auth_context=self.admin_context))
         self.assertEqual(res.status_int, 200)
         res_dict = json.loads(res.body)
         usages = res_dict['tenant_usages']
         for i in xrange(TENANTS):
             servers = usages[i]['server_usages']
             for j in xrange(SERVERS):
                 self.assertEqual(int(servers[j]['hours']), HOURS)
 
     def test_verify_index_fails_for_nonadmin(self):
         req = webob.Request.blank(
-                    '/v1.1/123/os-simple-tenant-usage?'
+                    '/v1.1/faketenant_0/os-simple-tenant-usage?'
                     'detailed=1&start=%s&end=%s' %
                     (START.isoformat(), STOP.isoformat()))
         req.method = "GET"
         req.headers["content-type"] = "application/json"
 
-        res = req.get_response(fakes.wsgi_app())
+        res = req.get_response(fakes.wsgi_app(
+                               fake_auth_context=self.user_context))
         self.assertEqual(res.status_int, 403)
 
     def test_verify_show(self):
         req = webob.Request.blank(
                   '/v1.1/faketenant_0/os-simple-tenant-usage/'
                   'faketenant_0?start=%s&end=%s' %
                   (START.isoformat(), STOP.isoformat()))
         req.method = "GET"
         req.headers["content-type"] = "application/json"
 
         res = req.get_response(fakes.wsgi_app(
                                fake_auth_context=self.user_context))
         self.assertEqual(res.status_int, 200)
         res_dict = json.loads(res.body)
 
         usage = res_dict['tenant_usage']
         servers = usage['server_usages']
         self.assertEqual(len(usage['server_usages']), SERVERS)
         for j in xrange(SERVERS):
             self.assertEqual(int(servers[j]['hours']), HOURS)
 
     def test_verify_show_cant_view_other_tenant(self):
         req = webob.Request.blank(
                   '/v1.1/faketenant_1/os-simple-tenant-usage/'
                   'faketenant_0?start=%s&end=%s' %
                   (START.isoformat(), STOP.isoformat()))
         req.method = "GET"
         req.headers["content-type"] = "application/json"
 
         res = req.get_response(fakes.wsgi_app(
                                fake_auth_context=self.alt_user_context))
         self.assertEqual(res.status_int, 403)
diff --git a/nova/tests/api/openstack/contrib/test_virtual_interfaces.py b/nova/tests/api/openstack/contrib/test_virtual_interfaces.py
index 1db253b..e472407 100644
--- a/nova/tests/api/openstack/contrib/test_virtual_interfaces.py
+++ b/nova/tests/api/openstack/contrib/test_virtual_interfaces.py
@@ -35,21 +35,21 @@ def compute_api_get(self, context, server_id):
 class ServerVirtualInterfaceTest(test.TestCase):
 
     def setUp(self):
         super(ServerVirtualInterfaceTest, self).setUp()
         self.controller = ServerVirtualInterfaceController()
         self.stubs.Set(compute.api.API, "get", compute_api_get)
 
     def tearDown(self):
         super(ServerVirtualInterfaceTest, self).tearDown()
 
     def test_get_virtual_interfaces_list(self):
-        req = webob.Request.blank('/v1.1/123/servers/1/os-virtual-interfaces')
+        req = webob.Request.blank('/v1.1/fake/servers/1/os-virtual-interfaces')
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 200)
         res_dict = json.loads(res.body)
         response = {'virtual_interfaces': [
                         {'id': '00000000-0000-0000-0000-00000000000000000',
                          'mac_address': '00-00-00-00-00-00'},
                         {'id': '11111111-1111-1111-1111-11111111111111111',
                          'mac_address': '11-11-11-11-11-11'}]}
         self.assertEqual(res_dict, response)
diff --git a/nova/tests/api/openstack/contrib/test_vsa.py b/nova/tests/api/openstack/contrib/test_vsa.py
index 311b6cb..2e171bf 100644
--- a/nova/tests/api/openstack/contrib/test_vsa.py
+++ b/nova/tests/api/openstack/contrib/test_vsa.py
@@ -95,135 +95,135 @@ def stub_vsa_get_all(self, context):
 class VSAApiTest(test.TestCase):
     def setUp(self):
         super(VSAApiTest, self).setUp()
         self.stubs = stubout.StubOutForTesting()
         fakes.FakeAuthManager.reset_fake_data()
         fakes.FakeAuthDatabase.data = {}
         fakes.stub_out_networking(self.stubs)
         fakes.stub_out_rate_limiting(self.stubs)
         fakes.stub_out_auth(self.stubs)
         self.stubs.Set(vsa.api.API, "create", stub_vsa_create)
         self.stubs.Set(vsa.api.API, "delete", stub_vsa_delete)
         self.stubs.Set(vsa.api.API, "get", stub_vsa_get)
         self.stubs.Set(vsa.api.API, "get_all", stub_vsa_get_all)
 
         self.context = context.get_admin_context()
 
     def tearDown(self):
         self.stubs.UnsetAll()
         super(VSAApiTest, self).tearDown()
 
     def test_vsa_create(self):
         global last_param
         last_param = {}
 
         vsa = {"displayName": "VSA Test Name",
                "displayDescription": "VSA Test Desc"}
         body = dict(vsa=vsa)
-        req = webob.Request.blank('/v1.1/777/zadr-vsa')
+        req = webob.Request.blank('/v1.1/fake/zadr-vsa')
         req.method = 'POST'
         req.body = json.dumps(body)
         req.headers['content-type'] = 'application/json'
 
         resp = req.get_response(fakes.wsgi_app())
         self.assertEqual(resp.status_int, 200)
 
         # Compare if parameters were correctly passed to stub
         self.assertEqual(last_param['display_name'], "VSA Test Name")
         self.assertEqual(last_param['display_description'], "VSA Test Desc")
 
         resp_dict = json.loads(resp.body)
         self.assertTrue('vsa' in resp_dict)
         self.assertEqual(resp_dict['vsa']['displayName'], vsa['displayName'])
         self.assertEqual(resp_dict['vsa']['displayDescription'],
                          vsa['displayDescription'])
 
     def test_vsa_create_no_body(self):
-        req = webob.Request.blank('/v1.1/777/zadr-vsa')
+        req = webob.Request.blank('/v1.1/fake/zadr-vsa')
         req.method = 'POST'
         req.body = json.dumps({})
         req.headers['content-type'] = 'application/json'
 
         resp = req.get_response(fakes.wsgi_app())
         self.assertEqual(resp.status_int, 422)
 
     def test_vsa_delete(self):
         global last_param
         last_param = {}
 
         vsa_id = 123
-        req = webob.Request.blank('/v1.1/777/zadr-vsa/%d' % vsa_id)
+        req = webob.Request.blank('/v1.1/fake/zadr-vsa/%d' % vsa_id)
         req.method = 'DELETE'
 
         resp = req.get_response(fakes.wsgi_app())
         self.assertEqual(resp.status_int, 200)
         self.assertEqual(str(last_param['vsa_id']), str(vsa_id))
 
     def test_vsa_delete_invalid_id(self):
         global last_param
         last_param = {}
 
         vsa_id = 234
-        req = webob.Request.blank('/v1.1/777/zadr-vsa/%d' % vsa_id)
+        req = webob.Request.blank('/v1.1/fake/zadr-vsa/%d' % vsa_id)
         req.method = 'DELETE'
 
         resp = req.get_response(fakes.wsgi_app())
         self.assertEqual(resp.status_int, 404)
         self.assertEqual(str(last_param['vsa_id']), str(vsa_id))
 
     def test_vsa_show(self):
         global last_param
         last_param = {}
 
         vsa_id = 123
-        req = webob.Request.blank('/v1.1/777/zadr-vsa/%d' % vsa_id)
+        req = webob.Request.blank('/v1.1/fake/zadr-vsa/%d' % vsa_id)
         req.method = 'GET'
         resp = req.get_response(fakes.wsgi_app())
         self.assertEqual(resp.status_int, 200)
         self.assertEqual(str(last_param['vsa_id']), str(vsa_id))
 
         resp_dict = json.loads(resp.body)
         self.assertTrue('vsa' in resp_dict)
         self.assertEqual(resp_dict['vsa']['id'], str(vsa_id))
 
     def test_vsa_show_invalid_id(self):
         global last_param
         last_param = {}
 
         vsa_id = 234
-        req = webob.Request.blank('/v1.1/777/zadr-vsa/%d' % vsa_id)
+        req = webob.Request.blank('/v1.1/fake/zadr-vsa/%d' % vsa_id)
         req.method = 'GET'
         resp = req.get_response(fakes.wsgi_app())
         self.assertEqual(resp.status_int, 404)
         self.assertEqual(str(last_param['vsa_id']), str(vsa_id))
 
     def test_vsa_index(self):
-        req = webob.Request.blank('/v1.1/777/zadr-vsa')
+        req = webob.Request.blank('/v1.1/fake/zadr-vsa')
         req.method = 'GET'
         resp = req.get_response(fakes.wsgi_app())
         self.assertEqual(resp.status_int, 200)
 
         resp_dict = json.loads(resp.body)
 
         self.assertTrue('vsaSet' in resp_dict)
         resp_vsas = resp_dict['vsaSet']
         self.assertEqual(len(resp_vsas), 1)
 
         resp_vsa = resp_vsas.pop()
         self.assertEqual(resp_vsa['id'], 123)
 
     def test_vsa_detail(self):
-        req = webob.Request.blank('/v1.1/777/zadr-vsa/detail')
+        req = webob.Request.blank('/v1.1/fake/zadr-vsa/detail')
         req.method = 'GET'
         resp = req.get_response(fakes.wsgi_app())
         self.assertEqual(resp.status_int, 200)
 
         resp_dict = json.loads(resp.body)
 
         self.assertTrue('vsaSet' in resp_dict)
         resp_vsas = resp_dict['vsaSet']
         self.assertEqual(len(resp_vsas), 1)
 
         resp_vsa = resp_vsas.pop()
         self.assertEqual(resp_vsa['id'], 123)
 
 
@@ -297,146 +297,149 @@ def return_vsa(context, vsa_id):
 class VSAVolumeApiTest(test.TestCase):
 
     def setUp(self, test_obj=None, test_objs=None):
         super(VSAVolumeApiTest, self).setUp()
         self.stubs = stubout.StubOutForTesting()
         fakes.FakeAuthManager.reset_fake_data()
         fakes.FakeAuthDatabase.data = {}
         fakes.stub_out_networking(self.stubs)
         fakes.stub_out_rate_limiting(self.stubs)
         fakes.stub_out_auth(self.stubs)
         self.stubs.Set(nova.db.api, 'vsa_get', return_vsa)
         self.stubs.Set(vsa.api.API, "get_vsa_volume_type",
                         stub_get_vsa_volume_type)
 
         self.stubs.Set(volume.api.API, "update", stub_volume_update)
         self.stubs.Set(volume.api.API, "delete", stub_volume_delete)
         self.stubs.Set(volume.api.API, "get", stub_volume_get)
         self.stubs.Set(volume.api.API, "get_all", stub_volume_get_all)
 
         self.context = context.get_admin_context()
         self.test_obj = test_obj if test_obj else "volume"
         self.test_objs = test_objs if test_objs else "volumes"
 
     def tearDown(self):
         self.stubs.UnsetAll()
         super(VSAVolumeApiTest, self).tearDown()
 
     def test_vsa_volume_create(self):
         self.stubs.Set(volume.api.API, "create", stub_volume_create)
 
         vol = {"size": 100,
                "displayName": "VSA Volume Test Name",
                "displayDescription": "VSA Volume Test Desc"}
         body = {self.test_obj: vol}
-        req = webob.Request.blank('/v1.1/777/zadr-vsa/123/%s' % self.test_objs)
+        req = webob.Request.blank('/v1.1/fake/zadr-vsa/123/%s' %
+                                  self.test_objs)
         req.method = 'POST'
         req.body = json.dumps(body)
         req.headers['content-type'] = 'application/json'
         resp = req.get_response(fakes.wsgi_app())
 
         if self.test_obj == "volume":
             self.assertEqual(resp.status_int, 200)
 
             resp_dict = json.loads(resp.body)
             self.assertTrue(self.test_obj in resp_dict)
             self.assertEqual(resp_dict[self.test_obj]['size'],
                              vol['size'])
             self.assertEqual(resp_dict[self.test_obj]['displayName'],
                              vol['displayName'])
             self.assertEqual(resp_dict[self.test_obj]['displayDescription'],
                              vol['displayDescription'])
         else:
             self.assertEqual(resp.status_int, 400)
 
     def test_vsa_volume_create_no_body(self):
-        req = webob.Request.blank('/v1.1/777/zadr-vsa/123/%s' % self.test_objs)
+        req = webob.Request.blank('/v1.1/fake/zadr-vsa/123/%s' %
+                                  self.test_objs)
         req.method = 'POST'
         req.body = json.dumps({})
         req.headers['content-type'] = 'application/json'
 
         resp = req.get_response(fakes.wsgi_app())
         if self.test_obj == "volume":
             self.assertEqual(resp.status_int, 422)
         else:
             self.assertEqual(resp.status_int, 400)
 
     def test_vsa_volume_index(self):
-        req = webob.Request.blank('/v1.1/777/zadr-vsa/123/%s' % self.test_objs)
+        req = webob.Request.blank('/v1.1/fake/zadr-vsa/123/%s' %
+                                  self.test_objs)
         resp = req.get_response(fakes.wsgi_app())
         self.assertEqual(resp.status_int, 200)
 
     def test_vsa_volume_detail(self):
-        req = webob.Request.blank('/v1.1/777/zadr-vsa/123/%s/detail' % \
+        req = webob.Request.blank('/v1.1/fake/zadr-vsa/123/%s/detail' % \
                 self.test_objs)
         resp = req.get_response(fakes.wsgi_app())
         self.assertEqual(resp.status_int, 200)
 
     def test_vsa_volume_show(self):
         obj_num = 234 if self.test_objs == "volumes" else 345
-        req = webob.Request.blank('/v1.1/777/zadr-vsa/123/%s/%s' % \
+        req = webob.Request.blank('/v1.1/fake/zadr-vsa/123/%s/%s' % \
                 (self.test_objs, obj_num))
         resp = req.get_response(fakes.wsgi_app())
         self.assertEqual(resp.status_int, 200)
 
     def test_vsa_volume_show_no_vsa_assignment(self):
-        req = webob.Request.blank('/v1.1/777/zadr-vsa/4/%s/333' % \
+        req = webob.Request.blank('/v1.1/fake/zadr-vsa/4/%s/333' % \
                 (self.test_objs))
         resp = req.get_response(fakes.wsgi_app())
         self.assertEqual(resp.status_int, 400)
 
     def test_vsa_volume_show_no_volume(self):
         self.stubs.Set(volume.api.API, "get", stub_volume_get_notfound)
 
-        req = webob.Request.blank('/v1.1/777/zadr-vsa/123/%s/333' % \
+        req = webob.Request.blank('/v1.1/fake/zadr-vsa/123/%s/333' % \
                 (self.test_objs))
         resp = req.get_response(fakes.wsgi_app())
         self.assertEqual(resp.status_int, 404)
 
     def test_vsa_volume_update(self):
         obj_num = 234 if self.test_objs == "volumes" else 345
         update = {"status": "available",
                   "displayName": "Test Display name"}
         body = {self.test_obj: update}
-        req = webob.Request.blank('/v1.1/777/zadr-vsa/123/%s/%s' % \
+        req = webob.Request.blank('/v1.1/fake/zadr-vsa/123/%s/%s' % \
                 (self.test_objs, obj_num))
         req.method = 'PUT'
         req.body = json.dumps(body)
         req.headers['content-type'] = 'application/json'
 
         resp = req.get_response(fakes.wsgi_app())
         if self.test_obj == "volume":
             self.assertEqual(resp.status_int, 202)
         else:
             self.assertEqual(resp.status_int, 400)
 
     def test_vsa_volume_delete(self):
         obj_num = 234 if self.test_objs == "volumes" else 345
-        req = webob.Request.blank('/v1.1/777/zadr-vsa/123/%s/%s' % \
+        req = webob.Request.blank('/v1.1/fake/zadr-vsa/123/%s/%s' % \
                 (self.test_objs, obj_num))
         req.method = 'DELETE'
         resp = req.get_response(fakes.wsgi_app())
         if self.test_obj == "volume":
             self.assertEqual(resp.status_int, 202)
         else:
             self.assertEqual(resp.status_int, 400)
 
     def test_vsa_volume_delete_no_vsa_assignment(self):
-        req = webob.Request.blank('/v1.1/777/zadr-vsa/4/%s/333' % \
+        req = webob.Request.blank('/v1.1/fake/zadr-vsa/4/%s/333' % \
                 (self.test_objs))
         req.method = 'DELETE'
         resp = req.get_response(fakes.wsgi_app())
         self.assertEqual(resp.status_int, 400)
 
     def test_vsa_volume_delete_no_volume(self):
         self.stubs.Set(volume.api.API, "get", stub_volume_get_notfound)
 
-        req = webob.Request.blank('/v1.1/777/zadr-vsa/123/%s/333' % \
+        req = webob.Request.blank('/v1.1/fake/zadr-vsa/123/%s/333' % \
                 (self.test_objs))
         req.method = 'DELETE'
         resp = req.get_response(fakes.wsgi_app())
         if self.test_obj == "volume":
             self.assertEqual(resp.status_int, 404)
         else:
             self.assertEqual(resp.status_int, 400)
 
 
diff --git a/nova/tests/api/openstack/test_extensions.py b/nova/tests/api/openstack/test_extensions.py
index 0e9f9fa..2beb4b6 100644
--- a/nova/tests/api/openstack/test_extensions.py
+++ b/nova/tests/api/openstack/test_extensions.py
@@ -81,163 +81,163 @@ class StubExtensionManager(object):
 class ExtensionControllerTest(test.TestCase):
 
     def setUp(self):
         super(ExtensionControllerTest, self).setUp()
         ext_path = os.path.join(os.path.dirname(__file__), "extensions")
         self.flags(osapi_extensions_path=ext_path)
         self.ext_list = [
             "Createserverext",
             "FlavorExtraSpecs",
             "FlavorExtraData",
             "Floating_ips",
             "Fox In Socks",
             "Hosts",
             "Keypairs",
             "Multinic",
             "Quotas",
             "Rescue",
             "SecurityGroups",
             "SimpleTenantUsage",
             "VSAs",
             "VirtualInterfaces",
             "Volumes",
             "VolumeTypes",
             ]
         self.ext_list.sort()
 
     def test_list_extensions_json(self):
         app = openstack.APIRouterV11()
         ext_midware = extensions.ExtensionMiddleware(app)
-        request = webob.Request.blank("/123/extensions")
+        request = webob.Request.blank("/fake/extensions")
         response = request.get_response(ext_midware)
         self.assertEqual(200, response.status_int)
 
         # Make sure we have all the extensions.
         data = json.loads(response.body)
         names = [x['name'] for x in data['extensions']]
         names.sort()
         self.assertEqual(names, self.ext_list)
 
         # Make sure that at least Fox in Sox is correct.
         (fox_ext, ) = [
             x for x in data['extensions'] if x['alias'] == 'FOXNSOX']
         self.assertEqual(fox_ext, {
                 'namespace': 'http://www.fox.in.socks/api/ext/pie/v1.0',
                 'name': 'Fox In Socks',
                 'updated': '2011-01-22T13:25:27-06:00',
                 'description': 'The Fox In Socks Extension',
                 'alias': 'FOXNSOX',
                 'links': []
             },
         )
 
     def test_get_extension_json(self):
         app = openstack.APIRouterV11()
         ext_midware = extensions.ExtensionMiddleware(app)
-        request = webob.Request.blank("/123/extensions/FOXNSOX")
+        request = webob.Request.blank("/fake/extensions/FOXNSOX")
         response = request.get_response(ext_midware)
         self.assertEqual(200, response.status_int)
 
         data = json.loads(response.body)
         self.assertEqual(data['extension'], {
                 "namespace": "http://www.fox.in.socks/api/ext/pie/v1.0",
                 "name": "Fox In Socks",
                 "updated": "2011-01-22T13:25:27-06:00",
                 "description": "The Fox In Socks Extension",
                 "alias": "FOXNSOX",
                 "links": []})
 
     def test_get_non_existing_extension_json(self):
         app = openstack.APIRouterV11()
         ext_midware = extensions.ExtensionMiddleware(app)
-        request = webob.Request.blank("/123/extensions/4")
+        request = webob.Request.blank("/fake/extensions/4")
         response = request.get_response(ext_midware)
         self.assertEqual(404, response.status_int)
 
     def test_list_extensions_xml(self):
         app = openstack.APIRouterV11()
         ext_midware = extensions.ExtensionMiddleware(app)
-        request = webob.Request.blank("/123/extensions")
+        request = webob.Request.blank("/fake/extensions")
         request.accept = "application/xml"
         response = request.get_response(ext_midware)
         self.assertEqual(200, response.status_int)
         print response.body
 
         root = etree.XML(response.body)
         self.assertEqual(root.tag.split('extensions')[0], NS)
 
         # Make sure we have all the extensions.
         exts = root.findall('{0}extension'.format(NS))
         self.assertEqual(len(exts), len(self.ext_list))
 
         # Make sure that at least Fox in Sox is correct.
         (fox_ext, ) = [x for x in exts if x.get('alias') == 'FOXNSOX']
         self.assertEqual(fox_ext.get('name'), 'Fox In Socks')
         self.assertEqual(fox_ext.get('namespace'),
             'http://www.fox.in.socks/api/ext/pie/v1.0')
         self.assertEqual(fox_ext.get('updated'), '2011-01-22T13:25:27-06:00')
         self.assertEqual(fox_ext.findtext('{0}description'.format(NS)),
             'The Fox In Socks Extension')
 
         xmlutil.validate_schema(root, 'extensions')
 
     def test_get_extension_xml(self):
         app = openstack.APIRouterV11()
         ext_midware = extensions.ExtensionMiddleware(app)
-        request = webob.Request.blank("/123/extensions/FOXNSOX")
+        request = webob.Request.blank("/fake/extensions/FOXNSOX")
         request.accept = "application/xml"
         response = request.get_response(ext_midware)
         self.assertEqual(200, response.status_int)
         xml = response.body
         print xml
 
         root = etree.XML(xml)
         self.assertEqual(root.tag.split('extension')[0], NS)
         self.assertEqual(root.get('alias'), 'FOXNSOX')
         self.assertEqual(root.get('name'), 'Fox In Socks')
         self.assertEqual(root.get('namespace'),
             'http://www.fox.in.socks/api/ext/pie/v1.0')
         self.assertEqual(root.get('updated'), '2011-01-22T13:25:27-06:00')
         self.assertEqual(root.findtext('{0}description'.format(NS)),
             'The Fox In Socks Extension')
 
         xmlutil.validate_schema(root, 'extension')
 
 
 class ResourceExtensionTest(test.TestCase):
 
     def setUp(self):
         super(ResourceExtensionTest, self).setUp()
         ext_path = os.path.join(os.path.dirname(__file__), "extensions")
         self.flags(osapi_extensions_path=ext_path)
 
     def test_no_extension_present(self):
         manager = StubExtensionManager(None)
         app = openstack.APIRouterV11()
         ext_midware = extensions.ExtensionMiddleware(app, manager)
         request = webob.Request.blank("/blah")
         response = request.get_response(ext_midware)
         self.assertEqual(404, response.status_int)
 
     def test_get_resources(self):
         res_ext = extensions.ResourceExtension('tweedles',
                                                StubController(response_body))
         manager = StubExtensionManager(res_ext)
         app = openstack.APIRouterV11()
         ext_midware = extensions.ExtensionMiddleware(app, manager)
-        request = webob.Request.blank("/123/tweedles")
+        request = webob.Request.blank("/fake/tweedles")
         response = request.get_response(ext_midware)
         self.assertEqual(200, response.status_int)
         self.assertEqual(response_body, response.body)
 
     def test_get_resources_with_controller(self):
         res_ext = extensions.ResourceExtension('tweedles',
                                                StubController(response_body))
         manager = StubExtensionManager(res_ext)
         app = openstack.APIRouterV11()
         ext_midware = extensions.ExtensionMiddleware(app, manager)
-        request = webob.Request.blank("/123/tweedles")
+        request = webob.Request.blank("/fake/tweedles")
         response = request.get_response(ext_midware)
         self.assertEqual(200, response.status_int)
         self.assertEqual(response_body, response.body)
 
 
@@ -250,111 +250,111 @@ class InvalidExtension(object):
 class ExtensionManagerTest(test.TestCase):
 
     response_body = "Try to say this Mr. Knox, sir..."
 
     def setUp(self):
         super(ExtensionManagerTest, self).setUp()
         ext_path = os.path.join(os.path.dirname(__file__), "extensions")
         self.flags(osapi_extensions_path=ext_path)
 
     def test_get_resources(self):
         app = openstack.APIRouterV11()
         ext_midware = extensions.ExtensionMiddleware(app)
-        request = webob.Request.blank("/123/foxnsocks")
+        request = webob.Request.blank("/fake/foxnsocks")
         response = request.get_response(ext_midware)
         self.assertEqual(200, response.status_int)
         self.assertEqual(response_body, response.body)
 
     def test_invalid_extensions(self):
         app = openstack.APIRouterV11()
         ext_midware = extensions.ExtensionMiddleware(app)
         ext_mgr = ext_midware.ext_mgr
         ext_mgr.add_extension(InvalidExtension())
         self.assertTrue('FOXNSOX' in ext_mgr.extensions)
         self.assertTrue('THIRD' not in ext_mgr.extensions)
 
 
 class ActionExtensionTest(test.TestCase):
 
     def setUp(self):
         super(ActionExtensionTest, self).setUp()
         ext_path = os.path.join(os.path.dirname(__file__), "extensions")
         self.flags(osapi_extensions_path=ext_path)
 
     def _send_server_action_request(self, url, body):
         app = openstack.APIRouterV11()
         ext_midware = extensions.ExtensionMiddleware(app)
         request = webob.Request.blank(url)
         request.method = 'POST'
         request.content_type = 'application/json'
         request.body = json.dumps(body)
         response = request.get_response(ext_midware)
         return response
 
     def test_extended_action(self):
         body = dict(add_tweedle=dict(name="test"))
-        url = "/123/servers/1/action"
+        url = "/fake/servers/1/action"
         response = self._send_server_action_request(url, body)
         self.assertEqual(200, response.status_int)
         self.assertEqual("Tweedle Beetle Added.", response.body)
 
         body = dict(delete_tweedle=dict(name="test"))
         response = self._send_server_action_request(url, body)
         self.assertEqual(200, response.status_int)
         self.assertEqual("Tweedle Beetle Deleted.", response.body)
 
     def test_invalid_action_body(self):
         body = dict(blah=dict(name="test"))  # Doesn't exist
-        url = "/123/servers/1/action"
+        url = "/fake/servers/1/action"
         response = self._send_server_action_request(url, body)
         self.assertEqual(400, response.status_int)
 
     def test_invalid_action(self):
         body = dict(blah=dict(name="test"))
-        url = "/123/fdsa/1/action"
+        url = "/fake/fdsa/1/action"
         response = self._send_server_action_request(url, body)
         self.assertEqual(404, response.status_int)
 
 
 class RequestExtensionTest(test.TestCase):
 
     def setUp(self):
         super(RequestExtensionTest, self).setUp()
         ext_path = os.path.join(os.path.dirname(__file__), "extensions")
         self.flags(osapi_extensions_path=ext_path)
 
     def test_get_resources_with_stub_mgr(self):
 
         def _req_handler(req, res):
             # only handle JSON responses
             data = json.loads(res.body)
             data['flavor']['googoose'] = req.GET.get('chewing')
             res.body = json.dumps(data)
             return res
 
         req_ext = extensions.RequestExtension('GET',
-                                                '/v1.1/123/flavors/:(id)',
+                                                '/v1.1/fake/flavors/:(id)',
                                                 _req_handler)
 
         manager = StubExtensionManager(None, None, req_ext)
         app = fakes.wsgi_app()
         ext_midware = extensions.ExtensionMiddleware(app, manager)
-        request = webob.Request.blank("/v1.1/123/flavors/1?chewing=bluegoo")
+        request = webob.Request.blank("/v1.1/fake/flavors/1?chewing=bluegoo")
         request.environ['api.version'] = '1.1'
         response = request.get_response(ext_midware)
         self.assertEqual(200, response.status_int)
         response_data = json.loads(response.body)
         self.assertEqual('bluegoo', response_data['flavor']['googoose'])
 
     def test_get_resources_with_mgr(self):
 
         app = fakes.wsgi_app()
         ext_midware = extensions.ExtensionMiddleware(app)
-        request = webob.Request.blank("/v1.1/123/flavors/1?chewing=newblue")
+        request = webob.Request.blank("/v1.1/fake/flavors/1?chewing=newblue")
         request.environ['api.version'] = '1.1'
         response = request.get_response(ext_midware)
         self.assertEqual(200, response.status_int)
         response_data = json.loads(response.body)
         self.assertEqual('newblue', response_data['flavor']['googoose'])
         self.assertEqual("Pig Bands!", response_data['big_bands'])
 
 
diff --git a/nova/tests/api/openstack/test_flavors_extra_specs.py b/nova/tests/api/openstack/test_flavors_extra_specs.py
index f382d06..53cfa04 100644
--- a/nova/tests/api/openstack/test_flavors_extra_specs.py
+++ b/nova/tests/api/openstack/test_flavors_extra_specs.py
@@ -57,121 +57,121 @@ def stub_flavor_extra_specs():
 class FlavorsExtraSpecsTest(test.TestCase):
 
     def setUp(self):
         super(FlavorsExtraSpecsTest, self).setUp()
         fakes.stub_out_key_pair_funcs(self.stubs)
 
     def test_index(self):
         self.stubs.Set(nova.db.api, 'instance_type_extra_specs_get',
                        return_flavor_extra_specs)
-        request = webob.Request.blank('/v1.1/123/flavors/1/os-extra_specs')
+        request = webob.Request.blank('/v1.1/fake/flavors/1/os-extra_specs')
         res = request.get_response(fakes.wsgi_app())
         self.assertEqual(200, res.status_int)
         res_dict = json.loads(res.body)
         self.assertEqual('application/json', res.headers['Content-Type'])
         self.assertEqual('value1', res_dict['extra_specs']['key1'])
 
     def test_index_no_data(self):
         self.stubs.Set(nova.db.api, 'instance_type_extra_specs_get',
                        return_empty_flavor_extra_specs)
-        req = webob.Request.blank('/v1.1/123/flavors/1/os-extra_specs')
+        req = webob.Request.blank('/v1.1/fake/flavors/1/os-extra_specs')
         res = req.get_response(fakes.wsgi_app())
         res_dict = json.loads(res.body)
         self.assertEqual(200, res.status_int)
         self.assertEqual('application/json', res.headers['Content-Type'])
         self.assertEqual(0, len(res_dict['extra_specs']))
 
     def test_show(self):
         self.stubs.Set(nova.db.api, 'instance_type_extra_specs_get',
                        return_flavor_extra_specs)
-        req = webob.Request.blank('/v1.1/123/flavors/1/os-extra_specs/key5')
+        req = webob.Request.blank('/v1.1/fake/flavors/1/os-extra_specs/key5')
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(200, res.status_int)
         res_dict = json.loads(res.body)
         self.assertEqual('application/json', res.headers['Content-Type'])
         self.assertEqual('value5', res_dict['key5'])
 
     def test_show_spec_not_found(self):
         self.stubs.Set(nova.db.api, 'instance_type_extra_specs_get',
                        return_empty_flavor_extra_specs)
-        req = webob.Request.blank('/v1.1/123/flavors/1/os-extra_specs/key6')
+        req = webob.Request.blank('/v1.1/fake/flavors/1/os-extra_specs/key6')
         res = req.get_response(fakes.wsgi_app())
         res_dict = json.loads(res.body)
         self.assertEqual(404, res.status_int)
 
     def test_delete(self):
         self.stubs.Set(nova.db.api, 'instance_type_extra_specs_delete',
                        delete_flavor_extra_specs)
-        req = webob.Request.blank('/v1.1/123/flavors/1/os-extra_specs/key5')
+        req = webob.Request.blank('/v1.1/fake/flavors/1/os-extra_specs/key5')
         req.method = 'DELETE'
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(200, res.status_int)
 
     def test_create(self):
         self.stubs.Set(nova.db.api,
                        'instance_type_extra_specs_update_or_create',
                        return_create_flavor_extra_specs)
-        req = webob.Request.blank('/v1.1/123/flavors/1/os-extra_specs')
+        req = webob.Request.blank('/v1.1/fake/flavors/1/os-extra_specs')
         req.method = 'POST'
         req.body = '{"extra_specs": {"key1": "value1"}}'
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         res_dict = json.loads(res.body)
         self.assertEqual(200, res.status_int)
         self.assertEqual('application/json', res.headers['Content-Type'])
         self.assertEqual('value1', res_dict['extra_specs']['key1'])
 
     def test_create_empty_body(self):
         self.stubs.Set(nova.db.api,
                        'instance_type_extra_specs_update_or_create',
                        return_create_flavor_extra_specs)
-        req = webob.Request.blank('/v1.1/123/flavors/1/os-extra_specs')
+        req = webob.Request.blank('/v1.1/fake/flavors/1/os-extra_specs')
         req.method = 'POST'
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(400, res.status_int)
 
     def test_update_item(self):
         self.stubs.Set(nova.db.api,
                        'instance_type_extra_specs_update_or_create',
                        return_create_flavor_extra_specs)
-        req = webob.Request.blank('/v1.1/123/flavors/1/os-extra_specs/key1')
+        req = webob.Request.blank('/v1.1/fake/flavors/1/os-extra_specs/key1')
         req.method = 'PUT'
         req.body = '{"key1": "value1"}'
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(200, res.status_int)
         self.assertEqual('application/json', res.headers['Content-Type'])
         res_dict = json.loads(res.body)
         self.assertEqual('value1', res_dict['key1'])
 
     def test_update_item_empty_body(self):
         self.stubs.Set(nova.db.api,
                        'instance_type_extra_specs_update_or_create',
                        return_create_flavor_extra_specs)
-        req = webob.Request.blank('/v1.1/123/flavors/1/os-extra_specs/key1')
+        req = webob.Request.blank('/v1.1/fake/flavors/1/os-extra_specs/key1')
         req.method = 'PUT'
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(400, res.status_int)
 
     def test_update_item_too_many_keys(self):
         self.stubs.Set(nova.db.api,
                        'instance_type_extra_specs_update_or_create',
                        return_create_flavor_extra_specs)
-        req = webob.Request.blank('/v1.1/123/flavors/1/os-extra_specs/key1')
+        req = webob.Request.blank('/v1.1/fake/flavors/1/os-extra_specs/key1')
         req.method = 'PUT'
         req.body = '{"key1": "value1", "key2": "value2"}'
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(400, res.status_int)
 
     def test_update_item_body_uri_mismatch(self):
         self.stubs.Set(nova.db.api,
                        'instance_type_extra_specs_update_or_create',
                        return_create_flavor_extra_specs)
-        req = webob.Request.blank('/v1.1/123/flavors/1/os-extra_specs/bad')
+        req = webob.Request.blank('/v1.1/fake/flavors/1/os-extra_specs/bad')
         req.method = 'PUT'
         req.body = '{"key1": "value1"}'
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(400, res.status_int)
diff --git a/nova/tests/api/openstack/test_image_metadata.py b/nova/tests/api/openstack/test_image_metadata.py
index fe42e35..ea5bba5 100644
--- a/nova/tests/api/openstack/test_image_metadata.py
+++ b/nova/tests/api/openstack/test_image_metadata.py
@@ -32,210 +32,210 @@ FLAGS = flags.FLAGS
 class ImageMetaDataTest(test.TestCase):
 
     IMAGE_FIXTURES = [
         {'status': 'active',
         'name': 'image1',
         'deleted': False,
         'container_format': None,
         'checksum': None,
         'created_at': '2011-03-22T17:40:15',
         'disk_format': None,
         'updated_at': '2011-03-22T17:40:15',
         'id': '1',
         'location': 'file:///var/lib/glance/images/1',
         'is_public': True,
         'deleted_at': None,
         'properties': {
             'key1': 'value1',
             'key2': 'value2'},
         'size': 5882349},
         {'status': 'active',
         'name': 'image2',
         'deleted': False,
         'container_format': None,
         'checksum': None,
         'created_at': '2011-03-22T17:40:15',
         'disk_format': None,
         'updated_at': '2011-03-22T17:40:15',
         'id': '2',
         'location': 'file:///var/lib/glance/images/2',
         'is_public': True,
         'deleted_at': None,
         'properties': {
             'key1': 'value1',
             'key2': 'value2'},
         'size': 5882349},
         {'status': 'active',
         'name': 'image3',
         'deleted': False,
         'container_format': None,
         'checksum': None,
         'created_at': '2011-03-22T17:40:15',
         'disk_format': None,
         'updated_at': '2011-03-22T17:40:15',
         'id': '3',
         'location': 'file:///var/lib/glance/images/2',
         'is_public': True,
         'deleted_at': None,
         'properties': {},
         'size': 5882349},
         ]
 
     def setUp(self):
         super(ImageMetaDataTest, self).setUp()
         self.flags(image_service='nova.image.glance.GlanceImageService')
         # NOTE(dprince) max out properties/metadata in image 3 for testing
         img3 = self.IMAGE_FIXTURES[2]
         for num in range(FLAGS.quota_metadata_items):
             img3['properties']['key%i' % num] = "blah"
         fakes.stub_out_glance(self.stubs, self.IMAGE_FIXTURES)
 
     def test_index(self):
-        req = webob.Request.blank('/v1.1/123/images/1/metadata')
+        req = webob.Request.blank('/v1.1/fake/images/1/metadata')
         res = req.get_response(fakes.wsgi_app())
         res_dict = json.loads(res.body)
         self.assertEqual(200, res.status_int)
         expected = self.IMAGE_FIXTURES[0]['properties']
         self.assertEqual(len(expected), len(res_dict['metadata']))
         for (key, value) in res_dict['metadata'].items():
             self.assertEqual(value, res_dict['metadata'][key])
 
     def test_show(self):
         req = webob.Request.blank('/v1.1/fake/images/1/metadata/key1')
         res = req.get_response(fakes.wsgi_app())
         res_dict = json.loads(res.body)
         self.assertEqual(200, res.status_int)
         self.assertTrue('meta' in res_dict)
         self.assertEqual(len(res_dict['meta']), 1)
         self.assertEqual('value1', res_dict['meta']['key1'])
 
     def test_show_not_found(self):
         req = webob.Request.blank('/v1.1/fake/images/1/metadata/key9')
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(404, res.status_int)
 
     def test_create(self):
         req = webob.Request.blank('/v1.1/fake/images/2/metadata')
         req.method = 'POST'
         req.body = '{"metadata": {"key9": "value9"}}'
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
 
         self.assertEqual(200, res.status_int)
         actual_output = json.loads(res.body)
 
         expected_output = {
             'metadata': {
                 'key1': 'value1',
                 'key2': 'value2',
                 'key9': 'value9',
             },
         }
 
         self.assertEqual(expected_output, actual_output)
 
     def test_update_all(self):
         req = webob.Request.blank('/v1.1/fake/images/1/metadata')
         req.method = 'PUT'
         req.body = '{"metadata": {"key9": "value9"}}'
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
 
         self.assertEqual(200, res.status_int)
         actual_output = json.loads(res.body)
 
         expected_output = {
             'metadata': {
                 'key9': 'value9',
             },
         }
 
         self.assertEqual(expected_output, actual_output)
 
     def test_update_item(self):
         req = webob.Request.blank('/v1.1/fake/images/1/metadata/key1')
         req.method = 'PUT'
         req.body = '{"meta": {"key1": "zz"}}'
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
 
         self.assertEqual(200, res.status_int)
         actual_output = json.loads(res.body)
         expected_output = {
             'meta': {
                 'key1': 'zz',
             },
         }
         self.assertEqual(actual_output, expected_output)
 
     def test_update_item_bad_body(self):
         req = webob.Request.blank('/v1.1/fake/images/1/metadata/key1')
         req.method = 'PUT'
         req.body = '{"key1": "zz"}'
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(400, res.status_int)
 
     def test_update_item_too_many_keys(self):
         req = webob.Request.blank('/v1.1/fake/images/1/metadata/key1')
         req.method = 'PUT'
         req.body = '{"meta": {"key1": "value1", "key2": "value2"}}'
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(400, res.status_int)
 
     def test_update_item_body_uri_mismatch(self):
         req = webob.Request.blank('/v1.1/fake/images/1/metadata/bad')
         req.method = 'PUT'
         req.body = '{"meta": {"key1": "value1"}}'
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(400, res.status_int)
 
     def test_update_item_xml(self):
         req = webob.Request.blank('/v1.1/fake/images/1/metadata/key1')
         req.method = 'PUT'
         req.body = '<meta key="key1">five</meta>'
         req.headers["content-type"] = "application/xml"
         res = req.get_response(fakes.wsgi_app())
 
         self.assertEqual(200, res.status_int)
         actual_output = json.loads(res.body)
         expected_output = {
             'meta': {
                 'key1': 'five',
             },
         }
         self.assertEqual(actual_output, expected_output)
 
     def test_delete(self):
         req = webob.Request.blank('/v1.1/fake/images/2/metadata/key1')
         req.method = 'DELETE'
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(204, res.status_int)
         self.assertEqual('', res.body)
 
     def test_delete_not_found(self):
         req = webob.Request.blank('/v1.1/fake/images/2/metadata/blah')
         req.method = 'DELETE'
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(404, res.status_int)
 
     def test_too_many_metadata_items_on_create(self):
         data = {"metadata": {}}
         for num in range(FLAGS.quota_metadata_items + 1):
             data['metadata']['key%i' % num] = "blah"
         json_string = str(data).replace("\'", "\"")
         req = webob.Request.blank('/v1.1/fake/images/2/metadata')
         req.method = 'POST'
         req.body = json_string
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(413, res.status_int)
 
     def test_too_many_metadata_items_on_put(self):
         req = webob.Request.blank('/v1.1/fake/images/3/metadata/blah')
         req.method = 'PUT'
         req.body = '{"meta": {"blah": "blah"}}'
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(413, res.status_int)
diff --git a/nova/tests/api/openstack/test_servers.py b/nova/tests/api/openstack/test_servers.py
index 43633be..6412654 100644
--- a/nova/tests/api/openstack/test_servers.py
+++ b/nova/tests/api/openstack/test_servers.py
@@ -260,2355 +260,2356 @@ class MockSetAdminPassword(object):
 class ServersTest(test.TestCase):
     def setUp(self):
         self.maxDiff = None
         super(ServersTest, self).setUp()
         self.flags(verbose=True)
         fakes.stub_out_networking(self.stubs)
         fakes.stub_out_rate_limiting(self.stubs)
         fakes.stub_out_key_pair_funcs(self.stubs)
         fakes.stub_out_image_service(self.stubs)
         self.stubs.Set(utils, 'gen_uuid', fake_gen_uuid)
         self.stubs.Set(nova.db.api, 'instance_get_all_by_filters',
                 return_servers)
         self.stubs.Set(nova.db.api, 'instance_get', return_server_by_id)
         self.stubs.Set(nova.db, 'instance_get_by_uuid',
                        return_server_by_uuid)
         self.stubs.Set(nova.db.api, 'instance_get_all_by_project',
                        return_servers)
         self.stubs.Set(nova.db.api, 'instance_add_security_group',
                        return_security_group)
         self.stubs.Set(nova.db.api, 'instance_update', instance_update)
         self.stubs.Set(nova.db.api, 'instance_get_fixed_addresses',
                        instance_addresses)
         self.stubs.Set(nova.db.api, 'instance_get_floating_address',
                        instance_addresses)
         self.stubs.Set(nova.compute.API, 'pause', fake_compute_api)
         self.stubs.Set(nova.compute.API, 'unpause', fake_compute_api)
         self.stubs.Set(nova.compute.API, 'suspend', fake_compute_api)
         self.stubs.Set(nova.compute.API, 'resume', fake_compute_api)
         self.stubs.Set(nova.compute.API, "get_diagnostics", fake_compute_api)
         self.stubs.Set(nova.compute.API, "get_actions", fake_compute_actions)
 
         self.webreq = common.webob_factory('/v1.0/servers')
         self.config_drive = None
 
     def test_get_server_by_id(self):
         req = webob.Request.blank('/v1.0/servers/1')
         res = req.get_response(fakes.wsgi_app())
         res_dict = json.loads(res.body)
         self.assertEqual(res_dict['server']['id'], 1)
         self.assertEqual(res_dict['server']['name'], 'server1')
 
     def test_get_server_by_uuid(self):
         """
         The steps involved with resolving a UUID are pretty complicated;
         here's what's happening in this scenario:
 
         1. Show is calling `routing_get`
 
         2. `routing_get` is wrapped by `reroute_compute` which does the work
            of resolving requests to child zones.
 
         3. `reroute_compute` looks up the UUID by hitting the stub
            (returns_server_by_uuid)
 
         4. Since the stub return that the record exists, `reroute_compute`
            considers the request to be 'zone local', so it replaces the UUID
            in the argument list with an integer ID and then calls the inner
            function ('get').
 
         5. The call to `get` hits the other stub 'returns_server_by_id` which
            has the UUID set to FAKE_UUID
 
         So, counterintuitively, we call `get` twice on the `show` command.
         """
         req = webob.Request.blank('/v1.0/servers/%s' % FAKE_UUID)
         res = req.get_response(fakes.wsgi_app())
         res_dict = json.loads(res.body)
         self.assertEqual(res_dict['server']['id'], 1)
         self.assertEqual(res_dict['server']['uuid'], FAKE_UUID)
         self.assertEqual(res_dict['server']['name'], 'server1')
 
     def test_get_server_by_id_v1_1(self):
         image_bookmark = "http://localhost/fake/images/10"
         flavor_ref = "http://localhost/v1.1/fake/flavors/1"
         flavor_id = "1"
         flavor_bookmark = "http://localhost/fake/flavors/1"
 
         public_ip = '192.168.0.3'
         private_ip = '172.19.0.1'
         interfaces = [
             {
                 'network': {'label': 'public'},
                 'fixed_ips': [
                     {'address': public_ip},
                 ],
             },
             {
                 'network': {'label': 'private'},
                 'fixed_ips': [
                     {'address': private_ip},
                 ],
             },
         ]
         new_return_server = return_server_with_attributes(
             interfaces=interfaces)
         self.stubs.Set(nova.db.api, 'instance_get', new_return_server)
 
         req = webob.Request.blank('/v1.1/fake/servers/1')
         res = req.get_response(fakes.wsgi_app())
         res_dict = json.loads(res.body)
         expected_server = {
             "server": {
                 "id": 1,
                 "uuid": FAKE_UUID,
                 "user_id": "fake",
                 "tenant_id": "fake",
                 "updated": "2010-11-11T11:00:00Z",
                 "created": "2010-10-10T12:00:00Z",
                 "progress": 0,
                 "name": "server1",
                 "status": "BUILD",
                 "accessIPv4": "",
                 "accessIPv6": "",
                 "hostId": '',
                 "key_name": '',
                 "image": {
                     "id": "10",
                     "links": [
                         {
                             "rel": "bookmark",
                             "href": image_bookmark,
                         },
                     ],
                 },
                 "flavor": {
                     "id": "1",
                   "links": [
                                             {
                           "rel": "bookmark",
                           "href": flavor_bookmark,
                       },
                   ],
                 },
                 "addresses": {
                     "public": [
                         {
                             "version": 4,
                             "addr": public_ip,
                         },
                     ],
                     "private": [
                         {
                             "version": 4,
                             "addr": private_ip,
                         },
                     ],
                 },
                 "metadata": {
                     "seq": "1",
                 },
                 "config_drive": None,
                 "links": [
                     {
                         "rel": "self",
                         #FIXME(wwolf) Do we want the links to be id or uuid?
                         "href": "http://localhost/v1.1/fake/servers/1",
                     },
                     {
                         "rel": "bookmark",
                         "href": "http://localhost/fake/servers/1",
                     },
                 ],
             }
         }
 
         self.assertDictMatch(res_dict, expected_server)
 
     def test_get_server_by_id_v1_1_xml(self):
         image_bookmark = "http://localhost/fake/images/10"
         flavor_ref = "http://localhost/v1.1/fake/flavors/1"
         flavor_id = "1"
         flavor_bookmark = "http://localhost/fake/flavors/1"
         server_href = "http://localhost/v1.1/fake/servers/1"
         server_bookmark = "http://localhost/fake/servers/1"
 
         public_ip = '192.168.0.3'
         private_ip = '172.19.0.1'
         interfaces = [
             {
                 'network': {'label': 'public'},
                 'fixed_ips': [
                     {'address': public_ip},
                 ],
             },
             {
                 'network': {'label': 'private'},
                 'fixed_ips': [
                     {'address': private_ip},
                 ],
             },
         ]
         new_return_server = return_server_with_attributes(
             interfaces=interfaces)
         self.stubs.Set(nova.db.api, 'instance_get', new_return_server)
 
         req = webob.Request.blank('/v1.1/fake/servers/1')
         req.headers['Accept'] = 'application/xml'
         res = req.get_response(fakes.wsgi_app())
         actual = minidom.parseString(res.body.replace('  ', ''))
         expected_uuid = FAKE_UUID
         expected_updated = "2010-11-11T11:00:00Z"
         expected_created = "2010-10-10T12:00:00Z"
         expected = minidom.parseString("""
         <server id="1"
                 uuid="%(expected_uuid)s"
                 userId="fake"
                 tenantId="fake"
                 xmlns="http://docs.openstack.org/compute/api/v1.1"
                 xmlns:atom="http://www.w3.org/2005/Atom"
                 name="server1"
                 updated="%(expected_updated)s"
                 created="%(expected_created)s"
                 hostId=""
                 status="BUILD"
                 accessIPv4=""
                 accessIPv6=""
                 progress="0">
             <atom:link href="%(server_href)s" rel="self"/>
             <atom:link href="%(server_bookmark)s" rel="bookmark"/>
             <image id="10">
                 <atom:link rel="bookmark" href="%(image_bookmark)s"/>
             </image>
             <flavor id="1">
                 <atom:link rel="bookmark" href="%(flavor_bookmark)s"/>
             </flavor>
             <metadata>
                 <meta key="seq">
                     1
                 </meta>
             </metadata>
             <addresses>
                 <network id="public">
                     <ip version="4" addr="%(public_ip)s"/>
                 </network>
                 <network id="private">
                     <ip version="4" addr="%(private_ip)s"/>
                 </network>
             </addresses>
         </server>
         """.replace("  ", "") % (locals()))
 
         self.assertEqual(expected.toxml(), actual.toxml())
 
     def test_get_server_with_active_status_by_id_v1_1(self):
         image_bookmark = "http://localhost/fake/images/10"
         flavor_ref = "http://localhost/v1.1/fake/flavors/1"
         flavor_id = "1"
         flavor_bookmark = "http://localhost/fake/flavors/1"
         private_ip = "192.168.0.3"
         public_ip = "1.2.3.4"
 
         interfaces = [
             {
                 'network': {'label': 'public'},
                 'fixed_ips': [
                     {'address': public_ip},
                 ],
             },
             {
                 'network': {'label': 'private'},
                 'fixed_ips': [
                     {'address': private_ip},
                 ],
             },
         ]
         new_return_server = return_server_with_attributes(
             interfaces=interfaces, vm_state=vm_states.ACTIVE)
         self.stubs.Set(nova.db.api, 'instance_get', new_return_server)
 
         req = webob.Request.blank('/v1.1/fake/servers/1')
         res = req.get_response(fakes.wsgi_app())
         res_dict = json.loads(res.body)
         expected_server = {
             "server": {
                 "id": 1,
                 "uuid": FAKE_UUID,
                 "user_id": "fake",
                 "tenant_id": "fake",
                 "updated": "2010-11-11T11:00:00Z",
                 "created": "2010-10-10T12:00:00Z",
                 "progress": 100,
                 "name": "server1",
                 "status": "ACTIVE",
                 "accessIPv4": "",
                 "accessIPv6": "",
                 "hostId": '',
                 "key_name": '',
                 "image": {
                     "id": "10",
                     "links": [
                         {
                             "rel": "bookmark",
                             "href": image_bookmark,
                         },
                     ],
                 },
                 "flavor": {
                     "id": "1",
                   "links": [
                       {
                           "rel": "bookmark",
                           "href": flavor_bookmark,
                       },
                   ],
                 },
                 "addresses": {
                     "public": [
                         {
                             "version": 4,
                             "addr": public_ip,
                         },
                     ],
                     "private": [
                         {
                             "version": 4,
                             "addr": private_ip,
                         },
                     ],
                 },
                 "metadata": {
                     "seq": "1",
                 },
                 "config_drive": None,
                 "links": [
                     {
                         "rel": "self",
                         "href": "http://localhost/v1.1/fake/servers/1",
                     },
                     {
                         "rel": "bookmark",
                         "href": "http://localhost/fake/servers/1",
                     },
                 ],
             }
         }
 
         self.assertDictMatch(res_dict, expected_server)
 
     def test_get_server_with_id_image_ref_by_id_v1_1(self):
         image_ref = "10"
         image_bookmark = "http://localhost/fake/images/10"
         flavor_ref = "http://localhost/v1.1/fake/flavors/1"
         flavor_id = "1"
         flavor_bookmark = "http://localhost/fake/flavors/1"
         private_ip = "192.168.0.3"
         public_ip = "1.2.3.4"
 
         interfaces = [
             {
                 'network': {'label': 'public'},
                 'fixed_ips': [
                     {'address': public_ip},
                 ],
             },
             {
                 'network': {'label': 'private'},
                 'fixed_ips': [
                     {'address': private_ip},
                 ],
             },
         ]
         new_return_server = return_server_with_attributes(
             interfaces=interfaces, vm_state=vm_states.ACTIVE,
             image_ref=image_ref, flavor_id=flavor_id)
         self.stubs.Set(nova.db.api, 'instance_get', new_return_server)
 
         req = webob.Request.blank('/v1.1/fake/servers/1')
         res = req.get_response(fakes.wsgi_app())
         res_dict = json.loads(res.body)
         expected_server = {
             "server": {
                 "id": 1,
                 "uuid": FAKE_UUID,
                 "user_id": "fake",
                 "tenant_id": "fake",
                 "updated": "2010-11-11T11:00:00Z",
                 "created": "2010-10-10T12:00:00Z",
                 "progress": 100,
                 "name": "server1",
                 "status": "ACTIVE",
                 "accessIPv4": "",
                 "accessIPv6": "",
                 "hostId": '',
                 "key_name": '',
                 "image": {
                     "id": "10",
                     "links": [
                         {
                             "rel": "bookmark",
                             "href": image_bookmark,
                         },
                     ],
                 },
                 "flavor": {
                     "id": "1",
                   "links": [
                       {
                           "rel": "bookmark",
                           "href": flavor_bookmark,
                       },
                   ],
                 },
                 "addresses": {
                     "public": [
                         {
                             "version": 4,
                             "addr": public_ip,
                         },
                     ],
                     "private": [
                         {
                             "version": 4,
                             "addr": private_ip,
                         },
                     ],
                 },
                 "metadata": {
                     "seq": "1",
                 },
                 "config_drive": None,
                 "links": [
                     {
                         "rel": "self",
                         "href": "http://localhost/v1.1/fake/servers/1",
                     },
                     {
                         "rel": "bookmark",
                         "href": "http://localhost/fake/servers/1",
                     },
                 ],
             }
         }
 
         self.assertDictMatch(res_dict, expected_server)
 
     def test_get_server_by_id_with_addresses_xml(self):
         private = "192.168.0.3"
         public = ["1.2.3.4"]
         new_return_server = return_server_with_addresses(private, public)
         self.stubs.Set(nova.db.api, 'instance_get', new_return_server)
         req = webob.Request.blank('/v1.0/servers/1')
         req.headers['Accept'] = 'application/xml'
         res = req.get_response(fakes.wsgi_app())
         dom = minidom.parseString(res.body)
         server = dom.childNodes[0]
         self.assertEquals(server.nodeName, 'server')
         self.assertEquals(server.getAttribute('id'), '1')
         self.assertEquals(server.getAttribute('name'), 'server1')
         (public,) = server.getElementsByTagName('public')
         (ip,) = public.getElementsByTagName('ip')
         self.assertEquals(ip.getAttribute('addr'), '1.2.3.4')
         (private,) = server.getElementsByTagName('private')
         (ip,) = private.getElementsByTagName('ip')
         self.assertEquals(ip.getAttribute('addr'), '192.168.0.3')
 
     def test_get_server_by_id_with_addresses(self):
         private = "192.168.0.3"
         public = ["1.2.3.4"]
         new_return_server = return_server_with_addresses(private, public)
         self.stubs.Set(nova.db.api, 'instance_get', new_return_server)
         req = webob.Request.blank('/v1.0/servers/1')
         res = req.get_response(fakes.wsgi_app())
         res_dict = json.loads(res.body)
         self.assertEqual(res_dict['server']['id'], 1)
         self.assertEqual(res_dict['server']['name'], 'server1')
         addresses = res_dict['server']['addresses']
         self.assertEqual(len(addresses["public"]), len(public))
         self.assertEqual(addresses["public"][0], public[0])
         self.assertEqual(len(addresses["private"]), 1)
         self.assertEqual(addresses["private"][0], private)
 
     def test_get_server_addresses_v1_0(self):
         private = '192.168.0.3'
         public = ['1.2.3.4']
         new_return_server = return_server_with_addresses(private, public)
         self.stubs.Set(nova.db.api, 'instance_get', new_return_server)
         req = webob.Request.blank('/v1.0/servers/1/ips')
         res = req.get_response(fakes.wsgi_app())
         res_dict = json.loads(res.body)
         self.assertEqual(res_dict, {
             'addresses': {'public': public, 'private': [private]}})
 
     def test_get_server_addresses_xml_v1_0(self):
         private_expected = "192.168.0.3"
         public_expected = ["1.2.3.4"]
         new_return_server = return_server_with_addresses(private_expected,
                                                          public_expected)
         self.stubs.Set(nova.db.api, 'instance_get', new_return_server)
         req = webob.Request.blank('/v1.0/servers/1/ips')
         req.headers['Accept'] = 'application/xml'
         res = req.get_response(fakes.wsgi_app())
         dom = minidom.parseString(res.body)
         (addresses,) = dom.childNodes
         self.assertEquals(addresses.nodeName, 'addresses')
         (public,) = addresses.getElementsByTagName('public')
         (ip,) = public.getElementsByTagName('ip')
         self.assertEquals(ip.getAttribute('addr'), public_expected[0])
         (private,) = addresses.getElementsByTagName('private')
         (ip,) = private.getElementsByTagName('ip')
         self.assertEquals(ip.getAttribute('addr'), private_expected)
 
     def test_get_server_addresses_public_v1_0(self):
         private = "192.168.0.3"
         public = ["1.2.3.4"]
         new_return_server = return_server_with_addresses(private, public)
         self.stubs.Set(nova.db.api, 'instance_get', new_return_server)
         req = webob.Request.blank('/v1.0/servers/1/ips/public')
         res = req.get_response(fakes.wsgi_app())
         res_dict = json.loads(res.body)
         self.assertEqual(res_dict, {'public': public})
 
     def test_get_server_addresses_private_v1_0(self):
         private = "192.168.0.3"
         public = ["1.2.3.4"]
         new_return_server = return_server_with_addresses(private, public)
         self.stubs.Set(nova.db.api, 'instance_get', new_return_server)
         req = webob.Request.blank('/v1.0/servers/1/ips/private')
         res = req.get_response(fakes.wsgi_app())
         res_dict = json.loads(res.body)
         self.assertEqual(res_dict, {'private': [private]})
 
     def test_get_server_addresses_public_xml_v1_0(self):
         private = "192.168.0.3"
         public = ["1.2.3.4"]
         new_return_server = return_server_with_addresses(private, public)
         self.stubs.Set(nova.db.api, 'instance_get', new_return_server)
         req = webob.Request.blank('/v1.0/servers/1/ips/public')
         req.headers['Accept'] = 'application/xml'
         res = req.get_response(fakes.wsgi_app())
         dom = minidom.parseString(res.body)
         (public_node,) = dom.childNodes
         self.assertEquals(public_node.nodeName, 'public')
         (ip,) = public_node.getElementsByTagName('ip')
         self.assertEquals(ip.getAttribute('addr'), public[0])
 
     def test_get_server_addresses_private_xml_v1_0(self):
         private = "192.168.0.3"
         public = ["1.2.3.4"]
         new_return_server = return_server_with_addresses(private, public)
         self.stubs.Set(nova.db.api, 'instance_get', new_return_server)
         req = webob.Request.blank('/v1.0/servers/1/ips/private')
         req.headers['Accept'] = 'application/xml'
         res = req.get_response(fakes.wsgi_app())
         dom = minidom.parseString(res.body)
         (private_node,) = dom.childNodes
         self.assertEquals(private_node.nodeName, 'private')
         (ip,) = private_node.getElementsByTagName('ip')
         self.assertEquals(ip.getAttribute('addr'), private)
 
     # NOTE(bcwaldon): lp830817
     def test_get_server_by_id_malformed_networks_v1_1(self):
         ifaces = [
             {
                 'network': None,
                 'fixed_ips': [
                     {'address': '192.168.0.3'},
                     {'address': '192.168.0.4'},
                 ],
             },
         ]
         new_return_server = return_server_with_attributes(interfaces=ifaces)
         self.stubs.Set(nova.db.api, 'instance_get', new_return_server)
 
         req = webob.Request.blank('/v1.1/fake/servers/1')
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 200)
         res_dict = json.loads(res.body)
         self.assertEqual(res_dict['server']['id'], 1)
         self.assertEqual(res_dict['server']['name'], 'server1')
 
     def test_get_server_by_id_with_addresses_v1_1(self):
         self.flags(use_ipv6=True)
         interfaces = [
             {
                 'network': {'label': 'network_1'},
                 'fixed_ips': [
                     {'address': '192.168.0.3'},
                     {'address': '192.168.0.4'},
                 ],
             },
             {
                 'network': {'label': 'network_2'},
                 'fixed_ips': [
                     {'address': '172.19.0.1'},
                     {'address': '172.19.0.2'},
                 ],
                 'fixed_ipv6': '2001:4860::12',
             },
         ]
         new_return_server = return_server_with_attributes(
             interfaces=interfaces)
         self.stubs.Set(nova.db.api, 'instance_get', new_return_server)
 
         req = webob.Request.blank('/v1.1/fake/servers/1')
         res = req.get_response(fakes.wsgi_app())
 
         res_dict = json.loads(res.body)
         self.assertEqual(res_dict['server']['id'], 1)
         self.assertEqual(res_dict['server']['name'], 'server1')
         addresses = res_dict['server']['addresses']
         expected = {
             'network_1': [
                 {'addr': '192.168.0.3', 'version': 4},
                 {'addr': '192.168.0.4', 'version': 4},
             ],
             'network_2': [
                 {'addr': '172.19.0.1', 'version': 4},
                 {'addr': '172.19.0.2', 'version': 4},
                 {'addr': '2001:4860::12', 'version': 6},
             ],
         }
 
         self.assertEqual(addresses, expected)
 
     def test_get_server_by_id_with_addresses_v1_1_ipv6_disabled(self):
         self.flags(use_ipv6=False)
         interfaces = [
             {
                 'network': {'label': 'network_1'},
                 'fixed_ips': [
                     {'address': '192.168.0.3'},
                     {'address': '192.168.0.4'},
                 ],
             },
             {
                 'network': {'label': 'network_2'},
                 'fixed_ips': [
                     {'address': '172.19.0.1'},
                     {'address': '172.19.0.2'},
                 ],
                 'fixed_ipv6': '2001:4860::12',
             },
         ]
         new_return_server = return_server_with_attributes(
             interfaces=interfaces)
         self.stubs.Set(nova.db.api, 'instance_get', new_return_server)
 
         req = webob.Request.blank('/v1.1/fake/servers/1')
         res = req.get_response(fakes.wsgi_app())
 
         res_dict = json.loads(res.body)
         self.assertEqual(res_dict['server']['id'], 1)
         self.assertEqual(res_dict['server']['name'], 'server1')
         addresses = res_dict['server']['addresses']
         expected = {
             'network_1': [
                 {'addr': '192.168.0.3', 'version': 4},
                 {'addr': '192.168.0.4', 'version': 4},
             ],
             'network_2': [
                 {'addr': '172.19.0.1', 'version': 4},
                 {'addr': '172.19.0.2', 'version': 4},
             ],
         }
 
         self.assertEqual(addresses, expected)
 
     def test_get_server_addresses_v1_1(self):
         self.flags(use_ipv6=True)
         interfaces = [
             {
                 'network': {'label': 'network_1'},
                 'fixed_ips': [
                     {'address': '192.168.0.3'},
                     {'address': '192.168.0.4'},
                 ],
             },
             {
                 'network': {'label': 'network_2'},
                 'fixed_ips': [
                     {
                         'address': '172.19.0.1',
                         'floating_ips': [
                             {'address': '1.2.3.4'},
                         ],
                     },
                     {'address': '172.19.0.2'},
                 ],
                 'fixed_ipv6': '2001:4860::12',
             },
         ]
 
         _return_vifs = return_virtual_interface_by_instance(interfaces)
         self.stubs.Set(nova.db.api,
                        'virtual_interface_get_by_instance',
                        _return_vifs)
 
         req = webob.Request.blank('/v1.1/fake/servers/1/ips')
         res = req.get_response(fakes.wsgi_app())
         res_dict = json.loads(res.body)
 
         expected = {
             'addresses': {
                 'network_1': [
                     {'version': 4, 'addr': '192.168.0.3'},
                     {'version': 4, 'addr': '192.168.0.4'},
                 ],
                 'network_2': [
                     {'version': 4, 'addr': '172.19.0.1'},
                     {'version': 4, 'addr': '1.2.3.4'},
                     {'version': 4, 'addr': '172.19.0.2'},
                     {'version': 6, 'addr': '2001:4860::12'},
                 ],
             },
         }
 
         self.assertEqual(res_dict, expected)
 
     def test_get_server_addresses_single_network_v1_1(self):
         self.flags(use_ipv6=True)
         interfaces = [
             {
                 'network': {'label': 'network_1'},
                 'fixed_ips': [
                     {'address': '192.168.0.3'},
                     {'address': '192.168.0.4'},
                 ],
             },
             {
                 'network': {'label': 'network_2'},
                 'fixed_ips': [
                     {
                         'address': '172.19.0.1',
                         'floating_ips': [
                             {'address': '1.2.3.4'},
                         ],
                     },
                     {'address': '172.19.0.2'},
                 ],
                 'fixed_ipv6': '2001:4860::12',
             },
         ]
         _return_vifs = return_virtual_interface_by_instance(interfaces)
         self.stubs.Set(nova.db.api,
                        'virtual_interface_get_by_instance',
                        _return_vifs)
 
         req = webob.Request.blank('/v1.1/fake/servers/1/ips/network_2')
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 200)
         res_dict = json.loads(res.body)
         expected = {
             'network_2': [
                 {'version': 4, 'addr': '172.19.0.1'},
                 {'version': 4, 'addr': '1.2.3.4'},
                 {'version': 4, 'addr': '172.19.0.2'},
                 {'version': 6, 'addr': '2001:4860::12'},
             ],
         }
         self.assertEqual(res_dict, expected)
 
     def test_get_server_addresses_nonexistant_network_v1_1(self):
         _return_vifs = return_virtual_interface_by_instance([])
         self.stubs.Set(nova.db.api,
                        'virtual_interface_get_by_instance',
                        _return_vifs)
 
         req = webob.Request.blank('/v1.1/fake/servers/1/ips/network_0')
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 404)
 
     def test_get_server_addresses_nonexistant_server_v1_1(self):
         _return_vifs = return_virtual_interface_instance_nonexistant([])
         self.stubs.Set(nova.db.api,
                        'virtual_interface_get_by_instance',
                        _return_vifs)
 
         req = webob.Request.blank('/v1.1/fake/servers/600/ips')
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 404)
 
     def test_get_server_list(self):
         req = webob.Request.blank('/v1.0/servers')
         res = req.get_response(fakes.wsgi_app())
         res_dict = json.loads(res.body)
 
         self.assertEqual(len(res_dict['servers']), 5)
         i = 0
         for s in res_dict['servers']:
             self.assertEqual(s['id'], i)
             self.assertEqual(s['name'], 'server%d' % i)
             self.assertEqual(s.get('imageId', None), None)
             i += 1
 
     def test_get_server_list_with_reservation_id(self):
         self.stubs.Set(nova.db.api, 'instance_get_all_by_reservation',
                        return_servers_by_reservation)
         self.stubs.Set(nova.scheduler.api, 'call_zone_method',
                        return_servers_from_child_zones)
         req = webob.Request.blank('/v1.0/servers?reservation_id=foo')
         res = req.get_response(fakes.wsgi_app())
         res_dict = json.loads(res.body)
 
         i = 0
         for s in res_dict['servers']:
             if '_is_precooked' in s:
                 self.assertEqual(s.get('reservation_id'), 'child')
             else:
                 self.assertEqual(s.get('name'), 'server%d' % i)
                 i += 1
 
     def test_get_server_list_with_reservation_id_empty(self):
         self.stubs.Set(nova.db.api, 'instance_get_all_by_reservation',
                        return_servers_by_reservation_empty)
         self.stubs.Set(nova.scheduler.api, 'call_zone_method',
                        return_servers_from_child_zones_empty)
         req = webob.Request.blank('/v1.0/servers/detail?reservation_id=foo')
         res = req.get_response(fakes.wsgi_app())
         res_dict = json.loads(res.body)
 
         i = 0
         for s in res_dict['servers']:
             if '_is_precooked' in s:
                 self.assertEqual(s.get('reservation_id'), 'child')
             else:
                 self.assertEqual(s.get('name'), 'server%d' % i)
                 i += 1
 
     def test_get_server_list_with_reservation_id_details(self):
         self.stubs.Set(nova.db.api, 'instance_get_all_by_reservation',
                        return_servers_by_reservation)
         self.stubs.Set(nova.scheduler.api, 'call_zone_method',
                        return_servers_from_child_zones)
         req = webob.Request.blank('/v1.0/servers/detail?reservation_id=foo')
         res = req.get_response(fakes.wsgi_app())
         res_dict = json.loads(res.body)
 
         i = 0
         for s in res_dict['servers']:
             if '_is_precooked' in s:
                 self.assertEqual(s.get('reservation_id'), 'child')
             else:
                 self.assertEqual(s.get('name'), 'server%d' % i)
                 i += 1
 
     def test_get_server_list_v1_1(self):
         req = webob.Request.blank('/v1.1/fake/servers')
         res = req.get_response(fakes.wsgi_app())
         res_dict = json.loads(res.body)
 
         self.assertEqual(len(res_dict['servers']), 5)
         for i, s in enumerate(res_dict['servers']):
             self.assertEqual(s['id'], i)
             self.assertEqual(s['name'], 'server%d' % i)
             self.assertEqual(s.get('image', None), None)
 
             expected_links = [
                 {
                     "rel": "self",
                     "href": "http://localhost/v1.1/fake/servers/%s" % s['id'],
                 },
                 {
                     "rel": "bookmark",
                     "href": "http://localhost/fake/servers/%s" % s['id'],
                 },
             ]
 
             self.assertEqual(s['links'], expected_links)
 
     def test_get_servers_with_limit(self):
         req = webob.Request.blank('/v1.0/servers?limit=3')
         res = req.get_response(fakes.wsgi_app())
         servers = json.loads(res.body)['servers']
         self.assertEqual([s['id'] for s in servers], [0, 1, 2])
 
         req = webob.Request.blank('/v1.0/servers?limit=aaa')
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 400)
         self.assertTrue('limit' in res.body)
 
     def test_get_servers_with_offset(self):
         req = webob.Request.blank('/v1.0/servers?offset=2')
         res = req.get_response(fakes.wsgi_app())
         servers = json.loads(res.body)['servers']
         self.assertEqual([s['id'] for s in servers], [2, 3, 4])
 
         req = webob.Request.blank('/v1.0/servers?offset=aaa')
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 400)
         self.assertTrue('offset' in res.body)
 
     def test_get_servers_with_limit_and_offset(self):
         req = webob.Request.blank('/v1.0/servers?limit=2&offset=1')
         res = req.get_response(fakes.wsgi_app())
         servers = json.loads(res.body)['servers']
         self.assertEqual([s['id'] for s in servers], [1, 2])
 
     def test_get_servers_with_bad_limit(self):
         req = webob.Request.blank('/v1.0/servers?limit=asdf&offset=1')
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 400)
         self.assertTrue(res.body.find('limit param') > -1)
 
     def test_get_servers_with_bad_offset(self):
         req = webob.Request.blank('/v1.0/servers?limit=2&offset=asdf')
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 400)
         self.assertTrue(res.body.find('offset param') > -1)
 
     def test_get_servers_with_marker(self):
         req = webob.Request.blank('/v1.1/fake/servers?marker=2')
         res = req.get_response(fakes.wsgi_app())
         servers = json.loads(res.body)['servers']
         self.assertEqual([s['name'] for s in servers], ["server3", "server4"])
 
     def test_get_servers_with_limit_and_marker(self):
         req = webob.Request.blank('/v1.1/fake/servers?limit=2&marker=1')
         res = req.get_response(fakes.wsgi_app())
         servers = json.loads(res.body)['servers']
         self.assertEqual([s['name'] for s in servers], ['server2', 'server3'])
 
     def test_get_servers_with_bad_marker(self):
         req = webob.Request.blank('/v1.1/fake/servers?limit=2&marker=asdf')
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 400)
         self.assertTrue(res.body.find('marker param') > -1)
 
     def test_get_servers_with_bad_option_v1_0(self):
         # 1.0 API ignores unknown options
         def fake_get_all(compute_self, context, search_opts=None):
             return [stub_instance(100)]
 
         self.stubs.Set(nova.compute.API, 'get_all', fake_get_all)
 
         req = webob.Request.blank('/v1.0/servers?unknownoption=whee')
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 200)
         servers = json.loads(res.body)['servers']
         self.assertEqual(len(servers), 1)
         self.assertEqual(servers[0]['id'], 100)
 
     def test_get_servers_with_bad_option_v1_1(self):
         # 1.1 API also ignores unknown options
         def fake_get_all(compute_self, context, search_opts=None):
             return [stub_instance(100)]
 
         self.stubs.Set(nova.compute.API, 'get_all', fake_get_all)
 
         req = webob.Request.blank('/v1.1/fake/servers?unknownoption=whee')
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 200)
         servers = json.loads(res.body)['servers']
         self.assertEqual(len(servers), 1)
         self.assertEqual(servers[0]['id'], 100)
 
     def test_get_servers_allows_image_v1_1(self):
         def fake_get_all(compute_self, context, search_opts=None):
             self.assertNotEqual(search_opts, None)
             self.assertTrue('image' in search_opts)
             self.assertEqual(search_opts['image'], '12345')
             return [stub_instance(100)]
 
         self.stubs.Set(nova.compute.API, 'get_all', fake_get_all)
         self.flags(allow_admin_api=False)
 
         req = webob.Request.blank('/v1.1/fake/servers?image=12345')
         res = req.get_response(fakes.wsgi_app())
         # The following assert will fail if either of the asserts in
         # fake_get_all() fail
         self.assertEqual(res.status_int, 200)
         servers = json.loads(res.body)['servers']
         self.assertEqual(len(servers), 1)
         self.assertEqual(servers[0]['id'], 100)
 
     def test_tenant_id_filter_converts_to_project_id_for_admin(self):
         def fake_get_all(context, filters=None):
             self.assertNotEqual(filters, None)
             self.assertEqual(filters['project_id'], 'faketenant')
             self.assertFalse(filters.get('tenant_id'))
             return [stub_instance(100)]
 
         self.stubs.Set(nova.db.api, 'instance_get_all_by_filters',
                        fake_get_all)
         self.flags(allow_admin_api=True)
 
-        req = webob.Request.blank('/v1.1/fake/servers?tenant_id=faketenant')
+        req = webob.Request.blank(
+            '/v1.1/testproject/servers?tenant_id=faketenant')
         # Use admin context
         context = nova.context.RequestContext('testuser', 'testproject',
                 is_admin=True)
         res = req.get_response(fakes.wsgi_app(fake_auth_context=context))
         res_dict = json.loads(res.body)
         # Failure in fake_get_all returns non 200 status code
         self.assertEqual(res.status_int, 200)
 
     def test_get_servers_allows_flavor_v1_1(self):
         def fake_get_all(compute_self, context, search_opts=None):
             self.assertNotEqual(search_opts, None)
             self.assertTrue('flavor' in search_opts)
             # flavor is an integer ID
             self.assertEqual(search_opts['flavor'], '12345')
             return [stub_instance(100)]
 
         self.stubs.Set(nova.compute.API, 'get_all', fake_get_all)
         self.flags(allow_admin_api=False)
 
         req = webob.Request.blank('/v1.1/fake/servers?flavor=12345')
         res = req.get_response(fakes.wsgi_app())
         # The following assert will fail if either of the asserts in
         # fake_get_all() fail
         self.assertEqual(res.status_int, 200)
         servers = json.loads(res.body)['servers']
         self.assertEqual(len(servers), 1)
         self.assertEqual(servers[0]['id'], 100)
 
     def test_get_servers_allows_status_v1_1(self):
         def fake_get_all(compute_self, context, search_opts=None):
             self.assertNotEqual(search_opts, None)
             self.assertTrue('vm_state' in search_opts)
             self.assertEqual(search_opts['vm_state'], vm_states.ACTIVE)
             return [stub_instance(100)]
 
         self.stubs.Set(nova.compute.API, 'get_all', fake_get_all)
         self.flags(allow_admin_api=False)
 
         req = webob.Request.blank('/v1.1/fake/servers?status=active')
         res = req.get_response(fakes.wsgi_app())
         # The following assert will fail if either of the asserts in
         # fake_get_all() fail
         self.assertEqual(res.status_int, 200)
         servers = json.loads(res.body)['servers']
         self.assertEqual(len(servers), 1)
         self.assertEqual(servers[0]['id'], 100)
 
     def test_get_servers_invalid_status_v1_1(self):
         """Test getting servers by invalid status"""
         self.flags(allow_admin_api=False)
         req = webob.Request.blank('/v1.1/fake/servers?status=running')
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 400)
         self.assertTrue(res.body.find('Invalid server status') > -1)
 
     def test_get_servers_allows_name_v1_1(self):
         def fake_get_all(compute_self, context, search_opts=None):
             self.assertNotEqual(search_opts, None)
             self.assertTrue('name' in search_opts)
             self.assertEqual(search_opts['name'], 'whee.*')
             return [stub_instance(100)]
 
         self.stubs.Set(nova.compute.API, 'get_all', fake_get_all)
         self.flags(allow_admin_api=False)
 
         req = webob.Request.blank('/v1.1/fake/servers?name=whee.*')
         res = req.get_response(fakes.wsgi_app())
         # The following assert will fail if either of the asserts in
         # fake_get_all() fail
         self.assertEqual(res.status_int, 200)
         servers = json.loads(res.body)['servers']
         self.assertEqual(len(servers), 1)
         self.assertEqual(servers[0]['id'], 100)
 
     def test_get_servers_allows_changes_since_v1_1(self):
         def fake_get_all(compute_self, context, search_opts=None):
             self.assertNotEqual(search_opts, None)
             self.assertTrue('changes-since' in search_opts)
             changes_since = datetime.datetime(2011, 1, 24, 17, 8, 1)
             self.assertEqual(search_opts['changes-since'], changes_since)
             self.assertTrue('deleted' not in search_opts)
             return [stub_instance(100)]
 
         self.stubs.Set(nova.compute.API, 'get_all', fake_get_all)
 
         params = 'changes-since=2011-01-24T17:08:01Z'
         req = webob.Request.blank('/v1.1/fake/servers?%s' % params)
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 200)
         servers = json.loads(res.body)['servers']
         self.assertEqual(len(servers), 1)
         self.assertEqual(servers[0]['id'], 100)
 
     def test_get_servers_allows_changes_since_bad_value_v1_1(self):
         params = 'changes-since=asdf'
         req = webob.Request.blank('/v1.1/fake/servers?%s' % params)
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 400)
 
     def test_get_servers_unknown_or_admin_options1(self):
         """Test getting servers by admin-only or unknown options.
         This tests when admin_api is off.  Make sure the admin and
         unknown options are stripped before they get to
         compute_api.get_all()
         """
 
         self.flags(allow_admin_api=False)
 
         def fake_get_all(compute_self, context, search_opts=None):
             self.assertNotEqual(search_opts, None)
             # Allowed by user
             self.assertTrue('name' in search_opts)
             self.assertTrue('status' in search_opts)
             # Allowed only by admins with admin API on
             self.assertFalse('ip' in search_opts)
             self.assertFalse('unknown_option' in search_opts)
             return [stub_instance(100)]
 
         self.stubs.Set(nova.compute.API, 'get_all', fake_get_all)
 
         query_str = "name=foo&ip=10.*&status=active&unknown_option=meow"
-        req = webob.Request.blank('/v1.1/fake/servers?%s' % query_str)
+        req = webob.Request.blank('/v1.1/testproject/servers?%s' % query_str)
         # Request admin context
         context = nova.context.RequestContext('testuser', 'testproject',
                 is_admin=True)
         res = req.get_response(fakes.wsgi_app(fake_auth_context=context))
         # The following assert will fail if either of the asserts in
         # fake_get_all() fail
         self.assertEqual(res.status_int, 200)
         servers = json.loads(res.body)['servers']
         self.assertEqual(len(servers), 1)
         self.assertEqual(servers[0]['id'], 100)
 
     def test_get_servers_unknown_or_admin_options2(self):
         """Test getting servers by admin-only or unknown options.
         This tests when admin_api is on, but context is a user.
         Make sure the admin and unknown options are stripped before
         they get to compute_api.get_all()
         """
 
         self.flags(allow_admin_api=True)
 
         def fake_get_all(compute_self, context, search_opts=None):
             self.assertNotEqual(search_opts, None)
             # Allowed by user
             self.assertTrue('name' in search_opts)
             self.assertTrue('status' in search_opts)
             # Allowed only by admins with admin API on
             self.assertFalse('ip' in search_opts)
             self.assertFalse('unknown_option' in search_opts)
             return [stub_instance(100)]
 
         self.stubs.Set(nova.compute.API, 'get_all', fake_get_all)
 
         query_str = "name=foo&ip=10.*&status=active&unknown_option=meow"
-        req = webob.Request.blank('/v1.1/fake/servers?%s' % query_str)
+        req = webob.Request.blank('/v1.1/testproject/servers?%s' % query_str)
         # Request admin context
         context = nova.context.RequestContext('testuser', 'testproject',
                 is_admin=False)
         res = req.get_response(fakes.wsgi_app(fake_auth_context=context))
         # The following assert will fail if either of the asserts in
         # fake_get_all() fail
         self.assertEqual(res.status_int, 200)
         servers = json.loads(res.body)['servers']
         self.assertEqual(len(servers), 1)
         self.assertEqual(servers[0]['id'], 100)
 
     def test_get_servers_unknown_or_admin_options3(self):
         """Test getting servers by admin-only or unknown options.
         This tests when admin_api is on and context is admin.
         All options should be passed through to compute_api.get_all()
         """
 
         self.flags(allow_admin_api=True)
 
         def fake_get_all(compute_self, context, search_opts=None):
             self.assertNotEqual(search_opts, None)
             # Allowed by user
             self.assertTrue('name' in search_opts)
             self.assertTrue('status' in search_opts)
             # Allowed only by admins with admin API on
             self.assertTrue('ip' in search_opts)
             self.assertTrue('unknown_option' in search_opts)
             return [stub_instance(100)]
 
         self.stubs.Set(nova.compute.API, 'get_all', fake_get_all)
 
         query_str = "name=foo&ip=10.*&status=active&unknown_option=meow"
-        req = webob.Request.blank('/v1.1/fake/servers?%s' % query_str)
+        req = webob.Request.blank('/v1.1/testproject/servers?%s' % query_str)
         # Request admin context
         context = nova.context.RequestContext('testuser', 'testproject',
                 is_admin=True)
         res = req.get_response(fakes.wsgi_app(fake_auth_context=context))
         # The following assert will fail if either of the asserts in
         # fake_get_all() fail
         self.assertEqual(res.status_int, 200)
         servers = json.loads(res.body)['servers']
         self.assertEqual(len(servers), 1)
         self.assertEqual(servers[0]['id'], 100)
 
     def test_get_servers_admin_allows_ip_v1_1(self):
         """Test getting servers by ip with admin_api enabled and
         admin context
         """
         self.flags(allow_admin_api=True)
 
         def fake_get_all(compute_self, context, search_opts=None):
             self.assertNotEqual(search_opts, None)
             self.assertTrue('ip' in search_opts)
             self.assertEqual(search_opts['ip'], '10\..*')
             return [stub_instance(100)]
 
         self.stubs.Set(nova.compute.API, 'get_all', fake_get_all)
 
-        req = webob.Request.blank('/v1.1/fake/servers?ip=10\..*')
+        req = webob.Request.blank('/v1.1/testproject/servers?ip=10\..*')
         # Request admin context
         context = nova.context.RequestContext('testuser', 'testproject',
                 is_admin=True)
         res = req.get_response(fakes.wsgi_app(fake_auth_context=context))
         # The following assert will fail if either of the asserts in
         # fake_get_all() fail
         self.assertEqual(res.status_int, 200)
         servers = json.loads(res.body)['servers']
         self.assertEqual(len(servers), 1)
         self.assertEqual(servers[0]['id'], 100)
 
     def test_get_servers_admin_allows_ip6_v1_1(self):
         """Test getting servers by ip6 with admin_api enabled and
         admin context
         """
         self.flags(allow_admin_api=True)
 
         def fake_get_all(compute_self, context, search_opts=None):
             self.assertNotEqual(search_opts, None)
             self.assertTrue('ip6' in search_opts)
             self.assertEqual(search_opts['ip6'], 'ffff.*')
             return [stub_instance(100)]
 
         self.stubs.Set(nova.compute.API, 'get_all', fake_get_all)
 
-        req = webob.Request.blank('/v1.1/fake/servers?ip6=ffff.*')
+        req = webob.Request.blank('/v1.1/testproject/servers?ip6=ffff.*')
         # Request admin context
         context = nova.context.RequestContext('testuser', 'testproject',
                 is_admin=True)
         res = req.get_response(fakes.wsgi_app(fake_auth_context=context))
         # The following assert will fail if either of the asserts in
         # fake_get_all() fail
         self.assertEqual(res.status_int, 200)
         servers = json.loads(res.body)['servers']
         self.assertEqual(len(servers), 1)
         self.assertEqual(servers[0]['id'], 100)
 
     def _setup_for_create_instance(self):
         """Shared implementation for tests below that create instance"""
         def instance_create(context, inst):
             inst_type = instance_types.get_instance_type_by_flavor_id(3)
             image_ref = 'http://localhost/images/2'
             return {'id': 1,
                     'display_name': 'server_test',
                     'uuid': FAKE_UUID,
                     'instance_type': dict(inst_type),
                     'access_ip_v4': '1.2.3.4',
                     'access_ip_v6': 'fead::1234',
                     'image_ref': image_ref,
                     'user_id': 'fake',
                     'project_id': 'fake',
                     "created_at": datetime.datetime(2010, 10, 10, 12, 0, 0),
                     "updated_at": datetime.datetime(2010, 11, 11, 11, 0, 0),
                     "config_drive": self.config_drive,
                    }
 
         def server_update(context, id, params):
             return instance_create(context, id)
 
         def fake_method(*args, **kwargs):
             pass
 
         def project_get_networks(context, user_id):
             return dict(id='1', host='localhost')
 
         def queue_get_for(context, *args):
             return 'network_topic'
 
         def kernel_ramdisk_mapping(*args, **kwargs):
             return (1, 1)
 
         def image_id_from_hash(*args, **kwargs):
             return 2
 
         self.stubs.Set(nova.db.api, 'project_get_networks',
                        project_get_networks)
         self.stubs.Set(nova.db.api, 'instance_create', instance_create)
         self.stubs.Set(nova.rpc, 'cast', fake_method)
         self.stubs.Set(nova.rpc, 'call', fake_method)
         self.stubs.Set(nova.db.api, 'instance_update', server_update)
         self.stubs.Set(nova.db.api, 'queue_get_for', queue_get_for)
         self.stubs.Set(nova.network.manager.VlanManager, 'allocate_fixed_ip',
             fake_method)
         self.stubs.Set(
             nova.api.openstack.create_instance_helper.CreateInstanceHelper,
             "_get_kernel_ramdisk_from_image", kernel_ramdisk_mapping)
         self.stubs.Set(nova.compute.api.API, "_find_host", find_host)
 
     def _test_create_instance_helper(self):
         self._setup_for_create_instance()
 
         body = dict(server=dict(
             name='server_test', imageId=3, flavorId=2,
             metadata={'hello': 'world', 'open': 'stack'},
             personality={}))
         req = webob.Request.blank('/v1.0/servers')
         req.method = 'POST'
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
 
         res = req.get_response(fakes.wsgi_app())
 
         self.assertEqual(res.status_int, 202)
         server = json.loads(res.body)['server']
         self.assertEqual(16, len(server['adminPass']))
         self.assertEqual('server_test', server['name'])
         self.assertEqual(1, server['id'])
         self.assertEqual(2, server['flavorId'])
         self.assertEqual(3, server['imageId'])
         self.assertEqual(FAKE_UUID, server['uuid'])
 
     def test_create_instance(self):
         self._test_create_instance_helper()
 
     def test_create_instance_has_uuid(self):
         """Tests at the db-layer instead of API layer since that's where the
            UUID is generated
         """
         ctxt = context.RequestContext(1, 1)
         values = {}
         instance = nova.db.api.instance_create(ctxt, values)
         expected = FAKE_UUID
         self.assertEqual(instance['uuid'], expected)
 
     def test_create_instance_via_zones(self):
         """Server generated ReservationID"""
         self._setup_for_create_instance()
         self.flags(allow_admin_api=True)
 
         body = dict(server=dict(
             name='server_test', imageId=3, flavorId=2,
             metadata={'hello': 'world', 'open': 'stack'},
             personality={}))
         req = webob.Request.blank('/v1.0/zones/boot')
         req.method = 'POST'
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
 
         res = req.get_response(fakes.wsgi_app())
 
         reservation_id = json.loads(res.body)['reservation_id']
         self.assertEqual(res.status_int, 200)
         self.assertNotEqual(reservation_id, "")
         self.assertNotEqual(reservation_id, None)
         self.assertTrue(len(reservation_id) > 1)
 
     def test_create_instance_via_zones_with_resid(self):
         """User supplied ReservationID"""
         self._setup_for_create_instance()
         self.flags(allow_admin_api=True)
 
         body = dict(server=dict(
             name='server_test', imageId=3, flavorId=2,
             metadata={'hello': 'world', 'open': 'stack'},
             personality={}, reservation_id='myresid'))
         req = webob.Request.blank('/v1.0/zones/boot')
         req.method = 'POST'
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
 
         res = req.get_response(fakes.wsgi_app())
 
         reservation_id = json.loads(res.body)['reservation_id']
         self.assertEqual(res.status_int, 200)
         self.assertEqual(reservation_id, "myresid")
 
     def test_create_instance_no_key_pair(self):
         fakes.stub_out_key_pair_funcs(self.stubs, have_key_pair=False)
         self._test_create_instance_helper()
 
     def test_create_instance_no_name(self):
         self._setup_for_create_instance()
 
         body = {
             'server': {
                 'imageId': 3,
                 'flavorId': 1,
                 'metadata': {
                     'hello': 'world',
                     'open': 'stack',
                 },
                 'personality': {},
             },
         }
 
         req = webob.Request.blank('/v1.0/servers')
         req.method = 'POST'
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 400)
 
     def test_create_image_conflict_snapshot_v1_1(self):
         """Attempt to create image when image is already being created."""
         def snapshot(*args, **kwargs):
             raise exception.InstanceSnapshotting
         self.stubs.Set(nova.compute.API, 'snapshot', snapshot)
 
-        req = webob.Request.blank('/v1.1/fakes/servers/1/action')
+        req = webob.Request.blank('/v1.1/fake/servers/1/action')
         req.method = 'POST'
         req.body = json.dumps({
             "createImage": {
                 "name": "test_snapshot",
             },
         })
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 409)
 
     def test_create_instance_nonstring_name(self):
         self._setup_for_create_instance()
 
         body = {
             'server': {
                 'name': 12,
                 'imageId': 3,
                 'flavorId': 1,
                 'metadata': {
                     'hello': 'world',
                     'open': 'stack',
                 },
                 'personality': {},
             },
         }
 
         req = webob.Request.blank('/v1.0/servers')
         req.method = 'POST'
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 400)
 
     def test_create_instance_no_server_entity(self):
         self._setup_for_create_instance()
 
         body = {}
 
         req = webob.Request.blank('/v1.0/servers')
         req.method = 'POST'
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 422)
 
     def test_create_instance_whitespace_name(self):
         self._setup_for_create_instance()
 
         body = {
             'server': {
                 'name': '    ',
                 'imageId': 3,
                 'flavorId': 1,
                 'metadata': {
                     'hello': 'world',
                     'open': 'stack',
                 },
                 'personality': {},
             },
         }
 
         req = webob.Request.blank('/v1.0/servers')
         req.method = 'POST'
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 400)
 
     def test_create_instance_with_access_ip_v1_1(self):
         self._setup_for_create_instance()
 
         # proper local hrefs must start with 'http://localhost/v1.1/'
-        image_href = 'http://localhost/v1.1/123/images/2'
-        flavor_ref = 'http://localhost/123/flavors/3'
+        image_href = 'http://localhost/v1.1/fake/images/2'
+        flavor_ref = 'http://localhost/fake/flavors/3'
         access_ipv4 = '1.2.3.4'
         access_ipv6 = 'fead::1234'
         expected_flavor = {
             "id": "3",
             "links": [
                 {
                     "rel": "bookmark",
-                    "href": 'http://localhost/123/flavors/3',
+                    "href": 'http://localhost/fake/flavors/3',
                 },
             ],
         }
         expected_image = {
             "id": "2",
             "links": [
                 {
                     "rel": "bookmark",
-                    "href": 'http://localhost/123/images/2',
+                    "href": 'http://localhost/fake/images/2',
                 },
             ],
         }
         body = {
             'server': {
                 'name': 'server_test',
                 'imageRef': image_href,
                 'flavorRef': flavor_ref,
                 'accessIPv4': access_ipv4,
                 'accessIPv6': access_ipv6,
                 'metadata': {
                     'hello': 'world',
                     'open': 'stack',
                 },
                 'personality': [
                     {
                         "path": "/etc/banner.txt",
                         "contents": "MQ==",
                     },
                 ],
             },
         }
 
-        req = webob.Request.blank('/v1.1/123/servers')
+        req = webob.Request.blank('/v1.1/fake/servers')
         req.method = 'POST'
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
 
         res = req.get_response(fakes.wsgi_app())
 
         self.assertEqual(res.status_int, 202)
         server = json.loads(res.body)['server']
         self.assertEqual(16, len(server['adminPass']))
         self.assertEqual(1, server['id'])
         self.assertEqual(0, server['progress'])
         self.assertEqual('server_test', server['name'])
         self.assertEqual(expected_flavor, server['flavor'])
         self.assertEqual(expected_image, server['image'])
         self.assertEqual(access_ipv4, server['accessIPv4'])
         self.assertEqual(access_ipv6, server['accessIPv6'])
 
     def test_create_instance_v1_1(self):
         self._setup_for_create_instance()
 
         # proper local hrefs must start with 'http://localhost/v1.1/'
         image_href = 'http://localhost/v1.1/images/2'
-        flavor_ref = 'http://localhost/123/flavors/3'
+        flavor_ref = 'http://localhost/fake/flavors/3'
         expected_flavor = {
             "id": "3",
             "links": [
                 {
                     "rel": "bookmark",
                     "href": 'http://localhost/fake/flavors/3',
                 },
             ],
         }
         expected_image = {
             "id": "2",
             "links": [
                 {
                     "rel": "bookmark",
                     "href": 'http://localhost/fake/images/2',
                 },
             ],
         }
         body = {
             'server': {
                 'name': 'server_test',
                 'imageRef': image_href,
                 'flavorRef': flavor_ref,
                 'metadata': {
                     'hello': 'world',
                     'open': 'stack',
                 },
                 'personality': [
                     {
                         "path": "/etc/banner.txt",
                         "contents": "MQ==",
                     },
                 ],
             },
         }
 
         req = webob.Request.blank('/v1.1/fake/servers')
         req.method = 'POST'
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
 
         res = req.get_response(fakes.wsgi_app())
 
         self.assertEqual(res.status_int, 202)
         server = json.loads(res.body)['server']
         self.assertEqual(16, len(server['adminPass']))
         self.assertEqual(1, server['id'])
         self.assertEqual("BUILD", server["status"])
         self.assertEqual(0, server['progress'])
         self.assertEqual('server_test', server['name'])
         self.assertEqual(expected_flavor, server['flavor'])
         self.assertEqual(expected_image, server['image'])
         self.assertEqual('1.2.3.4', server['accessIPv4'])
         self.assertEqual('fead::1234', server['accessIPv6'])
 
     def test_create_instance_v1_1_invalid_key_name(self):
         self._setup_for_create_instance()
 
         image_href = 'http://localhost/v1.1/images/2'
         flavor_ref = 'http://localhost/flavors/3'
         body = dict(server=dict(
             name='server_test', imageRef=image_href, flavorRef=flavor_ref,
             key_name='nonexistentkey'))
         req = webob.Request.blank('/v1.1/fake/servers')
         req.method = 'POST'
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 400)
 
     def test_create_instance_v1_1_valid_key_name(self):
         self._setup_for_create_instance()
 
         image_href = 'http://localhost/v1.1/images/2'
         flavor_ref = 'http://localhost/flavors/3'
         body = dict(server=dict(
             name='server_test', imageRef=image_href, flavorRef=flavor_ref,
             key_name='key'))
         req = webob.Request.blank('/v1.1/fake/servers')
         req.method = 'POST'
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 202)
 
     def test_create_instance_v1_1_invalid_flavor_href(self):
         self._setup_for_create_instance()
 
         image_href = 'http://localhost/v1.1/images/2'
         flavor_ref = 'http://localhost/v1.1/flavors/asdf'
         body = dict(server=dict(
             name='server_test', imageRef=image_href, flavorRef=flavor_ref,
             metadata={'hello': 'world', 'open': 'stack'},
             personality={}))
         req = webob.Request.blank('/v1.1/fake/servers')
         req.method = 'POST'
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 400)
 
     def test_create_instance_v1_1_invalid_flavor_id_int(self):
         self._setup_for_create_instance()
 
-        image_href = 'http://localhost/v1.1/123/images/2'
+        image_href = 'http://localhost/v1.1/fake/images/2'
         flavor_ref = -1
         body = dict(server=dict(
             name='server_test', imageRef=image_href, flavorRef=flavor_ref,
             metadata={'hello': 'world', 'open': 'stack'},
             personality={}))
-        req = webob.Request.blank('/v1.1/123/servers')
+        req = webob.Request.blank('/v1.1/fake/servers')
         req.method = 'POST'
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 400)
 
     def test_create_instance_v1_1_bad_flavor_href(self):
         self._setup_for_create_instance()
 
         image_href = 'http://localhost/v1.1/images/2'
         flavor_ref = 'http://localhost/v1.1/flavors/17'
         body = dict(server=dict(
             name='server_test', imageRef=image_href, flavorRef=flavor_ref,
             metadata={'hello': 'world', 'open': 'stack'},
             personality={}))
         req = webob.Request.blank('/v1.1/fake/servers')
         req.method = 'POST'
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 400)
 
     def test_create_instance_with_config_drive_v1_1(self):
         self.config_drive = True
         self._setup_for_create_instance()
 
-        image_href = 'http://localhost/v1.1/123/images/2'
-        flavor_ref = 'http://localhost/v1.1/123/flavors/3'
+        image_href = 'http://localhost/v1.1/fake/images/2'
+        flavor_ref = 'http://localhost/v1.1/fake/flavors/3'
         body = {
             'server': {
                 'name': 'config_drive_test',
                 'imageRef': image_href,
                 'flavorRef': flavor_ref,
                 'metadata': {
                     'hello': 'world',
                     'open': 'stack',
                 },
                 'personality': {},
                 'config_drive': True,
             },
         }
 
-        req = webob.Request.blank('/v1.1/123/servers')
+        req = webob.Request.blank('/v1.1/fake/servers')
         req.method = 'POST'
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
 
         res = req.get_response(fakes.wsgi_app())
         print res
         self.assertEqual(res.status_int, 202)
         server = json.loads(res.body)['server']
         self.assertEqual(1, server['id'])
         self.assertTrue(server['config_drive'])
 
     def test_create_instance_with_config_drive_as_id_v1_1(self):
         self.config_drive = 2
         self._setup_for_create_instance()
 
-        image_href = 'http://localhost/v1.1/123/images/2'
-        flavor_ref = 'http://localhost/v1.1/123/flavors/3'
+        image_href = 'http://localhost/v1.1/fake/images/2'
+        flavor_ref = 'http://localhost/v1.1/fake/flavors/3'
         body = {
             'server': {
                 'name': 'config_drive_test',
                 'imageRef': image_href,
                 'flavorRef': flavor_ref,
                 'metadata': {
                     'hello': 'world',
                     'open': 'stack',
                 },
                 'personality': {},
                 'config_drive': 2,
             },
         }
 
-        req = webob.Request.blank('/v1.1/123/servers')
+        req = webob.Request.blank('/v1.1/fake/servers')
         req.method = 'POST'
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
 
         res = req.get_response(fakes.wsgi_app())
 
         self.assertEqual(res.status_int, 202)
         server = json.loads(res.body)['server']
         self.assertEqual(1, server['id'])
         self.assertTrue(server['config_drive'])
         self.assertEqual(2, server['config_drive'])
 
     def test_create_instance_with_bad_config_drive_v1_1(self):
         self.config_drive = "asdf"
         self._setup_for_create_instance()
 
-        image_href = 'http://localhost/v1.1/123/images/2'
-        flavor_ref = 'http://localhost/v1.1/123/flavors/3'
+        image_href = 'http://localhost/v1.1/fake/images/2'
+        flavor_ref = 'http://localhost/v1.1/fake/flavors/3'
         body = {
             'server': {
                 'name': 'config_drive_test',
                 'imageRef': image_href,
                 'flavorRef': flavor_ref,
                 'metadata': {
                     'hello': 'world',
                     'open': 'stack',
                 },
                 'personality': {},
                 'config_drive': 'asdf',
             },
         }
 
-        req = webob.Request.blank('/v1.1/123/servers')
+        req = webob.Request.blank('/v1.1/fake/servers')
         req.method = 'POST'
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
 
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 400)
 
     def test_create_instance_without_config_drive_v1_1(self):
         self._setup_for_create_instance()
 
-        image_href = 'http://localhost/v1.1/123/images/2'
-        flavor_ref = 'http://localhost/v1.1/123/flavors/3'
+        image_href = 'http://localhost/v1.1/fake/images/2'
+        flavor_ref = 'http://localhost/v1.1/fake/flavors/3'
         body = {
             'server': {
                 'name': 'config_drive_test',
                 'imageRef': image_href,
                 'flavorRef': flavor_ref,
                 'metadata': {
                     'hello': 'world',
                     'open': 'stack',
                 },
                 'personality': {},
                 'config_drive': True,
             },
         }
 
-        req = webob.Request.blank('/v1.1/123/servers')
+        req = webob.Request.blank('/v1.1/fake/servers')
         req.method = 'POST'
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
 
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 202)
         server = json.loads(res.body)['server']
         self.assertEqual(1, server['id'])
         self.assertFalse(server['config_drive'])
 
     def test_create_instance_v1_1_bad_href(self):
         self._setup_for_create_instance()
 
         image_href = 'http://localhost/v1.1/images/asdf'
         flavor_ref = 'http://localhost/v1.1/flavors/3'
         body = dict(server=dict(
             name='server_test', imageRef=image_href, flavorRef=flavor_ref,
             metadata={'hello': 'world', 'open': 'stack'},
             personality={}))
         req = webob.Request.blank('/v1.1/fake/servers')
         req.method = 'POST'
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 400)
 
     def test_create_instance_v1_1_local_href(self):
         self._setup_for_create_instance()
 
         image_id = "2"
         flavor_ref = 'http://localhost/v1.1/flavors/3'
         expected_flavor = {
             "id": "3",
             "links": [
                 {
                     "rel": "bookmark",
                     "href": 'http://localhost/fake/flavors/3',
                 },
             ],
         }
         expected_image = {
             "id": "2",
             "links": [
                 {
                     "rel": "bookmark",
                     "href": 'http://localhost/fake/images/2',
                 },
             ],
         }
         body = {
             'server': {
                 'name': 'server_test',
                 'imageRef': image_id,
                 'flavorRef': flavor_ref,
             },
         }
 
         req = webob.Request.blank('/v1.1/fake/servers')
         req.method = 'POST'
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
 
         res = req.get_response(fakes.wsgi_app())
 
         self.assertEqual(res.status_int, 202)
         server = json.loads(res.body)['server']
         self.assertEqual(expected_flavor, server['flavor'])
         self.assertEqual(expected_image, server['image'])
 
     def test_create_instance_with_admin_pass_v1_0(self):
         self._setup_for_create_instance()
 
         body = {
             'server': {
                 'name': 'test-server-create',
                 'imageId': 3,
                 'flavorId': 1,
                 'adminPass': 'testpass',
             },
         }
 
         req = webob.Request.blank('/v1.0/servers')
         req.method = 'POST'
         req.body = json.dumps(body)
         req.headers['content-type'] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         res = json.loads(res.body)
         self.assertNotEqual(res['server']['adminPass'],
                             body['server']['adminPass'])
 
     def test_create_instance_v1_1_admin_pass(self):
         self._setup_for_create_instance()
 
         image_href = 'http://localhost/v1.1/images/2'
         flavor_ref = 'http://localhost/v1.1/flavors/3'
         body = {
             'server': {
                 'name': 'server_test',
                 'imageRef': 3,
                 'flavorRef': 3,
                 'adminPass': 'testpass',
             },
         }
 
         req = webob.Request.blank('/v1.1/fake/servers')
         req.method = 'POST'
         req.body = json.dumps(body)
         req.headers['content-type'] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 202)
         server = json.loads(res.body)['server']
         self.assertEqual(server['adminPass'], body['server']['adminPass'])
 
     def test_create_instance_v1_1_admin_pass_empty(self):
         self._setup_for_create_instance()
 
         body = {
             'server': {
                 'name': 'server_test',
                 'imageRef': 3,
                 'flavorRef': 3,
                 'adminPass': '',
             },
         }
 
         req = webob.Request.blank('/v1.1/fake/servers')
         req.method = 'POST'
         req.body = json.dumps(body)
         req.headers['content-type'] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 400)
 
     def test_create_instance_whitespace_name(self):
         self._setup_for_create_instance()
 
         body = {
             'server': {
                 'name': '    ',
                 'imageId': 3,
                 'flavorId': 1,
                 'metadata': {
                     'hello': 'world',
                     'open': 'stack',
                 },
                 'personality': {},
             },
         }
 
         req = webob.Request.blank('/v1.0/servers')
         req.method = 'POST'
         req.body = json.dumps(body)
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 400)
 
     def test_update_server_no_body(self):
         req = webob.Request.blank('/v1.0/servers/1')
         req.method = 'PUT'
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 400)
 
     def test_update_nonstring_name(self):
         """ Confirm that update is filtering params """
         inst_dict = dict(name=12, adminPass='bacon')
         self.body = json.dumps(dict(server=inst_dict))
 
         req = webob.Request.blank('/v1.0/servers/1')
         req.method = 'PUT'
         req.content_type = "application/json"
         req.body = self.body
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 400)
 
     def test_update_whitespace_name(self):
         """ Confirm that update is filtering params """
         inst_dict = dict(name='   ', adminPass='bacon')
         self.body = json.dumps(dict(server=inst_dict))
 
         req = webob.Request.blank('/v1.0/servers/1')
         req.method = 'PUT'
         req.content_type = "application/json"
         req.body = self.body
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 400)
 
     def test_update_null_name(self):
         """ Confirm that update is filtering params """
         inst_dict = dict(name='', adminPass='bacon')
         self.body = json.dumps(dict(server=inst_dict))
 
         req = webob.Request.blank('/v1.0/servers/1')
         req.method = 'PUT'
         req.content_type = "application/json"
         req.body = self.body
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 400)
 
     def test_update_server_v1_0(self):
         inst_dict = dict(name='server_test', adminPass='bacon')
         self.body = json.dumps(dict(server=inst_dict))
 
         def server_update(context, id, params):
             filtered_dict = dict(display_name='server_test')
             self.assertEqual(params, filtered_dict)
             return filtered_dict
 
         self.stubs.Set(nova.db.api, 'instance_update',
             server_update)
         self.stubs.Set(nova.compute.api.API, "_find_host", find_host)
         mock_method = MockSetAdminPassword()
         self.stubs.Set(nova.compute.api.API, 'set_admin_password', mock_method)
 
         req = webob.Request.blank('/v1.0/servers/1')
         req.method = 'PUT'
         req.content_type = "application/json"
         req.body = self.body
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 204)
         self.assertEqual(mock_method.instance_id, '1')
         self.assertEqual(mock_method.password, 'bacon')
 
     def test_update_server_no_body_v1_1(self):
         req = webob.Request.blank('/v1.1/fake/servers/1')
         req.method = 'PUT'
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 400)
 
     def test_update_server_all_attributes_v1_1(self):
         self.stubs.Set(nova.db.api, 'instance_get',
                 return_server_with_attributes(name='server_test',
                                               access_ipv4='0.0.0.0',
                                               access_ipv6='beef::0123'))
-        req = webob.Request.blank('/v1.1/123/servers/1')
+        req = webob.Request.blank('/v1.1/fake/servers/1')
         req.method = 'PUT'
         req.content_type = 'application/json'
         body = {'server': {
                   'name': 'server_test',
                   'accessIPv4': '0.0.0.0',
                   'accessIPv6': 'beef::0123',
                }}
         req.body = json.dumps(body)
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 200)
         res_dict = json.loads(res.body)
         self.assertEqual(res_dict['server']['id'], 1)
         self.assertEqual(res_dict['server']['name'], 'server_test')
         self.assertEqual(res_dict['server']['accessIPv4'], '0.0.0.0')
         self.assertEqual(res_dict['server']['accessIPv6'], 'beef::0123')
 
     def test_update_server_name_v1_1(self):
         self.stubs.Set(nova.db.api, 'instance_get',
                 return_server_with_attributes(name='server_test'))
         req = webob.Request.blank('/v1.1/fake/servers/1')
         req.method = 'PUT'
         req.content_type = 'application/json'
         req.body = json.dumps({'server': {'name': 'server_test'}})
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 200)
         res_dict = json.loads(res.body)
         self.assertEqual(res_dict['server']['id'], 1)
         self.assertEqual(res_dict['server']['name'], 'server_test')
 
     def test_update_server_access_ipv4_v1_1(self):
         self.stubs.Set(nova.db.api, 'instance_get',
                 return_server_with_attributes(access_ipv4='0.0.0.0'))
-        req = webob.Request.blank('/v1.1/123/servers/1')
+        req = webob.Request.blank('/v1.1/fake/servers/1')
         req.method = 'PUT'
         req.content_type = 'application/json'
         req.body = json.dumps({'server': {'accessIPv4': '0.0.0.0'}})
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 200)
         res_dict = json.loads(res.body)
         self.assertEqual(res_dict['server']['id'], 1)
         self.assertEqual(res_dict['server']['accessIPv4'], '0.0.0.0')
 
     def test_update_server_access_ipv6_v1_1(self):
         self.stubs.Set(nova.db.api, 'instance_get',
                 return_server_with_attributes(access_ipv6='beef::0123'))
-        req = webob.Request.blank('/v1.1/123/servers/1')
+        req = webob.Request.blank('/v1.1/fake/servers/1')
         req.method = 'PUT'
         req.content_type = 'application/json'
         req.body = json.dumps({'server': {'accessIPv6': 'beef::0123'}})
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 200)
         res_dict = json.loads(res.body)
         self.assertEqual(res_dict['server']['id'], 1)
         self.assertEqual(res_dict['server']['accessIPv6'], 'beef::0123')
 
     def test_update_server_adminPass_ignored_v1_1(self):
         inst_dict = dict(name='server_test', adminPass='bacon')
         self.body = json.dumps(dict(server=inst_dict))
 
         def server_update(context, id, params):
             filtered_dict = dict(display_name='server_test')
             self.assertEqual(params, filtered_dict)
             return filtered_dict
 
         self.stubs.Set(nova.db.api, 'instance_update', server_update)
         self.stubs.Set(nova.db.api, 'instance_get',
                 return_server_with_attributes(name='server_test'))
 
         req = webob.Request.blank('/v1.1/fake/servers/1')
         req.method = 'PUT'
         req.content_type = "application/json"
         req.body = self.body
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 200)
         res_dict = json.loads(res.body)
         self.assertEqual(res_dict['server']['id'], 1)
         self.assertEqual(res_dict['server']['name'], 'server_test')
 
     def test_create_backup_schedules(self):
         req = webob.Request.blank('/v1.0/servers/1/backup_schedule')
         req.method = 'POST'
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 501)
 
     def test_delete_backup_schedules(self):
         req = webob.Request.blank('/v1.0/servers/1/backup_schedule/1')
         req.method = 'DELETE'
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 501)
 
     def test_get_server_backup_schedules(self):
         req = webob.Request.blank('/v1.0/servers/1/backup_schedule')
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 501)
 
     def test_get_server_backup_schedule(self):
         req = webob.Request.blank('/v1.0/servers/1/backup_schedule/1')
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 501)
 
     def test_server_backup_schedule_deprecated_v1_1(self):
         req = webob.Request.blank('/v1.1/fake/servers/1/backup_schedule')
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 404)
 
     def test_get_all_server_details_xml_v1_0(self):
         req = webob.Request.blank('/v1.0/servers/detail')
         req.headers['Accept'] = 'application/xml'
         res = req.get_response(fakes.wsgi_app())
         dom = minidom.parseString(res.body)
         for i, server in enumerate(dom.getElementsByTagName('server')):
             self.assertEqual(server.getAttribute('id'), str(i))
             self.assertEqual(server.getAttribute('hostId'), '')
             self.assertEqual(server.getAttribute('name'), 'server%d' % i)
             self.assertEqual(server.getAttribute('imageId'), '10')
             self.assertEqual(server.getAttribute('status'), 'BUILD')
             (meta,) = server.getElementsByTagName('meta')
             self.assertEqual(meta.getAttribute('key'), 'seq')
             self.assertEqual(meta.firstChild.data.strip(), str(i))
 
     def test_get_all_server_details_v1_0(self):
         req = webob.Request.blank('/v1.0/servers/detail')
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 200)
         res_dict = json.loads(res.body)
 
         for i, s in enumerate(res_dict['servers']):
             self.assertEqual(s['id'], i)
             self.assertEqual(s['hostId'], '')
             self.assertEqual(s['name'], 'server%d' % i)
             self.assertEqual(s['imageId'], 10)
             self.assertEqual(s['flavorId'], 1)
             self.assertEqual(s['status'], 'BUILD')
             self.assertEqual(s['metadata']['seq'], str(i))
 
     def test_get_all_server_details_v1_1(self):
         expected_flavor = {
             "id": "1",
             "links": [
                 {
                     "rel": "bookmark",
                     "href": 'http://localhost/fake/flavors/1',
                 },
             ],
         }
         expected_image = {
             "id": "10",
             "links": [
                 {
                     "rel": "bookmark",
                     "href": 'http://localhost/fake/images/10',
                 },
             ],
         }
         req = webob.Request.blank('/v1.1/fake/servers/detail')
         res = req.get_response(fakes.wsgi_app())
         res_dict = json.loads(res.body)
 
         for i, s in enumerate(res_dict['servers']):
             self.assertEqual(s['id'], i)
             self.assertEqual(s['hostId'], '')
             self.assertEqual(s['name'], 'server%d' % i)
             self.assertEqual(s['image'], expected_image)
             self.assertEqual(s['flavor'], expected_flavor)
             self.assertEqual(s['status'], 'BUILD')
             self.assertEqual(s['metadata']['seq'], str(i))
 
     def test_server_actions(self):
         req = webob.Request.blank('/v1.1/fake/servers/%s/actions' % FAKE_UUID)
         req.method = "GET"
         res = req.get_response(fakes.wsgi_app())
         res_dict = json.loads(res.body)
         self.assertEqual(res_dict, {'actions': _fake_compute_actions})
 
     def test_server_actions_after_reboot(self):
         """
         Bug #897091 was this failure mode -- the /actions call failed if
         /action had been called first.
         """
         req = webob.Request.blank('/v1.1/fake/servers/%s/action' % FAKE_UUID)
         req.method = 'POST'
         req.body = json.dumps(dict(reboot=dict(type="HARD")))
         req.headers["content-type"] = "application/json"
         req.get_response(fakes.wsgi_app())
         self.test_server_actions()
 
     def test_get_all_server_details_with_host(self):
         '''
         We want to make sure that if two instances are on the same host, then
         they return the same hostId. If two instances are on different hosts,
         they should return different hostId's. In this test, there are 5
         instances - 2 on one host and 3 on another.
         '''
 
         def return_servers_with_host(context, *args, **kwargs):
             return [stub_instance(i, 'fake', 'fake', None, None, i % 2)
                     for i in xrange(5)]
 
         self.stubs.Set(nova.db.api, 'instance_get_all_by_filters',
             return_servers_with_host)
 
         req = webob.Request.blank('/v1.0/servers/detail')
         res = req.get_response(fakes.wsgi_app())
         res_dict = json.loads(res.body)
 
         server_list = res_dict['servers']
         host_ids = [server_list[0]['hostId'], server_list[1]['hostId']]
         self.assertTrue(host_ids[0] and host_ids[1])
         self.assertNotEqual(host_ids[0], host_ids[1])
 
         for i, s in enumerate(res_dict['servers']):
             self.assertEqual(s['id'], i)
             self.assertEqual(s['hostId'], host_ids[i % 2])
             self.assertEqual(s['name'], 'server%d' % i)
             self.assertEqual(s['imageId'], 10)
             self.assertEqual(s['flavorId'], 1)
 
     def test_server_pause(self):
         self.flags(allow_admin_api=True)
         req = webob.Request.blank('/v1.0/servers/1/pause')
         req.method = 'POST'
         req.content_type = 'application/json'
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 202)
 
     def test_server_unpause(self):
         self.flags(allow_admin_api=True)
         req = webob.Request.blank('/v1.0/servers/1/unpause')
         req.method = 'POST'
         req.content_type = 'application/json'
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 202)
 
     def test_server_suspend(self):
         self.flags(allow_admin_api=True)
         req = webob.Request.blank('/v1.0/servers/1/suspend')
         req.method = 'POST'
         req.content_type = 'application/json'
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 202)
 
     def test_server_resume(self):
         self.flags(allow_admin_api=True)
         req = webob.Request.blank('/v1.0/servers/1/resume')
         req.method = 'POST'
         req.content_type = 'application/json'
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 202)
 
     def test_server_reset_network(self):
         self.flags(allow_admin_api=True)
         req = webob.Request.blank('/v1.0/servers/1/reset_network')
         req.method = 'POST'
         req.content_type = 'application/json'
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 202)
 
     def test_server_inject_network_info(self):
         self.flags(allow_admin_api=True)
         req = webob.Request.blank(
               '/v1.0/servers/1/inject_network_info')
         req.method = 'POST'
         req.content_type = 'application/json'
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 202)
 
     def test_server_diagnostics(self):
         self.flags(allow_admin_api=False)
         req = webob.Request.blank("/v1.0/servers/1/diagnostics")
         req.method = "GET"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 404)
 
     def test_server_actions(self):
         self.flags(allow_admin_api=False)
         req = webob.Request.blank("/v1.0/servers/1/actions")
         req.method = "GET"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 404)
 
     def test_delete_server_instance(self):
         req = webob.Request.blank('/v1.0/servers/1')
         req.method = 'DELETE'
 
         self.server_delete_called = False
 
         def instance_destroy_mock(context, id):
             self.server_delete_called = True
 
         self.stubs.Set(nova.db.api, 'instance_destroy',
             instance_destroy_mock)
 
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status, '202 Accepted')
         self.assertEqual(self.server_delete_called, True)
 
     def test_rescue_accepted(self):
         self.flags(allow_admin_api=True)
         body = {}
 
         self.called = False
 
         def rescue_mock(*args, **kwargs):
             self.called = True
 
         self.stubs.Set(nova.compute.api.API, 'rescue', rescue_mock)
         req = webob.Request.blank('/v1.0/servers/1/rescue')
         req.method = 'POST'
         req.content_type = 'application/json'
 
         res = req.get_response(fakes.wsgi_app())
 
         self.assertEqual(self.called, True)
         self.assertEqual(res.status_int, 202)
 
     def test_rescue_raises_handled(self):
         self.flags(allow_admin_api=True)
         body = {}
 
         def rescue_mock(*args, **kwargs):
             raise Exception('Who cares?')
 
         self.stubs.Set(nova.compute.api.API, 'rescue', rescue_mock)
         req = webob.Request.blank('/v1.0/servers/1/rescue')
         req.method = 'POST'
         req.content_type = 'application/json'
 
         res = req.get_response(fakes.wsgi_app())
 
         self.assertEqual(res.status_int, 422)
 
     def test_delete_server_instance_v1_1(self):
         req = webob.Request.blank('/v1.1/fake/servers/1')
         req.method = 'DELETE'
 
         self.server_delete_called = False
 
         def instance_destroy_mock(context, id):
             self.server_delete_called = True
 
         self.stubs.Set(nova.db.api, 'instance_destroy',
             instance_destroy_mock)
 
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(res.status_int, 204)
         self.assertEqual(self.server_delete_called, True)
 
 
diff --git a/nova/tests/api/openstack/test_volume_types.py b/nova/tests/api/openstack/test_volume_types.py
index 192e668..850787f 100644
--- a/nova/tests/api/openstack/test_volume_types.py
+++ b/nova/tests/api/openstack/test_volume_types.py
@@ -74,98 +74,98 @@ def return_volume_types_get_by_name(context, name):
 class VolumeTypesApiTest(test.TestCase):
     def setUp(self):
         super(VolumeTypesApiTest, self).setUp()
         fakes.stub_out_key_pair_funcs(self.stubs)
 
     def tearDown(self):
         self.stubs.UnsetAll()
         super(VolumeTypesApiTest, self).tearDown()
 
     def test_volume_types_index(self):
         self.stubs.Set(volume_types, 'get_all_types',
                        return_volume_types_get_all_types)
-        req = webob.Request.blank('/v1.1/123/os-volume-types')
+        req = webob.Request.blank('/v1.1/fake/os-volume-types')
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(200, res.status_int)
         res_dict = json.loads(res.body)
         self.assertEqual('application/json', res.headers['Content-Type'])
 
         self.assertEqual(3, len(res_dict))
         for name in ['vol_type_1', 'vol_type_2', 'vol_type_3']:
             self.assertEqual(name, res_dict[name]['name'])
             self.assertEqual('value1', res_dict[name]['extra_specs']['key1'])
 
     def test_volume_types_index_no_data(self):
         self.stubs.Set(volume_types, 'get_all_types',
                        return_empty_volume_types_get_all_types)
-        req = webob.Request.blank('/v1.1/123/os-volume-types')
+        req = webob.Request.blank('/v1.1/fake/os-volume-types')
         res = req.get_response(fakes.wsgi_app())
         res_dict = json.loads(res.body)
         self.assertEqual(200, res.status_int)
         self.assertEqual('application/json', res.headers['Content-Type'])
         self.assertEqual(0, len(res_dict))
 
     def test_volume_types_show(self):
         self.stubs.Set(volume_types, 'get_volume_type',
                        return_volume_types_get_volume_type)
-        req = webob.Request.blank('/v1.1/123/os-volume-types/1')
+        req = webob.Request.blank('/v1.1/fake/os-volume-types/1')
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(200, res.status_int)
         res_dict = json.loads(res.body)
         self.assertEqual('application/json', res.headers['Content-Type'])
         self.assertEqual(1, len(res_dict))
         self.assertEqual('vol_type_1', res_dict['volume_type']['name'])
 
     def test_volume_types_show_not_found(self):
         self.stubs.Set(volume_types, 'get_volume_type',
                        return_volume_types_get_volume_type)
-        req = webob.Request.blank('/v1.1/123/os-volume-types/777')
+        req = webob.Request.blank('/v1.1/fake/os-volume-types/777')
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(404, res.status_int)
 
     def test_volume_types_delete(self):
         self.stubs.Set(volume_types, 'get_volume_type',
                        return_volume_types_get_volume_type)
         self.stubs.Set(volume_types, 'destroy',
                        return_volume_types_destroy)
-        req = webob.Request.blank('/v1.1/123/os-volume-types/1')
+        req = webob.Request.blank('/v1.1/fake/os-volume-types/1')
         req.method = 'DELETE'
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(200, res.status_int)
 
     def test_volume_types_delete_not_found(self):
         self.stubs.Set(volume_types, 'get_volume_type',
                        return_volume_types_get_volume_type)
         self.stubs.Set(volume_types, 'destroy',
                        return_volume_types_destroy)
-        req = webob.Request.blank('/v1.1/123/os-volume-types/777')
+        req = webob.Request.blank('/v1.1/fake/os-volume-types/777')
         req.method = 'DELETE'
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(404, res.status_int)
 
     def test_create(self):
         self.stubs.Set(volume_types, 'create',
                        return_volume_types_create)
         self.stubs.Set(volume_types, 'get_volume_type_by_name',
                        return_volume_types_get_by_name)
-        req = webob.Request.blank('/v1.1/123/os-volume-types')
+        req = webob.Request.blank('/v1.1/fake/os-volume-types')
         req.method = 'POST'
         req.body = '{"volume_type": {"name": "vol_type_1", '\
                                     '"extra_specs": {"key1": "value1"}}}'
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(200, res.status_int)
         res_dict = json.loads(res.body)
         self.assertEqual('application/json', res.headers['Content-Type'])
         self.assertEqual(1, len(res_dict))
         self.assertEqual('vol_type_1', res_dict['volume_type']['name'])
 
     def test_create_empty_body(self):
         self.stubs.Set(volume_types, 'create',
                        return_volume_types_create)
         self.stubs.Set(volume_types, 'get_volume_type_by_name',
                        return_volume_types_get_by_name)
-        req = webob.Request.blank('/v1.1/123/os-volume-types')
+        req = webob.Request.blank('/v1.1/fake/os-volume-types')
         req.method = 'POST'
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(400, res.status_int)
diff --git a/nova/tests/api/openstack/test_volume_types_extra_specs.py b/nova/tests/api/openstack/test_volume_types_extra_specs.py
index 34bdada..ca21f91 100644
--- a/nova/tests/api/openstack/test_volume_types_extra_specs.py
+++ b/nova/tests/api/openstack/test_volume_types_extra_specs.py
@@ -60,122 +60,122 @@ def stub_volume_type_extra_specs():
 class VolumeTypesExtraSpecsTest(test.TestCase):
 
     def setUp(self):
         super(VolumeTypesExtraSpecsTest, self).setUp()
         fakes.stub_out_key_pair_funcs(self.stubs)
-        self.api_path = '/v1.1/123/os-volume-types/1/extra_specs'
+        self.api_path = '/v1.1/fake/os-volume-types/1/extra_specs'
 
     def test_index(self):
         self.stubs.Set(nova.db.api, 'volume_type_extra_specs_get',
                        return_volume_type_extra_specs)
         request = webob.Request.blank(self.api_path)
         res = request.get_response(fakes.wsgi_app())
         self.assertEqual(200, res.status_int)
         res_dict = json.loads(res.body)
         self.assertEqual('application/json', res.headers['Content-Type'])
         self.assertEqual('value1', res_dict['extra_specs']['key1'])
 
     def test_index_no_data(self):
         self.stubs.Set(nova.db.api, 'volume_type_extra_specs_get',
                        return_empty_volume_type_extra_specs)
         req = webob.Request.blank(self.api_path)
         res = req.get_response(fakes.wsgi_app())
         res_dict = json.loads(res.body)
         self.assertEqual(200, res.status_int)
         self.assertEqual('application/json', res.headers['Content-Type'])
         self.assertEqual(0, len(res_dict['extra_specs']))
 
     def test_show(self):
         self.stubs.Set(nova.db.api, 'volume_type_extra_specs_get',
                        return_volume_type_extra_specs)
         req = webob.Request.blank(self.api_path + '/key5')
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(200, res.status_int)
         res_dict = json.loads(res.body)
         self.assertEqual('application/json', res.headers['Content-Type'])
         self.assertEqual('value5', res_dict['key5'])
 
     def test_show_spec_not_found(self):
         self.stubs.Set(nova.db.api, 'volume_type_extra_specs_get',
                        return_empty_volume_type_extra_specs)
         req = webob.Request.blank(self.api_path + '/key6')
         res = req.get_response(fakes.wsgi_app())
         res_dict = json.loads(res.body)
         self.assertEqual(404, res.status_int)
 
     def test_delete(self):
         self.stubs.Set(nova.db.api, 'volume_type_extra_specs_delete',
                        delete_volume_type_extra_specs)
         req = webob.Request.blank(self.api_path + '/key5')
         req.method = 'DELETE'
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(200, res.status_int)
 
     def test_create(self):
         self.stubs.Set(nova.db.api,
                        'volume_type_extra_specs_update_or_create',
                        return_create_volume_type_extra_specs)
         req = webob.Request.blank(self.api_path)
         req.method = 'POST'
         req.body = '{"extra_specs": {"key1": "value1"}}'
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         res_dict = json.loads(res.body)
         self.assertEqual(200, res.status_int)
         self.assertEqual('application/json', res.headers['Content-Type'])
         self.assertEqual('value1', res_dict['extra_specs']['key1'])
 
     def test_create_empty_body(self):
         self.stubs.Set(nova.db.api,
                        'volume_type_extra_specs_update_or_create',
                        return_create_volume_type_extra_specs)
         req = webob.Request.blank(self.api_path)
         req.method = 'POST'
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(400, res.status_int)
 
     def test_update_item(self):
         self.stubs.Set(nova.db.api,
                        'volume_type_extra_specs_update_or_create',
                        return_create_volume_type_extra_specs)
         req = webob.Request.blank(self.api_path + '/key1')
         req.method = 'PUT'
         req.body = '{"key1": "value1"}'
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(200, res.status_int)
         self.assertEqual('application/json', res.headers['Content-Type'])
         res_dict = json.loads(res.body)
         self.assertEqual('value1', res_dict['key1'])
 
     def test_update_item_empty_body(self):
         self.stubs.Set(nova.db.api,
                        'volume_type_extra_specs_update_or_create',
                        return_create_volume_type_extra_specs)
         req = webob.Request.blank(self.api_path + '/key1')
         req.method = 'PUT'
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(400, res.status_int)
 
     def test_update_item_too_many_keys(self):
         self.stubs.Set(nova.db.api,
                        'volume_type_extra_specs_update_or_create',
                        return_create_volume_type_extra_specs)
         req = webob.Request.blank(self.api_path + '/key1')
         req.method = 'PUT'
         req.body = '{"key1": "value1", "key2": "value2"}'
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(400, res.status_int)
 
     def test_update_item_body_uri_mismatch(self):
         self.stubs.Set(nova.db.api,
                        'volume_type_extra_specs_update_or_create',
                        return_create_volume_type_extra_specs)
         req = webob.Request.blank(self.api_path + '/bad')
         req.method = 'PUT'
         req.body = '{"key1": "value1"}'
         req.headers["content-type"] = "application/json"
         res = req.get_response(fakes.wsgi_app())
         self.assertEqual(400, res.status_int)
