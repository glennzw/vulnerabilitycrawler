   Do not overwrite project_id from request params
   
   Prevent project_id overwriting from OSAPI request parameters.
   The patch is actually very simple (nova/api/openstack/wsgi.py) but
   needs significant test adjustments (nova/tests/*) to pass.
   
   Fixes bug 904072. Patch from Vish Ishaya and Mark McLoughlin.
   
   (cherry picked from commit c9c09bd60e7a0e0258d218a31d7878755bea1395)
   
   Change-Id: I66ea0f178ce6271ec1020e9f1a73bd4e8c83ddab
            return faults.Fault(webob.exc.HTTPBadRequest(explanation=msg))

        project_id = args.pop("project_id", None)
        if 'nova.context' in request.environ and project_id:
            request.environ['nova.context'].project_id = project_id

        try:
            action_result = self.dispatch(request, action, args)
        return {'server': server}

    def _get_create_request_json(self, body_dict):
        req = webob.Request.blank('/v1.1/123/os-create-server-ext')
        req.headers['Content-Type'] = 'application/json'
        req.method = 'POST'
        req.body = json.dumps(body_dict)
        return ''.join(body_parts)

    def _get_create_request_xml(self, body_dict):
        req = webob.Request.blank('/v1.1/123/os-create-server-ext')
        req.content_type = 'application/xml'
        req.accept = 'application/xml'
        req.method = 'POST'

    def test_get_server_by_id_verify_security_groups_json(self):
        self.stubs.Set(nova.db.api, 'instance_get', return_server_by_id)
        req = webob.Request.blank('/v1.1/123/os-create-server-ext/1')
        req.headers['Content-Type'] = 'application/json'
        response = req.get_response(fakes.wsgi_app())
        self.assertEquals(response.status_int, 200)

    def test_get_server_by_id_verify_security_groups_xml(self):
        self.stubs.Set(nova.db.api, 'instance_get', return_server_by_id)
        req = webob.Request.blank('/v1.1/123/os-create-server-ext/1')
        req.headers['Accept'] = 'application/xml'
        response = req.get_response(fakes.wsgi_app())
        self.assertEquals(response.status_int, 200)
        self.assertTrue('floating_ip' in view)

    def test_floating_ips_list(self):
        req = webob.Request.blank('/v1.1/123/os-floating-ips')
        res = req.get_response(fakes.wsgi_app())
        self.assertEqual(res.status_int, 200)
        res_dict = json.loads(res.body)
        self.assertEqual(res_dict, response)

    def test_floating_ip_show(self):
        req = webob.Request.blank('/v1.1/123/os-floating-ips/1')
        res = req.get_response(fakes.wsgi_app())
        self.assertEqual(res.status_int, 200)
        res_dict = json.loads(res.body)
                    'fixed_ip': {'address': '10.0.0.1', 'instance_id': 1}}
        self.stubs.Set(network.api.API, "get_floating_ip", get_floating_ip)

        req = webob.Request.blank('/v1.1/123/os-floating-ips/1')
        res = req.get_response(fakes.wsgi_app())
        self.assertEqual(res.status_int, 200)
        res_dict = json.loads(res.body)
            raise(rpc.RemoteError('NoMoreFloatingIps', '', ''))

        self.stubs.Set(rpc, "call", fake_call)
        req = webob.Request.blank('/v1.1/123/os-floating-ips')
        req.method = 'POST'
        req.headers['Content-Type'] = 'application/json'
        res = req.get_response(fakes.wsgi_app())
    def test_floating_ip_allocate(self):
        self.stubs.Set(network.api.API, "allocate_floating_ip",
                       network_api_allocate)
        req = webob.Request.blank('/v1.1/123/os-floating-ips')
        req.method = 'POST'
        req.headers['Content-Type'] = 'application/json'
        res = req.get_response(fakes.wsgi_app())
                       get_floating_ip)
        self.stubs.Set(network.api.API, "disassociate_floating_ip",
                       disassociate)
        req = webob.Request.blank('/v1.1/123/os-floating-ips/1')
        req.method = 'DELETE'
        res = req.get_response(fakes.wsgi_app())
        self.assertEqual(res.status_int, 202)
                       fake_get_floating_ip)
        self.stubs.Set(network.api.API, "disassociate_floating_ip",
                       fake_disassociate)
        req = webob.Request.blank('/v1.1/123/os-floating-ips/1')
        req.method = 'DELETE'
        res = req.get_response(fakes.wsgi_app())
        self.assertEqual(res.status_int, 202)
        self.stubs.Set(network.api.API, "associate_floating_ip",
                       network_api_associate)
        body = dict(addFloatingIp=dict(address='11.0.0.1'))
        req = webob.Request.blank('/v1.1/123/servers/test_inst/action')
        req.method = "POST"
        req.body = json.dumps(body)
        req.headers["content-type"] = "application/json"
        db.floating_ip_update(self.context, self.address, {'project_id': 'bad',
                                                           'fixed_ip_id': 1})
        body = dict(addFloatingIp=dict(address=self.address))
        req = webob.Request.blank('/v1.1/123/servers/test_inst/action')
        req.method = "POST"
        req.body = json.dumps(body)
        req.headers["content-type"] = "application/json"
        db.floating_ip_update(self.context, self.address, {'project_id': None,
                                                           'fixed_ip_id': 1})
        body = dict(addFloatingIp=dict(address=self.address))
        req = webob.Request.blank('/v1.1/123/servers/test_inst/action')
        req.method = "POST"
        req.body = json.dumps(body)
        req.headers["content-type"] = "application/json"
        def fake_network_api_disassociate(local_self, ctx, floating_address):
            self.disassociated = True

        db.floating_ip_update(self.context, self.address, {'project_id': '123',
                                                           'fixed_ip_id': 1})
        self.stubs.Set(network.api.API, "disassociate_floating_ip",
                       fake_network_api_disassociate)
        self.stubs.Set(db.api, "fixed_ip_get_by_address",
                       fake_fixed_ip_get_by_address)

        body = dict(addFloatingIp=dict(address=self.address))
        req = webob.Request.blank('/v1.1/123/servers/test_inst/action')
        req.method = "POST"
        req.body = json.dumps(body)
        req.headers["content-type"] = "application/json"
        self.stubs.Set(network.api.API, "disassociate_floating_ip",
                       fake_disassociate)
        body = dict(removeFloatingIp=dict(address='10.10.10.10'))
        req = webob.Request.blank('/v1.1/123/servers/test_inst/action')
        req.method = "POST"
        req.body = json.dumps(body)
        req.headers["content-type"] = "application/json"
        self.stubs.Set(network.api.API, "disassociate_floating_ip",
                       fake_disassociate)
        body = dict(removeFloatingIp=dict(address='10.10.10.10'))
        req = webob.Request.blank('/v1.1/123/servers/test_inst/action')
        req.method = "POST"
        req.body = json.dumps(body)
        req.headers["content-type"] = "application/json"

    def test_bad_address_param_in_remove_floating_ip(self):
        body = dict(removeFloatingIp=dict(badparam='11.0.0.1'))
        req = webob.Request.blank('/v1.1/123/servers/test_inst/action')
        req.method = "POST"
        req.body = json.dumps(body)
        req.headers["content-type"] = "application/json"

    def test_missing_dict_param_in_remove_floating_ip(self):
        body = dict(removeFloatingIp='11.0.0.1')
        req = webob.Request.blank('/v1.1/123/servers/test_inst/action')
        req.method = "POST"
        req.body = json.dumps(body)
        req.headers["content-type"] = "application/json"

    def test_bad_address_param_in_add_floating_ip(self):
        body = dict(addFloatingIp=dict(badparam='11.0.0.1'))
        req = webob.Request.blank('/v1.1/123/servers/test_inst/action')
        req.method = "POST"
        req.body = json.dumps(body)
        req.headers["content-type"] = "application/json"

    def test_missing_dict_param_in_add_floating_ip(self):
        body = dict(addFloatingIp='11.0.0.1')
        req = webob.Request.blank('/v1.1/123/servers/test_inst/action')
        req.method = "POST"
        req.body = json.dumps(body)
        req.headers["content-type"] = "application/json"
        self.context = context.get_admin_context()

    def test_keypair_list(self):
        req = webob.Request.blank('/v1.1/123/os-keypairs')
        res = req.get_response(fakes.wsgi_app())
        self.assertEqual(res.status_int, 200)
        res_dict = json.loads(res.body)

    def test_keypair_create(self):
        body = {'keypair': {'name': 'create_test'}}
        req = webob.Request.blank('/v1.1/123/os-keypairs')
        req.method = 'POST'
        req.body = json.dumps(body)
        req.headers['Content-Type'] = 'application/json'
            },
        }

        req = webob.Request.blank('/v1.1/123/os-keypairs')
        req.method = 'POST'
        req.body = json.dumps(body)
        req.headers['Content-Type'] = 'application/json'
        self.assertFalse('private_key' in res_dict['keypair'])

    def test_keypair_delete(self):
        req = webob.Request.blank('/v1.1/123/os-keypairs/FAKE')
        req.method = 'DELETE'
        req.headers['Content-Type'] = 'application/json'
        res = req.get_response(fakes.wsgi_app())
        last_add_fixed_ip = (None, None)

        body = dict(addFixedIp=dict(networkId='test_net'))
        req = webob.Request.blank('/v1.1/123/servers/test_inst/action')
        req.method = 'POST'
        req.body = json.dumps(body)
        req.headers['content-type'] = 'application/json'
        last_add_fixed_ip = (None, None)

        body = dict(addFixedIp=dict())
        req = webob.Request.blank('/v1.1/123/servers/test_inst/action')
        req.method = 'POST'
        req.body = json.dumps(body)
        req.headers['content-type'] = 'application/json'
        last_remove_fixed_ip = (None, None)

        body = dict(removeFixedIp=dict(address='10.10.10.1'))
        req = webob.Request.blank('/v1.1/123/servers/test_inst/action')
        req.method = 'POST'
        req.body = json.dumps(body)
        req.headers['content-type'] = 'application/json'
        last_remove_fixed_ip = (None, None)

        body = dict(removeFixedIp=dict())
        req = webob.Request.blank('/v1.1/123/servers/test_inst/action')
        req.method = 'POST'
        req.body = json.dumps(body)
        req.headers['content-type'] = 'application/json'
        self.assertEqual(qs['injected_file_content_bytes'], 10240)

    def test_quotas_defaults(self):
        uri = '/v1.1/fake_tenant/os-quota-sets/fake_tenant/defaults'
        req = webob.Request.blank(uri)
        req.method = 'GET'
        req.headers['Content-Type'] = 'application/json'
        self.assertEqual(json.loads(res.body), expected)

    def test_quotas_show_as_admin(self):
        req = webob.Request.blank('/v1.1/1234/os-quota-sets/1234')
        req.method = 'GET'
        req.headers['Content-Type'] = 'application/json'
        res = req.get_response(fakes.wsgi_app(
                             'metadata_items': 128, 'injected_files': 5,
                             'injected_file_content_bytes': 10240}}

        req = webob.Request.blank('/v1.1/1234/os-quota-sets/update_me')
        req.method = 'PUT'
        req.body = json.dumps(updated_quota_set)
        req.headers['Content-Type'] = 'application/json'
                             'metadata_items': 128, 'injected_files': 5,
                             'injected_file_content_bytes': 10240}}

        req = webob.Request.blank('/v1.1/1234/os-quota-sets/update_me')
        req.method = 'PUT'
        req.body = json.dumps(updated_quota_set)
        req.headers['Content-Type'] = 'application/json'

    def test_rescue(self):
        body = dict(rescue=None)
        req = webob.Request.blank('/v1.1/123/servers/test_inst/action')
        req.method = "POST"
        req.body = json.dumps(body)
        req.headers["content-type"] = "application/json"

    def test_unrescue(self):
        body = dict(unrescue=None)
        req = webob.Request.blank('/v1.1/123/servers/test_inst/action')
        req.method = "POST"
        req.body = json.dumps(body)
        req.headers["content-type"] = "application/json"


def _get_create_request_json(body_dict):
    req = webob.Request.blank('/v1.1/123/os-security-groups')
    req.headers['Content-Type'] = 'application/json'
    req.method = 'POST'
    req.body = json.dumps(body_dict)
        return ''.join(body_parts)

    def _get_create_request_xml(self, body_dict):
        req = webob.Request.blank('/v1.1/123/os-security-groups')
        req.headers['Content-Type'] = 'application/xml'
        req.content_type = 'application/xml'
        req.accept = 'application/xml'
        return response

    def _delete_security_group(self, id):
        request = webob.Request.blank('/v1.1/123/os-security-groups/%s'
                                      % id)
        request.method = 'DELETE'
        response = request.get_response(fakes.wsgi_app())
        security_group['description'] = "group-description"
        response = _create_security_group_json(security_group)

        req = webob.Request.blank('/v1.1/123/os-security-groups')
        req.headers['Content-Type'] = 'application/json'
        req.method = 'GET'
        response = req.get_response(fakes.wsgi_app())
        expected = {'security_groups': [
                    {'id': 1,
                            'name':"default",
                            'tenant_id': "123",
                            "description":"default",
                            "rules": []
                       },
                    {
                        'id': 2,
                        'name': "test",
                        'tenant_id': "123",
                        "description": "group-description",
                        "rules": []
                    }
        response = _create_security_group_json(security_group)

        res_dict = json.loads(response.body)
        req = webob.Request.blank('/v1.1/123/os-security-groups/%s' %
                                  res_dict['security_group']['id'])
        req.headers['Content-Type'] = 'application/json'
        req.method = 'GET'
                      'security_group': {
                          'id': 2,
                          'name': "test",
                          'tenant_id': "123",
                          'description': "group-description",
                          'rules': []
                       }
        self.assertEquals(res_dict, expected)

    def test_get_security_group_by_invalid_id(self):
        req = webob.Request.blank('/v1.1/123/os-security-groups/invalid')
        req.headers['Content-Type'] = 'application/json'
        req.method = 'GET'
        response = req.get_response(fakes.wsgi_app())
        self.assertEquals(response.status_int, 400)

    def test_get_security_group_by_non_existing_id(self):
        req = webob.Request.blank('/v1.1/123/os-security-groups/111111111')
        req.headers['Content-Type'] = 'application/json'
        req.method = 'GET'
        response = req.get_response(fakes.wsgi_app())

    def test_associate_by_non_existing_security_group_name(self):
        body = dict(addSecurityGroup=dict(name='non-existing'))
        req = webob.Request.blank('/v1.1/123/servers/1/action')
        req.headers['Content-Type'] = 'application/json'
        req.method = 'POST'
        req.body = json.dumps(body)
        body = dict(addSecurityGroup=dict(name='test'))
        self.stubs.Set(nova.db.api, 'security_group_get_by_name',
                       return_security_group)
        req = webob.Request.blank('/v1.1/123/servers/invalid/action')
        req.headers['Content-Type'] = 'application/json'
        req.method = 'POST'
        req.body = json.dumps(body)
        self.assertEquals(response.status_int, 400)

    def test_associate_without_body(self):
        req = webob.Request.blank('/v1.1/123/servers/1/action')
        body = dict(addSecurityGroup=None)
        self.stubs.Set(nova.db.api, 'instance_get', return_server)
        req.headers['Content-Type'] = 'application/json'
        self.assertEquals(response.status_int, 400)

    def test_associate_no_security_group_name(self):
        req = webob.Request.blank('/v1.1/123/servers/1/action')
        body = dict(addSecurityGroup=dict())
        self.stubs.Set(nova.db.api, 'instance_get', return_server)
        req.headers['Content-Type'] = 'application/json'
        self.assertEquals(response.status_int, 400)

    def test_associate_security_group_name_with_whitespaces(self):
        req = webob.Request.blank('/v1.1/123/servers/1/action')
        body = dict(addSecurityGroup=dict(name="   "))
        self.stubs.Set(nova.db.api, 'instance_get', return_server)
        req.headers['Content-Type'] = 'application/json'
        body = dict(addSecurityGroup=dict(name="test"))
        self.stubs.Set(nova.db.api, 'security_group_get_by_name',
                       return_security_group)
        req = webob.Request.blank('/v1.1/123/servers/10000/action')
        req.headers['Content-Type'] = 'application/json'
        req.method = 'POST'
        req.body = json.dumps(body)
        self.stubs.Set(nova.db.api, 'security_group_get_by_name',
                       return_security_group_without_instances)
        body = dict(addSecurityGroup=dict(name="test"))
        req = webob.Request.blank('/v1.1/123/servers/1/action')
        req.headers['Content-Type'] = 'application/json'
        req.method = 'POST'
        req.body = json.dumps(body)
        self.stubs.Set(nova.db.api, 'security_group_get_by_name',
                       return_security_group)
        body = dict(addSecurityGroup=dict(name="test"))
        req = webob.Request.blank('/v1.1/123/servers/1/action')
        req.headers['Content-Type'] = 'application/json'
        req.method = 'POST'
        req.body = json.dumps(body)
        self.mox.ReplayAll()

        body = dict(addSecurityGroup=dict(name="test"))
        req = webob.Request.blank('/v1.1/123/servers/1/action')
        req.headers['Content-Type'] = 'application/json'
        req.method = 'POST'
        req.body = json.dumps(body)
                       return_security_group_without_instances)
        self.mox.ReplayAll()

        req = webob.Request.blank('/v1.1/123/servers/1/action')
        req.headers['Content-Type'] = 'application/xml'
        req.method = 'POST'
        req.body = """<addSecurityGroup>

    def test_disassociate_by_non_existing_security_group_name(self):
        body = dict(removeSecurityGroup=dict(name='non-existing'))
        req = webob.Request.blank('/v1.1/123/servers/1/action')
        req.headers['Content-Type'] = 'application/json'
        req.method = 'POST'
        req.body = json.dumps(body)
        body = dict(removeSecurityGroup=dict(name='test'))
        self.stubs.Set(nova.db.api, 'security_group_get_by_name',
                       return_security_group)
        req = webob.Request.blank('/v1.1/123/servers/invalid/action')
        req.headers['Content-Type'] = 'application/json'
        req.method = 'POST'
        req.body = json.dumps(body)
        self.assertEquals(response.status_int, 400)

    def test_disassociate_without_body(self):
        req = webob.Request.blank('/v1.1/123/servers/1/action')
        body = dict(removeSecurityGroup=None)
        self.stubs.Set(nova.db.api, 'instance_get', return_server)
        req.headers['Content-Type'] = 'application/json'
        self.assertEquals(response.status_int, 400)

    def test_disassociate_no_security_group_name(self):
        req = webob.Request.blank('/v1.1/123/servers/1/action')
        body = dict(removeSecurityGroup=dict())
        self.stubs.Set(nova.db.api, 'instance_get', return_server)
        req.headers['Content-Type'] = 'application/json'
        self.assertEquals(response.status_int, 400)

    def test_disassociate_security_group_name_with_whitespaces(self):
        req = webob.Request.blank('/v1.1/123/servers/1/action')
        body = dict(removeSecurityGroup=dict(name="   "))
        self.stubs.Set(nova.db.api, 'instance_get', return_server)
        req.headers['Content-Type'] = 'application/json'
        body = dict(removeSecurityGroup=dict(name="test"))
        self.stubs.Set(nova.db.api, 'security_group_get_by_name',
                       return_security_group)
        req = webob.Request.blank('/v1.1/123/servers/10000/action')
        req.headers['Content-Type'] = 'application/json'
        req.method = 'POST'
        req.body = json.dumps(body)
        self.stubs.Set(nova.db.api, 'security_group_get_by_name',
                       return_security_group)
        body = dict(removeSecurityGroup=dict(name="test"))
        req = webob.Request.blank('/v1.1/123/servers/1/action')
        req.headers['Content-Type'] = 'application/json'
        req.method = 'POST'
        req.body = json.dumps(body)
        self.stubs.Set(nova.db.api, 'security_group_get_by_name',
                       return_security_group_without_instances)
        body = dict(removeSecurityGroup=dict(name="test"))
        req = webob.Request.blank('/v1.1/123/servers/1/action')
        req.headers['Content-Type'] = 'application/json'
        req.method = 'POST'
        req.body = json.dumps(body)
        self.mox.ReplayAll()

        body = dict(removeSecurityGroup=dict(name="test"))
        req = webob.Request.blank('/v1.1/123/servers/1/action')
        req.headers['Content-Type'] = 'application/json'
        req.method = 'POST'
        req.body = json.dumps(body)
                       return_security_group)
        self.mox.ReplayAll()

        req = webob.Request.blank('/v1.1/123/servers/1/action')
        req.headers['Content-Type'] = 'application/xml'
        req.method = 'POST'
        req.body = """<removeSecurityGroup>
        super(TestSecurityGroupRules, self).tearDown()

    def _create_security_group_rule_json(self, rules):
        request = webob.Request.blank('/v1.1/123/os-security-group-rules')
        request.headers['Content-Type'] = 'application/json'
        request.method = 'POST'
        request.body = json.dumps(rules)
        return response

    def _delete_security_group_rule(self, id):
        request = webob.Request.blank('/v1.1/123/os-security-group-rules/%s'
                                      % id)
        request.method = 'DELETE'
        response = request.get_response(fakes.wsgi_app())
        self.assertEquals(response.status_int, 400)

    def test_create_with_no_body_json(self):
        request = webob.Request.blank('/v1.1/123/os-security-group-rules')
        request.headers['Content-Type'] = 'application/json'
        request.method = 'POST'
        request.body = json.dumps(None)
        self.assertEquals(response.status_int, 422)

    def test_create_with_no_security_group_rule_in_body_json(self):
        request = webob.Request.blank('/v1.1/123/os-security-group-rules')
        request.headers['Content-Type'] = 'application/json'
        request.method = 'POST'
        body_dict = {'test': "test"}

    def test_verify_index(self):
        req = webob.Request.blank(
                    '/v1.1/123/os-simple-tenant-usage?start=%s&end=%s' %
                    (START.isoformat(), STOP.isoformat()))
        req.method = "GET"
        req.headers["content-type"] = "application/json"


    def test_verify_detailed_index(self):
        req = webob.Request.blank(
                    '/v1.1/123/os-simple-tenant-usage?'
                    'detailed=1&start=%s&end=%s' %
                    (START.isoformat(), STOP.isoformat()))
        req.method = "GET"

    def test_verify_index_fails_for_nonadmin(self):
        req = webob.Request.blank(
                    '/v1.1/123/os-simple-tenant-usage?'
                    'detailed=1&start=%s&end=%s' %
                    (START.isoformat(), STOP.isoformat()))
        req.method = "GET"
        req.headers["content-type"] = "application/json"

        res = req.get_response(fakes.wsgi_app())
        self.assertEqual(res.status_int, 403)

    def test_verify_show(self):
        super(ServerVirtualInterfaceTest, self).tearDown()

    def test_get_virtual_interfaces_list(self):
        req = webob.Request.blank('/v1.1/123/servers/1/os-virtual-interfaces')
        res = req.get_response(fakes.wsgi_app())
        self.assertEqual(res.status_int, 200)
        res_dict = json.loads(res.body)
        vsa = {"displayName": "VSA Test Name",
               "displayDescription": "VSA Test Desc"}
        body = dict(vsa=vsa)
        req = webob.Request.blank('/v1.1/777/zadr-vsa')
        req.method = 'POST'
        req.body = json.dumps(body)
        req.headers['content-type'] = 'application/json'
                         vsa['displayDescription'])

    def test_vsa_create_no_body(self):
        req = webob.Request.blank('/v1.1/777/zadr-vsa')
        req.method = 'POST'
        req.body = json.dumps({})
        req.headers['content-type'] = 'application/json'
        last_param = {}

        vsa_id = 123
        req = webob.Request.blank('/v1.1/777/zadr-vsa/%d' % vsa_id)
        req.method = 'DELETE'

        resp = req.get_response(fakes.wsgi_app())
        last_param = {}

        vsa_id = 234
        req = webob.Request.blank('/v1.1/777/zadr-vsa/%d' % vsa_id)
        req.method = 'DELETE'

        resp = req.get_response(fakes.wsgi_app())
        last_param = {}

        vsa_id = 123
        req = webob.Request.blank('/v1.1/777/zadr-vsa/%d' % vsa_id)
        req.method = 'GET'
        resp = req.get_response(fakes.wsgi_app())
        self.assertEqual(resp.status_int, 200)
        last_param = {}

        vsa_id = 234
        req = webob.Request.blank('/v1.1/777/zadr-vsa/%d' % vsa_id)
        req.method = 'GET'
        resp = req.get_response(fakes.wsgi_app())
        self.assertEqual(resp.status_int, 404)
        self.assertEqual(str(last_param['vsa_id']), str(vsa_id))

    def test_vsa_index(self):
        req = webob.Request.blank('/v1.1/777/zadr-vsa')
        req.method = 'GET'
        resp = req.get_response(fakes.wsgi_app())
        self.assertEqual(resp.status_int, 200)
        self.assertEqual(resp_vsa['id'], 123)

    def test_vsa_detail(self):
        req = webob.Request.blank('/v1.1/777/zadr-vsa/detail')
        req.method = 'GET'
        resp = req.get_response(fakes.wsgi_app())
        self.assertEqual(resp.status_int, 200)
               "displayName": "VSA Volume Test Name",
               "displayDescription": "VSA Volume Test Desc"}
        body = {self.test_obj: vol}
        req = webob.Request.blank('/v1.1/777/zadr-vsa/123/%s' % self.test_objs)
        req.method = 'POST'
        req.body = json.dumps(body)
        req.headers['content-type'] = 'application/json'
            self.assertEqual(resp.status_int, 400)

    def test_vsa_volume_create_no_body(self):
        req = webob.Request.blank('/v1.1/777/zadr-vsa/123/%s' % self.test_objs)
        req.method = 'POST'
        req.body = json.dumps({})
        req.headers['content-type'] = 'application/json'
            self.assertEqual(resp.status_int, 400)

    def test_vsa_volume_index(self):
        req = webob.Request.blank('/v1.1/777/zadr-vsa/123/%s' % self.test_objs)
        resp = req.get_response(fakes.wsgi_app())
        self.assertEqual(resp.status_int, 200)

    def test_vsa_volume_detail(self):
        req = webob.Request.blank('/v1.1/777/zadr-vsa/123/%s/detail' % \
                self.test_objs)
        resp = req.get_response(fakes.wsgi_app())
        self.assertEqual(resp.status_int, 200)

    def test_vsa_volume_show(self):
        obj_num = 234 if self.test_objs == "volumes" else 345
        req = webob.Request.blank('/v1.1/777/zadr-vsa/123/%s/%s' % \
                (self.test_objs, obj_num))
        resp = req.get_response(fakes.wsgi_app())
        self.assertEqual(resp.status_int, 200)

    def test_vsa_volume_show_no_vsa_assignment(self):
        req = webob.Request.blank('/v1.1/777/zadr-vsa/4/%s/333' % \
                (self.test_objs))
        resp = req.get_response(fakes.wsgi_app())
        self.assertEqual(resp.status_int, 400)
    def test_vsa_volume_show_no_volume(self):
        self.stubs.Set(volume.api.API, "get", stub_volume_get_notfound)

        req = webob.Request.blank('/v1.1/777/zadr-vsa/123/%s/333' % \
                (self.test_objs))
        resp = req.get_response(fakes.wsgi_app())
        self.assertEqual(resp.status_int, 404)
        update = {"status": "available",
                  "displayName": "Test Display name"}
        body = {self.test_obj: update}
        req = webob.Request.blank('/v1.1/777/zadr-vsa/123/%s/%s' % \
                (self.test_objs, obj_num))
        req.method = 'PUT'
        req.body = json.dumps(body)

    def test_vsa_volume_delete(self):
        obj_num = 234 if self.test_objs == "volumes" else 345
        req = webob.Request.blank('/v1.1/777/zadr-vsa/123/%s/%s' % \
                (self.test_objs, obj_num))
        req.method = 'DELETE'
        resp = req.get_response(fakes.wsgi_app())
            self.assertEqual(resp.status_int, 400)

    def test_vsa_volume_delete_no_vsa_assignment(self):
        req = webob.Request.blank('/v1.1/777/zadr-vsa/4/%s/333' % \
                (self.test_objs))
        req.method = 'DELETE'
        resp = req.get_response(fakes.wsgi_app())
    def test_vsa_volume_delete_no_volume(self):
        self.stubs.Set(volume.api.API, "get", stub_volume_get_notfound)

        req = webob.Request.blank('/v1.1/777/zadr-vsa/123/%s/333' % \
                (self.test_objs))
        req.method = 'DELETE'
        resp = req.get_response(fakes.wsgi_app())
    def test_list_extensions_json(self):
        app = openstack.APIRouterV11()
        ext_midware = extensions.ExtensionMiddleware(app)
        request = webob.Request.blank("/123/extensions")
        response = request.get_response(ext_midware)
        self.assertEqual(200, response.status_int)

    def test_get_extension_json(self):
        app = openstack.APIRouterV11()
        ext_midware = extensions.ExtensionMiddleware(app)
        request = webob.Request.blank("/123/extensions/FOXNSOX")
        response = request.get_response(ext_midware)
        self.assertEqual(200, response.status_int)

    def test_get_non_existing_extension_json(self):
        app = openstack.APIRouterV11()
        ext_midware = extensions.ExtensionMiddleware(app)
        request = webob.Request.blank("/123/extensions/4")
        response = request.get_response(ext_midware)
        self.assertEqual(404, response.status_int)

    def test_list_extensions_xml(self):
        app = openstack.APIRouterV11()
        ext_midware = extensions.ExtensionMiddleware(app)
        request = webob.Request.blank("/123/extensions")
        request.accept = "application/xml"
        response = request.get_response(ext_midware)
        self.assertEqual(200, response.status_int)
    def test_get_extension_xml(self):
        app = openstack.APIRouterV11()
        ext_midware = extensions.ExtensionMiddleware(app)
        request = webob.Request.blank("/123/extensions/FOXNSOX")
        request.accept = "application/xml"
        response = request.get_response(ext_midware)
        self.assertEqual(200, response.status_int)
        manager = StubExtensionManager(res_ext)
        app = openstack.APIRouterV11()
        ext_midware = extensions.ExtensionMiddleware(app, manager)
        request = webob.Request.blank("/123/tweedles")
        response = request.get_response(ext_midware)
        self.assertEqual(200, response.status_int)
        self.assertEqual(response_body, response.body)
        manager = StubExtensionManager(res_ext)
        app = openstack.APIRouterV11()
        ext_midware = extensions.ExtensionMiddleware(app, manager)
        request = webob.Request.blank("/123/tweedles")
        response = request.get_response(ext_midware)
        self.assertEqual(200, response.status_int)
        self.assertEqual(response_body, response.body)
    def test_get_resources(self):
        app = openstack.APIRouterV11()
        ext_midware = extensions.ExtensionMiddleware(app)
        request = webob.Request.blank("/123/foxnsocks")
        response = request.get_response(ext_midware)
        self.assertEqual(200, response.status_int)
        self.assertEqual(response_body, response.body)

    def test_extended_action(self):
        body = dict(add_tweedle=dict(name="test"))
        url = "/123/servers/1/action"
        response = self._send_server_action_request(url, body)
        self.assertEqual(200, response.status_int)
        self.assertEqual("Tweedle Beetle Added.", response.body)

    def test_invalid_action_body(self):
        body = dict(blah=dict(name="test"))  # Doesn't exist
        url = "/123/servers/1/action"
        response = self._send_server_action_request(url, body)
        self.assertEqual(400, response.status_int)

    def test_invalid_action(self):
        body = dict(blah=dict(name="test"))
        url = "/123/fdsa/1/action"
        response = self._send_server_action_request(url, body)
        self.assertEqual(404, response.status_int)

            return res

        req_ext = extensions.RequestExtension('GET',
                                                '/v1.1/123/flavors/:(id)',
                                                _req_handler)

        manager = StubExtensionManager(None, None, req_ext)
        app = fakes.wsgi_app()
        ext_midware = extensions.ExtensionMiddleware(app, manager)
        request = webob.Request.blank("/v1.1/123/flavors/1?chewing=bluegoo")
        request.environ['api.version'] = '1.1'
        response = request.get_response(ext_midware)
        self.assertEqual(200, response.status_int)

        app = fakes.wsgi_app()
        ext_midware = extensions.ExtensionMiddleware(app)
        request = webob.Request.blank("/v1.1/123/flavors/1?chewing=newblue")
        request.environ['api.version'] = '1.1'
        response = request.get_response(ext_midware)
        self.assertEqual(200, response.status_int)
    def test_index(self):
        self.stubs.Set(nova.db.api, 'instance_type_extra_specs_get',
                       return_flavor_extra_specs)
        request = webob.Request.blank('/v1.1/123/flavors/1/os-extra_specs')
        res = request.get_response(fakes.wsgi_app())
        self.assertEqual(200, res.status_int)
        res_dict = json.loads(res.body)
    def test_index_no_data(self):
        self.stubs.Set(nova.db.api, 'instance_type_extra_specs_get',
                       return_empty_flavor_extra_specs)
        req = webob.Request.blank('/v1.1/123/flavors/1/os-extra_specs')
        res = req.get_response(fakes.wsgi_app())
        res_dict = json.loads(res.body)
        self.assertEqual(200, res.status_int)
    def test_show(self):
        self.stubs.Set(nova.db.api, 'instance_type_extra_specs_get',
                       return_flavor_extra_specs)
        req = webob.Request.blank('/v1.1/123/flavors/1/os-extra_specs/key5')
        res = req.get_response(fakes.wsgi_app())
        self.assertEqual(200, res.status_int)
        res_dict = json.loads(res.body)
    def test_show_spec_not_found(self):
        self.stubs.Set(nova.db.api, 'instance_type_extra_specs_get',
                       return_empty_flavor_extra_specs)
        req = webob.Request.blank('/v1.1/123/flavors/1/os-extra_specs/key6')
        res = req.get_response(fakes.wsgi_app())
        res_dict = json.loads(res.body)
        self.assertEqual(404, res.status_int)
    def test_delete(self):
        self.stubs.Set(nova.db.api, 'instance_type_extra_specs_delete',
                       delete_flavor_extra_specs)
        req = webob.Request.blank('/v1.1/123/flavors/1/os-extra_specs/key5')
        req.method = 'DELETE'
        res = req.get_response(fakes.wsgi_app())
        self.assertEqual(200, res.status_int)
        self.stubs.Set(nova.db.api,
                       'instance_type_extra_specs_update_or_create',
                       return_create_flavor_extra_specs)
        req = webob.Request.blank('/v1.1/123/flavors/1/os-extra_specs')
        req.method = 'POST'
        req.body = '{"extra_specs": {"key1": "value1"}}'
        req.headers["content-type"] = "application/json"
        self.stubs.Set(nova.db.api,
                       'instance_type_extra_specs_update_or_create',
                       return_create_flavor_extra_specs)
        req = webob.Request.blank('/v1.1/123/flavors/1/os-extra_specs')
        req.method = 'POST'
        req.headers["content-type"] = "application/json"
        res = req.get_response(fakes.wsgi_app())
        self.stubs.Set(nova.db.api,
                       'instance_type_extra_specs_update_or_create',
                       return_create_flavor_extra_specs)
        req = webob.Request.blank('/v1.1/123/flavors/1/os-extra_specs/key1')
        req.method = 'PUT'
        req.body = '{"key1": "value1"}'
        req.headers["content-type"] = "application/json"
        self.stubs.Set(nova.db.api,
                       'instance_type_extra_specs_update_or_create',
                       return_create_flavor_extra_specs)
        req = webob.Request.blank('/v1.1/123/flavors/1/os-extra_specs/key1')
        req.method = 'PUT'
        req.headers["content-type"] = "application/json"
        res = req.get_response(fakes.wsgi_app())
        self.stubs.Set(nova.db.api,
                       'instance_type_extra_specs_update_or_create',
                       return_create_flavor_extra_specs)
        req = webob.Request.blank('/v1.1/123/flavors/1/os-extra_specs/key1')
        req.method = 'PUT'
        req.body = '{"key1": "value1", "key2": "value2"}'
        req.headers["content-type"] = "application/json"
        self.stubs.Set(nova.db.api,
                       'instance_type_extra_specs_update_or_create',
                       return_create_flavor_extra_specs)
        req = webob.Request.blank('/v1.1/123/flavors/1/os-extra_specs/bad')
        req.method = 'PUT'
        req.body = '{"key1": "value1"}'
        req.headers["content-type"] = "application/json"
        fakes.stub_out_glance(self.stubs, self.IMAGE_FIXTURES)

    def test_index(self):
        req = webob.Request.blank('/v1.1/123/images/1/metadata')
        res = req.get_response(fakes.wsgi_app())
        res_dict = json.loads(res.body)
        self.assertEqual(200, res.status_int)
                       fake_get_all)
        self.flags(allow_admin_api=True)

        req = webob.Request.blank('/v1.1/fake/servers?tenant_id=faketenant')
        # Use admin context
        context = nova.context.RequestContext('testuser', 'testproject',
                is_admin=True)
        self.stubs.Set(nova.compute.API, 'get_all', fake_get_all)

        query_str = "name=foo&ip=10.*&status=active&unknown_option=meow"
        req = webob.Request.blank('/v1.1/fake/servers?%s' % query_str)
        # Request admin context
        context = nova.context.RequestContext('testuser', 'testproject',
                is_admin=True)
        self.stubs.Set(nova.compute.API, 'get_all', fake_get_all)

        query_str = "name=foo&ip=10.*&status=active&unknown_option=meow"
        req = webob.Request.blank('/v1.1/fake/servers?%s' % query_str)
        # Request admin context
        context = nova.context.RequestContext('testuser', 'testproject',
                is_admin=False)
        self.stubs.Set(nova.compute.API, 'get_all', fake_get_all)

        query_str = "name=foo&ip=10.*&status=active&unknown_option=meow"
        req = webob.Request.blank('/v1.1/fake/servers?%s' % query_str)
        # Request admin context
        context = nova.context.RequestContext('testuser', 'testproject',
                is_admin=True)

        self.stubs.Set(nova.compute.API, 'get_all', fake_get_all)

        req = webob.Request.blank('/v1.1/fake/servers?ip=10\..*')
        # Request admin context
        context = nova.context.RequestContext('testuser', 'testproject',
                is_admin=True)

        self.stubs.Set(nova.compute.API, 'get_all', fake_get_all)

        req = webob.Request.blank('/v1.1/fake/servers?ip6=ffff.*')
        # Request admin context
        context = nova.context.RequestContext('testuser', 'testproject',
                is_admin=True)
            raise exception.InstanceSnapshotting
        self.stubs.Set(nova.compute.API, 'snapshot', snapshot)

        req = webob.Request.blank('/v1.1/fakes/servers/1/action')
        req.method = 'POST'
        req.body = json.dumps({
            "createImage": {
        self._setup_for_create_instance()

        # proper local hrefs must start with 'http://localhost/v1.1/'
        image_href = 'http://localhost/v1.1/123/images/2'
        flavor_ref = 'http://localhost/123/flavors/3'
        access_ipv4 = '1.2.3.4'
        access_ipv6 = 'fead::1234'
        expected_flavor = {
            "links": [
                {
                    "rel": "bookmark",
                    "href": 'http://localhost/123/flavors/3',
                },
            ],
        }
            "links": [
                {
                    "rel": "bookmark",
                    "href": 'http://localhost/123/images/2',
                },
            ],
        }
            },
        }

        req = webob.Request.blank('/v1.1/123/servers')
        req.method = 'POST'
        req.body = json.dumps(body)
        req.headers["content-type"] = "application/json"

        # proper local hrefs must start with 'http://localhost/v1.1/'
        image_href = 'http://localhost/v1.1/images/2'
        flavor_ref = 'http://localhost/123/flavors/3'
        expected_flavor = {
            "id": "3",
            "links": [
    def test_create_instance_v1_1_invalid_flavor_id_int(self):
        self._setup_for_create_instance()

        image_href = 'http://localhost/v1.1/123/images/2'
        flavor_ref = -1
        body = dict(server=dict(
            name='server_test', imageRef=image_href, flavorRef=flavor_ref,
            metadata={'hello': 'world', 'open': 'stack'},
            personality={}))
        req = webob.Request.blank('/v1.1/123/servers')
        req.method = 'POST'
        req.body = json.dumps(body)
        req.headers["content-type"] = "application/json"
        self.config_drive = True
        self._setup_for_create_instance()

        image_href = 'http://localhost/v1.1/123/images/2'
        flavor_ref = 'http://localhost/v1.1/123/flavors/3'
        body = {
            'server': {
                'name': 'config_drive_test',
            },
        }

        req = webob.Request.blank('/v1.1/123/servers')
        req.method = 'POST'
        req.body = json.dumps(body)
        req.headers["content-type"] = "application/json"
        self.config_drive = 2
        self._setup_for_create_instance()

        image_href = 'http://localhost/v1.1/123/images/2'
        flavor_ref = 'http://localhost/v1.1/123/flavors/3'
        body = {
            'server': {
                'name': 'config_drive_test',
            },
        }

        req = webob.Request.blank('/v1.1/123/servers')
        req.method = 'POST'
        req.body = json.dumps(body)
        req.headers["content-type"] = "application/json"
        self.config_drive = "asdf"
        self._setup_for_create_instance()

        image_href = 'http://localhost/v1.1/123/images/2'
        flavor_ref = 'http://localhost/v1.1/123/flavors/3'
        body = {
            'server': {
                'name': 'config_drive_test',
            },
        }

        req = webob.Request.blank('/v1.1/123/servers')
        req.method = 'POST'
        req.body = json.dumps(body)
        req.headers["content-type"] = "application/json"
    def test_create_instance_without_config_drive_v1_1(self):
        self._setup_for_create_instance()

        image_href = 'http://localhost/v1.1/123/images/2'
        flavor_ref = 'http://localhost/v1.1/123/flavors/3'
        body = {
            'server': {
                'name': 'config_drive_test',
            },
        }

        req = webob.Request.blank('/v1.1/123/servers')
        req.method = 'POST'
        req.body = json.dumps(body)
        req.headers["content-type"] = "application/json"
                return_server_with_attributes(name='server_test',
                                              access_ipv4='0.0.0.0',
                                              access_ipv6='beef::0123'))
        req = webob.Request.blank('/v1.1/123/servers/1')
        req.method = 'PUT'
        req.content_type = 'application/json'
        body = {'server': {
    def test_update_server_access_ipv4_v1_1(self):
        self.stubs.Set(nova.db.api, 'instance_get',
                return_server_with_attributes(access_ipv4='0.0.0.0'))
        req = webob.Request.blank('/v1.1/123/servers/1')
        req.method = 'PUT'
        req.content_type = 'application/json'
        req.body = json.dumps({'server': {'accessIPv4': '0.0.0.0'}})
    def test_update_server_access_ipv6_v1_1(self):
        self.stubs.Set(nova.db.api, 'instance_get',
                return_server_with_attributes(access_ipv6='beef::0123'))
        req = webob.Request.blank('/v1.1/123/servers/1')
        req.method = 'PUT'
        req.content_type = 'application/json'
        req.body = json.dumps({'server': {'accessIPv6': 'beef::0123'}})
    def test_volume_types_index(self):
        self.stubs.Set(volume_types, 'get_all_types',
                       return_volume_types_get_all_types)
        req = webob.Request.blank('/v1.1/123/os-volume-types')
        res = req.get_response(fakes.wsgi_app())
        self.assertEqual(200, res.status_int)
        res_dict = json.loads(res.body)
    def test_volume_types_index_no_data(self):
        self.stubs.Set(volume_types, 'get_all_types',
                       return_empty_volume_types_get_all_types)
        req = webob.Request.blank('/v1.1/123/os-volume-types')
        res = req.get_response(fakes.wsgi_app())
        res_dict = json.loads(res.body)
        self.assertEqual(200, res.status_int)
    def test_volume_types_show(self):
        self.stubs.Set(volume_types, 'get_volume_type',
                       return_volume_types_get_volume_type)
        req = webob.Request.blank('/v1.1/123/os-volume-types/1')
        res = req.get_response(fakes.wsgi_app())
        self.assertEqual(200, res.status_int)
        res_dict = json.loads(res.body)
    def test_volume_types_show_not_found(self):
        self.stubs.Set(volume_types, 'get_volume_type',
                       return_volume_types_get_volume_type)
        req = webob.Request.blank('/v1.1/123/os-volume-types/777')
        res = req.get_response(fakes.wsgi_app())
        self.assertEqual(404, res.status_int)

                       return_volume_types_get_volume_type)
        self.stubs.Set(volume_types, 'destroy',
                       return_volume_types_destroy)
        req = webob.Request.blank('/v1.1/123/os-volume-types/1')
        req.method = 'DELETE'
        res = req.get_response(fakes.wsgi_app())
        self.assertEqual(200, res.status_int)
                       return_volume_types_get_volume_type)
        self.stubs.Set(volume_types, 'destroy',
                       return_volume_types_destroy)
        req = webob.Request.blank('/v1.1/123/os-volume-types/777')
        req.method = 'DELETE'
        res = req.get_response(fakes.wsgi_app())
        self.assertEqual(404, res.status_int)
                       return_volume_types_create)
        self.stubs.Set(volume_types, 'get_volume_type_by_name',
                       return_volume_types_get_by_name)
        req = webob.Request.blank('/v1.1/123/os-volume-types')
        req.method = 'POST'
        req.body = '{"volume_type": {"name": "vol_type_1", '\
                                    '"extra_specs": {"key1": "value1"}}}'
                       return_volume_types_create)
        self.stubs.Set(volume_types, 'get_volume_type_by_name',
                       return_volume_types_get_by_name)
        req = webob.Request.blank('/v1.1/123/os-volume-types')
        req.method = 'POST'
        req.headers["content-type"] = "application/json"
        res = req.get_response(fakes.wsgi_app())
    def setUp(self):
        super(VolumeTypesExtraSpecsTest, self).setUp()
        fakes.stub_out_key_pair_funcs(self.stubs)
        self.api_path = '/v1.1/123/os-volume-types/1/extra_specs'

    def test_index(self):
        self.stubs.Set(nova.db.api, 'volume_type_extra_specs_get',
