commit 87b4deb2b2dae9013e6aa0fe490d6a5a04a27894
Author: jim-p <jimp@pfsense.org>
Date:   Mon Oct 10 17:16:08 2011 -0400

    Specify full path to openssl.cnf, and select the relevant section to use when generating certificates.

diff --git a/etc/inc/certs.inc b/etc/inc/certs.inc
index 60ce951..104a9fe 100644
--- a/etc/inc/certs.inc
+++ b/etc/inc/certs.inc
@@ -30,6 +30,8 @@
 		pfSense_MODULE:	certificate_managaer
 */
 
+define("OPEN_SSL_CONF_PATH", "/etc/ssl/openssl.cnf");
+
 require_once("functions.inc");
 
 function & lookup_ca($refid) {
@@ -160,75 +162,77 @@ function ca_import(& $ca, $str, $key="", $serial=0) {
 function ca_create(& $ca, $keylen, $lifetime, $dn) {
 
 	$args = array(
+		"x509_extensions" => "v3_ca",
 		"digest_alg" => "sha1",
 		"private_key_bits" => (int)$keylen,
 		"private_key_type" => OPENSSL_KEYTYPE_RSA,
 		"encrypt_key" => false);
 
 	// generate a new key pair
 	$res_key = openssl_pkey_new($args);
 	if (!$res_key) return false;
 
 	// generate a certificate signing request
 	$res_csr = openssl_csr_new($dn, $res_key, $args);
 	if (!$res_csr) return false;
 
 	// self sign the certificate
 	$res_crt = openssl_csr_sign($res_csr, null, $res_key, $lifetime, $args);
 	if (!$res_crt) return false;
 
 	// export our certificate data
 	if (!openssl_pkey_export($res_key, $str_key) ||
 	    !openssl_x509_export($res_crt, $str_crt))
 		return false;
 
 	// return our ca information
 	$ca['crt'] = base64_encode($str_crt);
 	$ca['prv'] = base64_encode($str_key);
 	$ca['serial'] = 0;
 
 	return true;
 }
 
 function ca_inter_create(& $ca, $keylen, $lifetime, $dn, $caref) {
 	// Create Intermediate Certificate Authority
 	$signing_ca =& lookup_ca($caref);
 	if (!$signing_ca)
 		return false;
 
 	$signing_ca_res_crt = openssl_x509_read(base64_decode($signing_ca['crt']));
 	$signing_ca_res_key = openssl_pkey_get_private(array(0 => base64_decode($signing_ca['prv']) , 1 => ""));
 	if (!$signing_ca_res_crt || !$signing_ca_res_key) return false;
 	$signing_ca_serial = ++$signing_ca['serial'];
 
 	$args = array(
+		"x509_extensions" => "v3_ca",
 		"digest_alg" => "sha1",
 		"private_key_bits" => (int)$keylen,
 		"private_key_type" => OPENSSL_KEYTYPE_RSA,
 		"encrypt_key" => false);
 
 	// generate a new key pair
 	$res_key = openssl_pkey_new($args);
 	if (!$res_key) return false;
 
 	// generate a certificate signing request
 	$res_csr = openssl_csr_new($dn, $res_key, $args);
 	if (!$res_csr) return false;
 
 	// Sign the certificate
 	$res_crt = openssl_csr_sign($res_csr, $signing_ca_res_crt, $signing_ca_res_key, $lifetime, $args, $signing_ca_serial);
 	if (!$res_crt) return false;
 
 	// export our certificate data
 	if (!openssl_pkey_export($res_key, $str_key) ||
 	    !openssl_x509_export($res_crt, $str_crt))
 		return false;
 
 	// return our ca information
 	$ca['crt'] = base64_encode($str_crt);
 	$ca['prv'] = base64_encode($str_key);
 	$ca['serial'] = 0;
 
 	return true;
 }
 
@@ -252,73 +256,75 @@ function cert_import(& $cert, $crt_str, $key_str) {
 function cert_create(& $cert, $caref, $keylen, $lifetime, $dn) {
 
 	$ca =& lookup_ca($caref);
 	if (!$ca)
 		return false;
 
 	$ca_str_crt = base64_decode($ca['crt']);
 	$ca_str_key = base64_decode($ca['prv']);
 	$ca_res_crt = openssl_x509_read($ca_str_crt);
 	$ca_res_key = openssl_pkey_get_private(array(0 => $ca_str_key, 1 => ""));
 	if(!$ca_res_key) return false;
 	$ca_serial = ++$ca['serial'];
 
 	$args = array(
+		"x509_extensions" => "usr_cert",
 		"digest_alg" => "sha1",
 		"private_key_bits" => (int)$keylen,
 		"private_key_type" => OPENSSL_KEYTYPE_RSA,
 		"encrypt_key" => false);
 
 	// generate a new key pair
 	$res_key = openssl_pkey_new($args);
 	if(!$res_key) return false;
 
 	// generate a certificate signing request
 	$res_csr = openssl_csr_new($dn, $res_key, $args);
 	if(!$res_csr) return false;
 
 	// self sign the certificate
 	$res_crt = openssl_csr_sign($res_csr, $ca_res_crt, $ca_res_key, $lifetime,
 				 $args, $ca_serial);
 	if(!$res_crt) return false;
 
 	// export our certificate data
 	if (!openssl_pkey_export($res_key, $str_key) ||
 	    !openssl_x509_export($res_crt, $str_crt))
 		return false;
 
 	// return our certificate information
 	$cert['caref'] = $caref;
 	$cert['crt'] = base64_encode($str_crt);
 	$cert['prv'] = base64_encode($str_key);
 
 	return true;
 }
 
 function csr_generate(& $cert, $keylen, $dn) {
 
 	$args = array(
+		"x509_extensions" => "v3_req",
 		"digest_alg" => "sha1",
 		"private_key_bits" => (int)$keylen,
 		"private_key_type" => OPENSSL_KEYTYPE_RSA,
 		"encrypt_key" => false);
 
 	// generate a new key pair
 	$res_key = openssl_pkey_new($args);
 	if(!$res_key) return false;
 
 	// generate a certificate signing request
 	$res_csr = openssl_csr_new($dn, $res_key, $args);
 	if(!$res_csr) return false;
 
 	// export our request data
 	if (!openssl_pkey_export($res_key, $str_key) ||
 	    !openssl_csr_export($res_csr, $str_csr))
 		return false;
 
 	// return our request information
 	$cert['csr'] = base64_encode($str_csr);
 	$cert['prv'] = base64_encode($str_key);
 
 	return true;
 }
 
