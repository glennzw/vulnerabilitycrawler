   x86-64, compat: Retruncate rax after ia32 syscall entry tracing
   
   In commit d4d6715, we reopened an old hole for a 64-bit ptracer touching a
   32-bit tracee in system call entry.  A %rax value set via ptrace at the
   entry tracing stop gets used whole as a 32-bit syscall number, while we
   only check the low 32 bits for validity.
   
   Fix it by truncating %rax back to 32 bits after syscall_trace_enter,
   in addition to testing the full 64 bits as has already been added.
   
   Reported-by: Ben Hawkes <hawkes@sota.gen.nz>
   Signed-off-by: Roland McGrath <roland@redhat.com>
   Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
	/*
	 * Reload arg registers from stack in case ptrace changed them.
	 * We don't reload %eax because syscall_trace_enter() returned
	 * the value it wants us to use in the table lookup.
	 */
	.macro LOAD_ARGS32 offset, _r9=0
	.if \_r9
	movl \offset+48(%rsp),%edx
	movl \offset+56(%rsp),%esi
	movl \offset+64(%rsp),%edi
	.endm
	
	.macro CFI_STARTPROC32 simple
