commit df75e0797a6540c4d656969a2e7df7689603b2cf
Author: Frederik Heyninck <frederikheyninck@gmail.com>
Date:   Mon Feb 13 20:23:02 2012 +0100

    This should fix the backend XSS.

diff --git a/backend/core/engine/base.php b/backend/core/engine/base.php
index 6089735..0d3b216 100644
--- a/backend/core/engine/base.php
+++ b/backend/core/engine/base.php
@@ -1,280 +1,281 @@
 <?php
 
 /*
  * This file is part of Fork CMS.
  *
  * For the full copyright and license information, please view the license
  * file that was distributed with this source code.
  */
 
 /**
  * This class implements a lot of functionality that can be extended by a specific action
  *
  * @author Tijs Verkoyen <tijs@sumocoders.be>
+ * @author Frederik Heyninck <frederik@figure8.be>
  */
 class BackendBaseAction
 {
 	/**
 	 * The current action
 	 *
 	 * @var	string
 	 */
 	protected $action;
 
 	/**
 	 * The parameters (urldecoded)
 	 *
 	 * @var	array
 	 */
 	protected $parameters = array();
 
 	/**
 	 * The header object
 	 *
 	 * @var	BackendHeader
 	 */
 	protected $header;
 
 	/**
 	 * The current module
 	 *
 	 * @var	string
 	 */
 	protected $module;
 
 	/**
 	 * A reference to the current template
 	 *
 	 * @var	BackendTemplate
 	 */
 	public $tpl;
 
 	/**
 	 * A reference to the URL-instance
 	 *
 	 * @var	BackendURL
 	 */
 	public $URL;
 
 	/**
 	 * The constructor will set some properties. It populates the parameter array with urldecoded
 	 * values for easy-use.
 	 */
 	public function __construct()
 	{
 		// get objects from the reference so they are accessable from the action-object
 		$this->tpl = Spoon::get('template');
 		$this->URL = Spoon::get('url');
 		$this->header = Spoon::get('header');
 
 		// store the current module and action (we grab them from the URL)
 		$this->setModule($this->URL->getModule());
 		$this->setAction($this->URL->getAction());
 
 		// populate the parameter array, we loop GET and urldecode the values for usage later on
 		foreach((array) $_GET as $key => $value) $this->parameters[$key] = $value;
 	}
 
 	/**
 	 * Display, this wil output the template to the browser
 	 * If no template is specified we build the path form the current module and action
 	 *
 	 * @param string[optional] $template The template to use, if not provided it will be based on the action.
 	 */
 	public function display($template = null)
 	{
 		// parse header
 		$this->header->parse();
 
 		/*
 		 * If no template is specified, we have to build the path ourself. The default template is
 		 * based on the name of the current action
 		 */
 		if($template === null)
 		{
 			$template = BACKEND_MODULE_PATH . '/layout/templates/' . $this->URL->getAction() . '.tpl';
 		}
 
 		$this->tpl->display($template);
 	}
 
 	/**
 	 * Execute the action
 	 */
 	public function execute()
 	{
 		// if not in debug-mode we should include the minified versions
 		if(!SPOON_DEBUG && SpoonFile::exists(BACKEND_CORE_PATH . '/js/minified.js'))
 		{
 			// include the minified JS-file
 			$this->header->addJS('minified.js', 'core', false);
 		}
 
 		// in debug-mode or minified files don't exist
 		else
 		{
 			// add jquery, we will need this in every action, so add it globally
 			$this->header->addJS('jquery/jquery.js', 'core');
 			$this->header->addJS('jquery/jquery.ui.js', 'core');
 			$this->header->addJS('jquery/jquery.ui.dialog.patch.js', 'core');
 			$this->header->addJS('jquery/jquery.tools.js', 'core');
 			$this->header->addJS('jquery/jquery.backend.js', 'core');
 		}
 
 		// add items that always need to be loaded
 		$this->header->addJS('utils.js', 'core', true);
 		$this->header->addJS('backend.js', 'core', true);
 
 		// add module js
 		if(SpoonFile::exists(BACKEND_MODULE_PATH . '/js/' . $this->getModule() . '.js'))
 		{
 			$this->header->addJS($this->getModule() . '.js', null, true);
 		}
 
 		// add action js
 		if(SpoonFile::exists(BACKEND_MODULE_PATH . '/js/' . $this->getAction() . '.js'))
 		{
 			$this->header->addJS($this->getAction() . '.js', null, true);
 		}
 
 		// if not in debug-mode we should include the minified version
 		if(!SPOON_DEBUG && SpoonFile::exists(BACKEND_CORE_PATH . '/layout/css/minified.css'))
 		{
 			$this->header->addCSS('minified.css', 'core');
 		}
 
 		// debug-mode or minified file does not exist
 		else
 		{
 			$this->header->addCSS('reset.css', 'core');
 			$this->header->addCSS('jquery_ui/fork/jquery_ui.css', 'core');
 			$this->header->addCSS('debug.css', 'core');
 			$this->header->addCSS('screen.css', 'core');
 		}
 
 		// add module specific css
 		if(SpoonFile::exists(BACKEND_MODULE_PATH . '/layout/css/' . $this->getModule() . '.css'))
 		{
 			$this->header->addCSS($this->getModule() . '.css', null);
 		}
 
 		// store var so we don't have to call this function twice
 		$var = $this->getParameter('var', 'array');
 
 		// is there a report to show?
 		if($this->getParameter('report') !== null)
 		{
 			// show the report
 			$this->tpl->assign('report', true);
 
 			// camelcase the string
-			$messageName = SpoonFilter::toCamelCase($this->getParameter('report'), '-');
+			$messageName = SpoonFilter::toCamelCase(SpoonFilter::stripHTML($this->getParameter('report')), '-');
 
 			// if we have data to use it will be passed as the var parameter
 			if(!empty($var)) $this->tpl->assign('reportMessage', vsprintf(BL::msg($messageName), $var));
 			else $this->tpl->assign('reportMessage', BL::msg($messageName));
 
 			// highlight an element with the given id if needed
-			if($this->getParameter('highlight')) $this->tpl->assign('highlight', $this->getParameter('highlight'));
+			if($this->getParameter('highlight')) $this->tpl->assign('highlight', SpoonFilter::stripHTML($this->getParameter('highlight')));
 		}
 
 		// is there an error to show?
 		if($this->getParameter('error') !== null)
 		{
 			// camelcase the string
-			$errorName = SpoonFilter::toCamelCase($this->getParameter('error'), '-');
+			$errorName = SpoonFilter::toCamelCase(SpoonFilter::stripHTML($this->getParameter('error')), '-');
 
 			// if we have data to use it will be passed as the var parameter
 			if(!empty($var)) $this->tpl->assign('errorMessage', vsprintf(BL::err($errorName), $var));
 			else $this->tpl->assign('errorMessage', BL::err($errorName));
 		}
 	}
 
 	/**
 	 * Get the action
 	 *
 	 * @return string
 	 */
 	public function getAction()
 	{
 		return $this->action;
 	}
 
 	/**
 	 * Get the module
 	 *
 	 * @return string
 	 */
 	public function getModule()
 	{
 		return $this->module;
 	}
 
 	/**
 	 * Get a parameter for a given key
 	 * The function will return null if the key is not available
 	 * By default we will cast the return value into a string, if you want something else specify it by passing the wanted type.
 	 *
 	 * @param string $key The name of the parameter.
 	 * @param string[optional] $type The return-type, possible values are: bool, boolean, int, integer, float, double, string, array.
 	 * @param mixed[optional] $defaultValue The value that should be returned if the key is not available.
 	 * @return mixed
 	 */
 	public function getParameter($key, $type = 'string', $defaultValue = null)
 	{
 		$key = (string) $key;
 
 		// parameter exists
 		if(isset($this->parameters[$key]) && $this->parameters[$key] != '')
 		{
 			return SpoonFilter::getValue($this->parameters[$key], null, null, $type);
 		}
 
 		return $defaultValue;
 	}
 
 	/**
 	 * Parse to template
 	 */
 	protected function parse()
 	{
 
 	}
 
 	/**
 	 * Redirect to a given URL
 	 *
 	 * @param string $URL The URL to redirect to.
 	 */
 	public function redirect($URL)
 	{
 		SpoonHTTP::redirect(str_replace('&amp;', '&', (string) $URL));
 	}
 
 	/**
 	 * Set the action, for later use
 	 *
 	 * @param string $action The action to load.
 	 */
 	private function setAction($action)
 	{
 		$this->action = (string) $action;
 	}
 
 	/**
 	 * Set the module, for later use
 	 *
 	 * @param string $module The module to load.
 	 */
 	private function setModule($module)
 	{
 		$this->module = (string) $module;
 	}
 }
 
 /**
  * This class implements a lot of functionality that can be extended by the real action.
  * In this case this is the base class for the index action
  *
  * @author Tijs Verkoyen <tijs@sumocoders.be>
  */
