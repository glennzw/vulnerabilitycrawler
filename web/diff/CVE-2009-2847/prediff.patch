   do_sigaltstack: avoid copying 'stack_t' as a structure to user space
   
   Ulrich Drepper correctly points out that there is generally padding in
   the structure on 64-bit hosts, and that copying the structure from
   kernel to user space can leak information from the kernel stack in those
   padding bytes.
   
   Avoid the whole issue by just copying the three members one by one
   instead, which also means that the function also can avoid the need for
   a stack frame.  This also happens to match how we copy the new structure
   from user space, so it all even makes sense.
   
   [ The obvious solution of adding a memset() generates horrid code, gcc
     does really stupid things. ]
   
   Reported-by: Ulrich Drepper <drepper@redhat.com>
   Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
	stack_t oss;
	int error;

	if (uoss) {
		oss.ss_sp = (void __user *) current->sas_ss_sp;
		oss.ss_size = current->sas_ss_size;
		oss.ss_flags = sas_ss_flags(sp);
	}

	if (uss) {
		void __user *ss_sp;
		current->sas_ss_size = ss_size;
	}

	if (uoss) {
		error = -EFAULT;
		if (copy_to_user(uoss, &oss, sizeof(oss)))
			goto out;
	}

	error = 0;
out:
	return error;
}
