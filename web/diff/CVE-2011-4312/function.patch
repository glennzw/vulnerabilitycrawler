commit 7a0a9d94555502278534dedcf2d75e9fccce8c3d
Author: Christian Hammond <chipx86@chipx86.com>
Date:   Tue Nov 15 02:46:40 2011 -0800

    Fix a comment vulnerability allowing scripts to be loaded.
    
    Due to the way that comments were loaded in, it was possible to
    terminate a script and inject a new one while loading the diff viewer.
    This isn't believed to have been a problem in the wild, but is certainly
    an important one to fix.
    
    We now ensure that the text is escaped at the point where it's being fed
    into the JavaScript. It's no longer possible to inject scripts.
    
    Thanks to Damian Johnson for the heads up and for the fix that this
    change is based on.
    
    This will be going into 1.5.7 and 1.6.3 releases.

diff --git a/reviewboard/htdocs/media/rb/js/diffviewer.js b/reviewboard/htdocs/media/rb/js/diffviewer.js
index ce96de6..abc94b5 100644
--- a/reviewboard/htdocs/media/rb/js/diffviewer.js
+++ b/reviewboard/htdocs/media/rb/js/diffviewer.js
@@ -102,79 +102,82 @@ var gStartAtAnchor = null;
 function DiffCommentBlock(beginRow, endRow, beginLineNum, endLineNum,
                           comments) {
     var self = this;
 
     var table = beginRow.parents("table:first")
     var fileid = table[0].id;
 
     this.filediff = gFileAnchorToId[fileid];
     this.interfilediff = gInterdiffFileAnchorToId[fileid];
     this.beginLineNum = beginLineNum;
     this.endLineNum = endLineNum;
     this.beginRow = beginRow;
     this.endRow = endRow;
     this.comments = [];
     this.draftComment = null;
 
     this.el = $("<span/>")
         .addClass("commentflag")
         .append($("<span/>").addClass("commentflag-shadow"))
         .click(function() {
             self.showCommentDlg();
             return false;
         });
 
     $(window).bind("resize", function(evt) {
         self.updateSize();
     });
 
     var innerFlag = $("<span/>")
         .addClass("commentflag-inner")
         .appendTo(this.el);
 
     this.countEl = $("<span/>")
         .appendTo(innerFlag);
 
     if ($.browser.msie && $.browser.version == 6) {
         /*
          * Tooltips for some reason cause comment flags to disappear in IE6.
          * So for now, just fake them and never show them.
          */
         this.tooltip = $("<div/>");
     } else {
         this.tooltip = $.tooltip(this.el, {
             side: "rb"
         }).addClass("comments");
     }
 
     this.anchor = $("<a/>")
         .attr("name",
               "file" + this.filediff['id'] + "line" + this.beginLineNum)
         .addClass("comment-anchor")
         .appendTo(this.el);
 
     /*
      * Find out if there's any draft comments, and filter them out of the
      * stored list of comments.
      */
     if (comments && comments.length > 0) {
         for (var i in comments) {
             var comment = comments[i];
 
+            // We load in encoded text, so decode it.
+            comment.text = $("<div/>").html(comment.text).text();
+
             if (comment.localdraft) {
                 this._createDraftComment(comment.text);
             } else {
                 this.comments.push(comment);
             }
         }
     } else {
         this._createDraftComment();
     }
 
     this.updateCount();
     this.updateTooltip();
     this.updateSize();
 
     /* Now that we've built everything, add this to the DOM. */
     this.beginRow[0].cells[0].appendChild(this.el[0]);
 }
 
diff --git a/reviewboard/htdocs/media/rb/js/screenshots.js b/reviewboard/htdocs/media/rb/js/screenshots.js
index 896e2ac..7a40e3d 100644
--- a/reviewboard/htdocs/media/rb/js/screenshots.js
+++ b/reviewboard/htdocs/media/rb/js/screenshots.js
@@ -13,47 +13,50 @@
 function CommentBlock(x, y, width, height, container, comments) {
     var self = this;
 
     this.x = x;
     this.y = y;
     this.width = width;
     this.height = height;
     this.hasDraft = false;
     this.comments = [];
     this.canDelete = false;
     this.draftComment = null;
 
     this.el = $('<div class="selection"/>').appendTo(container);
     this.tooltip = $.tooltip(this.el, {
         side: "lrbt"
     }).addClass("comments");
     this.flag = $('<div class="selection-flag"/>').appendTo(this.el);
 
     /*
      * Find out if there's any draft comments, and filter them out of the
      * stored list of comments.
      */
     if (comments && comments.length > 0) {
         for (var i in comments) {
             var comment = comments[i];
 
+            // We load in encoded text, so decode it.
+            comment.text = $("<div/>").html(comment.text).text();
+
             if (comment.localdraft) {
                 this._createDraftComment(comment.text);
             } else {
                 this.comments.push(comment);
             }
         }
     } else {
         this._createDraftComment();
     }
 
     this.el
         .move(this.x, this.y, "absolute")
         .width(this.width)
         .height(this.height);
 
     this.updateCount();
     this.updateTooltip();
 
     return this;
 }
 
diff --git a/reviewboard/reviews/templatetags/reviewtags.py b/reviewboard/reviews/templatetags/reviewtags.py
index 81071dc..2eb988e 100644
--- a/reviewboard/reviews/templatetags/reviewtags.py
+++ b/reviewboard/reviews/templatetags/reviewtags.py
@@ -4,6 +4,7 @@ from django.db.models import Q
 from django.template import NodeList, TemplateSyntaxError
 from django.template.loader import render_to_string
 from django.utils import simplejson
+from django.utils.html import escape
 from django.utils.translation import ugettext_lazy as _
 from djblets.util.decorators import basictag, blocktag
 from djblets.util.misc import get_object_or_none
@@ -91,116 +92,116 @@ def ifneatnumber(context, nodelist, rid):
 def commentcounts(context, filediff, interfilediff=None):
     """
     Returns a JSON array of current comments for a filediff, sorted by
     line number.
 
     Each entry in the array has a dictionary containing the following keys:
 
       =========== ==================================================
       Key         Description
       =========== ==================================================
       comment_id  The ID of the comment
       text        The text of the comment
       line        The first line number
       num_lines   The number of lines this comment spans
       user        A dictionary containing "username" and "name" keys
                   for the user
       url         The URL to the comment
       localdraft  True if this is the current user's draft comment
       =========== ==================================================
     """
     comment_dict = {}
     user = context.get('user', None)
 
     if interfilediff:
         query = Comment.objects.filter(filediff=filediff,
                                        interfilediff=interfilediff)
     else:
         query = Comment.objects.filter(filediff=filediff,
                                        interfilediff__isnull=True)
 
     for comment in query:
         review = get_object_or_none(comment.review)
 
         if review and (review.public or review.user == user):
             key = (comment.first_line, comment.num_lines)
 
             comment_dict.setdefault(key, []).append({
                 'comment_id': comment.id,
-                'text': comment.text,
+                'text': escape(comment.text),
                 'line': comment.first_line,
                 'num_lines': comment.num_lines,
                 'user': {
                     'username': review.user.username,
                     'name': review.user.get_full_name() or review.user.username,
                 },
                 #'timestamp': comment.timestamp,
                 'url': comment.get_review_url(),
                 'localdraft': review.user == user and \
                               not review.public,
             })
 
     comments_array = []
 
     for key, value in comment_dict.iteritems():
         comments_array.append({
             'linenum': key[0],
             'num_lines': key[1],
             'comments': value,
         })
 
     comments_array.sort(cmp=lambda x, y: cmp(x['linenum'], y['linenum'] or
                                          cmp(x['num_lines'], y['num_lines'])))
 
     return simplejson.dumps(comments_array)
 
 
 @register.tag
 @basictag(takes_context=True)
 def screenshotcommentcounts(context, screenshot):
     """
     Returns a JSON array of current comments for a screenshot.
 
     Each entry in the array has a dictionary containing the following keys:
 
       =========== ==================================================
       Key         Description
       =========== ==================================================
       text        The text of the comment
       localdraft  True if this is the current user's draft comment
       x           The X location of the comment's region
       y           The Y location of the comment's region
       w           The width of the comment's region
       h           The height of the comment's region
       =========== ==================================================
     """
     comments = {}
     user = context.get('user', None)
 
     for comment in screenshot.comments.all():
         review = get_object_or_none(comment.review)
 
         if review and (review.public or review.user == user):
             position = '%dx%d+%d+%d' % (comment.w, comment.h, \
                                         comment.x, comment.y)
 
             comments.setdefault(position, []).append({
                 'id': comment.id,
-                'text': comment.text,
+                'text': escape(comment.text),
                 'user': {
                     'username': review.user.username,
                     'name': review.user.get_full_name() or review.user.username,
                 },
                 'url': comment.get_review_url(),
                 'localdraft' : review.user == user and \
                                not review.public,
                 'x' : comment.x,
                 'y' : comment.y,
                 'w' : comment.w,
                 'h' : comment.h,
             })
 
     return simplejson.dumps(comments)
 
 
 @register.tag
 @basictag(takes_context=True)
